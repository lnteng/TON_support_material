#pragma version >=0.2.0;

#include "../imports/stdlib.fc";
#include "imports/op-codes-nft.fc";
#include "imports/params.fc";
#include "imports/constants.fc";

;; TONNEL RELAYER BOT NFT

(slice, int, cell, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return
            (ds~load_msg_addr(), ;; owner_address
                    ds~load_uint(64), ;; next_item_index
                    ds~load_ref(), ;; content
                    ds~load_ref(), ;; nft_item_code
                    ds~load_ref(),  ;; royalty_params
                    ds~load_ref() ;; price ; howmany left
            );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell mint_info) impure inline {
    set_data(begin_cell()
            .store_slice(owner_address)
            .store_uint(next_item_index, 64)
            .store_ref(content)
            .store_ref(nft_item_code)
            .store_ref(royalty_params)
            .store_ref(mint_info)
            .end_cell());
}

(int, int) encode_number_to_text(int number) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);
    return (len, value);
}
() send_ton(slice recepient, int amount) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(recepient)
            .store_grams(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
    send_raw_message(msg, 1);

}
cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}


() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var (len, value) = encode_number_to_text(item_index);
    slice address_owner_slice = nft_content.begin_parse();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(
                    begin_cell()
                            .store_slice(address_owner_slice~load_msg_addr())
                            .store_ref(
                                    begin_cell()
                                            .store_uint(value, len * 8)
                                            .end_cell())
                            .end_cell()
            );
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(to_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::report_royalty_params(), 32)
            .store_uint(query_id, 64)
            .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, mint_info) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == op::mint()) { ;; deploy new nft

        slice mint_info_slice = mint_info.begin_parse();
        int price = mint_info_slice~load_coins();
        int howmany = mint_info_slice~load_uint(32);
        if (howmany < 1) {
            throw(error::sold_out());
        }
        int amount_to_fwd = in_msg_body~load_coins();
        throw_unless(error::not_enough(), msg_value >= price + amount_to_fwd);
        send_ton(owner_address, price);
        deploy_nft_item(next_item_index, nft_item_code, amount_to_fwd, in_msg_body~load_ref());

        next_item_index += 1;
        cell new_mint_info = begin_cell()
                .store_coins(price)
                .store_uint(howmany - 1, 32)
                .end_cell();
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_mint_info);
        return ();
    }
    throw_unless(401, equal_slices(sender_address, owner_address));


    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, mint_info);
        return ();
    }
    if (op == 4) { ;; change nft price and howmany
        int price_new = in_msg_body~load_coins();
        cell new_mint_info = begin_cell()
                .store_coins(price_new)
                .store_uint(in_msg_body~load_uint(32), 32)
                .end_cell();
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_mint_info);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

(int, int) get_price_many() method_id {
    var (_, _, _, _, _, mint_info) = load_data();
    slice mint_info_slice = mint_info.begin_parse();

    return (mint_info_slice~load_coins(), mint_info_slice~load_uint(32));
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _,royalty, _) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
            .store_uint(1, 8) ;; offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
            .end_cell());
}