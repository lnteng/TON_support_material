struct Image : Item
{
    source
};

function render(without data, IconSource previousSource, IconSource currentSource, Image image)
{
	let path = serialize(Range::concat(Range::concat("/usr/share/icons/breeze/actions/16/", previousSource.name), ".svg"));

	return Svg::render(path, image.width, image.height);
}

function render(Svg::Image data, IconSource previousSource, IconSource currentSource, Image image)
{
	if (Range::equals(previousSource.name, currentSource.name))
	{
		return data;
	}

	return render(nothing, previousSource, currentSource, image);
}

function initialize(IconSource previousSource, IconSource currentSource, Image image)
{
	return currentSource with
	{
		data: render(previousSource.data, previousSource, currentSource, image)
	};
}

function update(Image previousImage, Image currentImage)
{
	return previousImage with
	{
		source: initialize(previousImage.source, currentImage.source, previousImage)
	};
}

function update(EventState events, any parent, (Image image, Image nextItem))
{
    return update(image, nextItem);
}

function update(EventState events, any parent, ((Image image, Image nextItem), ...controls))
{
	return update(image, nextItem) -> update(events, parent, ...controls);
}

function process(ApplicationState state, (Image image, ...controls))
{
    return tail process(state, ...controls);
}

function process(ApplicationState state, Image image)
{
    return state.user;
}

function serialize(...range)
{
	return serialize(Memory::allocate(200i64), 0i64, ...range);
}

import void ses(buffer dest, i64 offset, i32 value);
import void printBuf(buffer buffer);
import void printBufLen(buffer buffer);

function serialize(buffer storage, i64 offset, (any c, ...remaining))
{
	ses(storage, offset, c);

	return tail serialize(Memory::reallocate(storage, offset + 3i64), offset + 1i64, ...remaining);
}

function serialize(buffer storage, i64 offset, any c)
{
	ses(storage, offset, c);
	ses(storage, offset + 1i64, 0);

	return storage;
}

function surfaceFrom(Svg::Image image)
{
	return SDL::SDL_CreateRGBSurfaceFrom(image.data, image.width, image.height, 32, image.width * 4, 0x000000FFu32, 0x0000FF00u32, 0x00FF0000u32, 0xFF000000u32);
}

function surfaceFrom(IconSource source)
{
	return surfaceFrom(source.data);
}

function draw(i64 renderer, any parent, Image image)
{
	let surface = surfaceFrom(image.source);

	let texture = SDL::SDL_CreateTextureFromSurface(renderer, surface);

	SDL::SDL_RenderCopy(renderer, texture, 0i64, boundingRect(image));
	SDL::SDL_FreeSurface(surface);

	return nothing;
}
