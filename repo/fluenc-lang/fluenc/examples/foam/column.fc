use "array.fc"
use "algorithms.fc"

import f32 intToFloat(i32 value);
import i32 floatToInt(f32 value);

// Types

struct Layout : Item
{
	spacing: 5
};

struct LayoutItem
{
	item,
	stretch: 0,
	minimum: 0,
	maximum: 32767
};

struct Column : Layout;
struct Row : Layout;

// Utility

function getWidth(Item item)
{
	return item.width;
}

function getHeight(Item item)
{
	return item.height;
}

function getNativeSize(Column column)
{
	return column.height;
}

function getNativeSize(Row row)
{
	return row.width;
}

function getForeignSize(Column column)
{
	return column.width;
}

function getForeignSize(Row row)
{
	return row.height;
}

function getNativeSize(Row row, Size size)
{
	return size.width;
}

function getNativeSize(Column column, Size size)
{
	return size.height;
}

// Layouting

struct LayoutInfo
{
	remainingStretch: 0.0,
	totalStretch: 0.0,
	numberOfItems: 0,
	spacing: 0,
	native: 0,
	foreign: 0
};

struct LayoutSize
{
	allocated,
	actual,
	stretch
};

struct Size
{
	width: 0,
	height: 0
};

function buildLayoutInfo(LayoutInfo info, LayoutItem item)
{
	return info with
	{
		totalStretch: info.totalStretch + intToFloat(item.stretch),
		numberOfItems: info.numberOfItems + 1,
	};
}

namespace Math
{
	function pax(Size x, Size y)
	{
		return Size
		{
			width: max(x.width, y.width),
			height: max(x.height, y.height)
		};
	}
}

function getMaxImplicitSize(Size accumulated, Item item)
{
	let is = getImplicitSize(item);

	let size = Size
	{
		width: item.x + is.width,
		height: item.y + is.height
	};

	return Math::pax(accumulated, size);
}

function getMaxImplicitSize(Size accumulated, without item)
{
	return accumulated;
}

function getImplicitSize(Item item)
{
	return Range::aggregate(...item.children, Size {}, getMaxImplicitSize);
}

function calculateNativeItemSize(Layout layout, LayoutItem item, i32 overflow, LayoutInfo info)
{
	if (item.stretch > 0)
	{
		let spacing = (info.numberOfItems - 1) * info.spacing;
		let availableSize = info.native - spacing;

		let itemStretch = intToFloat(item.stretch);

		let allocatedSize = intToFloat(availableSize) * (itemStretch / info.totalStretch);
		let allocatedOverflow = intToFloat(overflow) * (itemStretch / info.remainingStretch);

		let proposedSize = floatToInt(allocatedSize + allocatedOverflow);

		if (proposedSize >= item.maximum)
		{
			return LayoutSize
			{
				allocated: floatToInt(allocatedSize),
				actual: item.maximum,
				stretch: info.remainingStretch - itemStretch,
			};
		}

		if (proposedSize <= item.minimum)
		{
			return LayoutSize
			{
				allocated: floatToInt(allocatedSize),
				actual: item.minimum,
				stretch: info.remainingStretch - itemStretch,
			};
		}

		return LayoutSize
		{
			allocated: floatToInt(allocatedSize),
			actual: proposedSize,
			stretch: info.remainingStretch - itemStretch,
		};
	}

	return LayoutSize
	{
		allocated: 0,
		actual: Math::max(item.minimum, getNativeSize(layout, getImplicitSize(item.item))),
		stretch: info.remainingStretch,
	};
}

struct Klegg
{
	layout,
	size
}

function createSize(Row layout, i32 value)
{
	return Size
	{
		width: value
	};
}

function createSize(Column layout, i32 value)
{
	return Size
	{
		height: value
	};
}

function sumImplicitSize(Row row, Size accumulated, LayoutItem item)
{
	let is = getImplicitSize(item.item);

	return Klegg
	{
		layout: row,
		size: Size
		{
			width: accumulated.width + Math::max(is.width, item.minimum),
			height: Math::max(accumulated.height, is.height)
		}
	};
}

function sumImplicitSize(Column column, Size accumulated, LayoutItem item)
{
	let is = getImplicitSize(item.item);

	return Klegg
	{
		layout: column,
		size: Size
		{
			width: Math::max(accumulated.width, is.width),
			height: accumulated.height + Math::max(is.height, item.minimum)
		}
	};
}

function sumImplicitSize(Klegg accumulated, LayoutItem item)
{
	return sumImplicitSize(accumulated.layout, accumulated.size, item);
}

function size(i32 value)
{
	return Size
	{
		width: value,
		height: value
	};
}

function getImplicitSize(Layout layout)
{
	// let count = Range::size(...layout.children, 0);
	// let spacing = (count - 1) * layout.spacing;

	let ssize = Klegg
	{
		layout: layout,
		size: Size {}//createSize(layout, spacing)
	};

	let k = Range::aggregate(...layout.children, ssize, sumImplicitSize);

	return k.size;
}

function getOverflow((any i, ...items))
{
	return tail getOverflow(...items);
}

function getOverflow(i32 overflow)
{
	return overflow;
}

function getOverflow(any i)
{
	return 0;
}

function solve(i32 overflow, EventState events, LayoutInfo info, Layout item, Layout nextItem)
{
	let result = layout(events, item, 0, overflow, info, ...(item.children | nextItem.children));

	let remainingOverflow = getOverflow(...result);

	if (remainingOverflow != 0)
	{
		return tail solve(remainingOverflow, events, info, item, nextItem);
	}

	return item with
	{
		children: result
	};
}

// Draw

function draw(i64 renderer, without parent, Layout item)
{
	return draw(renderer, item, ...item.children);
}

function draw(i64 renderer, Item parent, Layout item)
{
	puts("Draw layout");

	let surrogate = parent with
	{
		x: parent.x + item.x,
		y: parent.y + item.y
	};

	return draw(renderer, surrogate, ...item.children);
}

function draw(i64 renderer, any parent, LayoutItem item)
{
	return draw(renderer, parent, item.item);
}

// Process

function process(ApplicationState state, (Layout item, ...controls))
{
	return tail process(state, ...controls);
}

function process(ApplicationState state, Layout item)
{
	return state.user;
}

// Update

function update(EventState events, any parent, (Layout item, Layout nextItem))
{
	let adapted = item with
	{
		width: getWidth(parent),
		height: getHeight(parent),
	};

	let seed = LayoutInfo
	{
		spacing: item.spacing,
		native: getNativeSize(adapted),
		foreign: getForeignSize(adapted),
	};

	let info = Array::aggregate(...item.children, seed, buildLayoutInfo);

	let withRemainingStretch = info with
	{
		remainingStretch: info.totalStretch,
	};

	return solve(0, events, withRemainingStretch, adapted, nextItem);
}

function update(EventState events, any parent, ((Layout item, Layout nextItem), ...controls))
{
	return update(events, parent, (item, nextItem)) -> update(events, parent, ...controls);
}

// Column

function layout(EventState events, Column column, i32 offset, i32 overflow, LayoutInfo info, (LayoutItem item, LayoutItem nextItem))
{
	let nis = calculateNativeItemSize(column, item, overflow, info);

	let layouted = item.item with
	{
		x: column.x,
		y: offset + column.y,
		width: info.foreign,
		height: nis.actual,
	};

	// let remainingOverflow = (nis.allocated - nis.actual) + overflow;
 //
	// if ((remainingOverflow != 0) && (info.remainingStretch > 0.0))
	// {
	// 	return remainingOverflow;
	// }

	let parent = Item
	{
		width: info.foreign,
		height: nis.actual,
	};

	return item with
	{
		item: update(events, parent, expand(layouted) | expand(nextItem.item))
	};
}

function layout(EventState events, Column column, i32 offset, i32 overflow, LayoutInfo info, ((LayoutItem item, LayoutItem nextItem), ...items))
{
	let nis = calculateNativeItemSize(column, item, overflow, info);

	let layouted = item.item with
	{
		x: column.x,
		y: offset + column.y,
		width: info.foreign,
		height: nis.actual,
	};

	let parent = Item
	{
		width: info.foreign,
		height: nis.actual,
	};

	let result = item with
	{
		item: update(events, parent, expand(layouted) | expand(nextItem.item))
	};

	let nextOffset = nis.actual + offset + info.spacing;
	let remainingOverflow = (nis.allocated - nis.actual) + overflow;

	let withRemainingStretch = info with
	{
		remainingStretch: nis.stretch,
	};

	return result -> layout(events, column, nextOffset, remainingOverflow, withRemainingStretch, ...items);
}

// Row

function layout(EventState events, Row row, i32 offset, i32 overflow, LayoutInfo info, (LayoutItem item, LayoutItem nextItem))
{
	let nis = calculateNativeItemSize(row, item, overflow, info);

	let layouted = item.item with
	{
		x: offset + row.x,
		y: row.y,
		width: nis.actual,
		height: info.foreign,
	};

	// let remainingOverflow = (nis.allocated - nis.actual) + overflow;
 //
	// if ((remainingOverflow != 0) && (info.remainingStretch > 0.0))
	// {
	// 	return remainingOverflow;
	// }

	return item with
	{
		item: update(events, row, expand(layouted) | expand(nextItem.item))
	};
}

function layout(EventState events, Row row, i32 offset, i32 overflow, LayoutInfo info, ((LayoutItem item, LayoutItem nextItem), ...items))
{
	let nis = calculateNativeItemSize(row, item, overflow, info);

	let layouted = item.item with
	{
		x: offset + row.x,
		y: row.y,
		width: nis.actual,
		height: info.foreign,
	};

	let result = item with
	{
		item: update(events, row, expand(layouted) | expand(nextItem.item))
	};

	let nextOffset = nis.actual + offset + info.spacing;
	let remainingOverflow = (nis.allocated - nis.actual) + overflow;

	let withRemainingStretch = info with
	{
		remainingStretch: nis.stretch,
	};

	return result -> layout(events, row, nextOffset, remainingOverflow, withRemainingStretch, ...items);
}
