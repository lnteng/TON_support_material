{-
  TON Instant Lottery
  ton.fun | lotto.ton

  authors:
  1. Raiymbek Kapishev | raiym
        created the first version contract with a bug | https://github.com/raiym/astonished

  2. Andrew Gutarev    | pyAndr3w
        hacked the first version contract and create new version (this) | https://github.com/pyAndr3w/ton-instant-lottery-smc


  Special thanks to TON Fruits for the "Calculating new hash" algorithm
-}

int workchains_equal?(slice addr1, slice addr2) asm "REWRITESTDADDR DROP SWAP REWRITESTDADDR DROP EQUAL";
int slices_equal?(slice s1, slice s2) asm "SDEQ";
int my_tons() asm "BALANCE" "FIRST";

cell remove_old_orders(cell orders, int o_seqno) {
  int cursor = o_seqno - 20;
  do {
    (cursor, slice order, int f) = orders.udict_get_prev?(64, cursor);
    if (f) {
      orders~udict_delete_get?(64, cursor);
    }
  } until (~ f)
  return orders;
}

_ pack_state(int o_seqno, int n_wins, int in_amount, int out_amount, int hash, slice owner1, slice owner2, slice echo, cell orders) inline {
  return begin_cell()             ;; FIRST CELL
    .store_uint(o_seqno, 64)      ;; 64 bit  | order seqno
    .store_uint(n_wins, 64)       ;; 64 bit  | number of wins
    .store_uint(in_amount, 256)   ;; 256 bit | ingoing amount
    .store_uint(out_amount, 256)  ;; 256 bit | outgoing amount
    .store_uint(hash, 256)        ;; 256 bit | seed salt
    .store_dict(orders)           ;; bit+ref | last orders dict
    .store_ref(
      begin_cell()                ;; SECOND CELL:
        .store_slice(owner1)      ;; 267 bit | owner 1, @sergei_ton
        .store_slice(owner2)      ;; 267 bit | owner 2, @pyAndr3w
        .store_slice(echo)        ;; 267 bit | crossworkchain echo contract
        .end_cell())
    .end_cell();
}

_ unpack_state() inline {
  var ds = get_data().begin_parse();
  slice stats = ds~load_bits(896);
  cell orders = ds~load_dict();
  slice adrs = ds.preload_ref().begin_parse();
  var unpacked = (stats, orders, adrs~load_msg_addr(), adrs~load_msg_addr(), adrs~load_msg_addr());
  return unpacked;
}

_ unpack_stats(slice stats) inline {
  var unpacked = (stats~load_uint(64), stats~load_uint(64), stats~load_uint(256), stats~load_uint(256), stats~load_uint(256));
  return unpacked;
}

_ pack_order(int id, int status, int timestamp, int amount, slice address) inline {
  return begin_cell()
    .store_uint(id, 64)
    .store_uint(status, 4)
    .store_uint(timestamp, 64)
    .store_coins(amount)
    .store_slice(address);
}

_ unpack_order(slice order) inline_ref {
    return (order~load_uint(64), order~load_uint(4), order~load_uint(64), order~load_coins(), order~load_msg_addr());
}

() send_tons(slice address, int amount, int mode) impure inline {
  builder msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
  send_raw_message(msg.end_cell(), mode);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int msg_hash = slice_hash(cs);

  int flags = cs~load_uint(4);
  if (flags & 1) { ;; ignore all bounced messages
      return ();
  }

  slice sender = cs~load_msg_addr();

  (slice stats, cell orders, slice owner1, slice owner2, slice echo) = unpack_state();

  if (slices_equal?(sender, owner1) | slices_equal?(sender, owner2)) {
    ;; owners can only deposit
    return ();
  }

  if (slices_equal?(sender, echo)) {
    (slice player, int o_amount) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins());
    ;; lottery inactive if balance < 2 stake + 1 TON
    if (my_tons() < o_amount * 2 + 1000000000) {
       send_tons(player, msg_value, 2);
    } else {
      (int o_seqno, int n_wins, int in_amount, int out_amount, int hash) = unpack_stats(stats);
      ;; Calculating new hash
      hash = cell_hash(begin_cell()
        .store_uint(hash, 256)
        .store_uint(msg_hash, 256)
        .store_uint(cur_lt(), 64)
        .store_uint(now(), 64)
        .end_cell()
      );
      randomize(hash);
      if (rand(10) >= 4) {
        builder order = pack_order(o_seqno, 3, now(), o_amount, player);
        orders~udict_set_builder(64, o_seqno, order);
        in_amount += o_amount;
        if (o_amount > 3000000000) {
            send_tons(owner1, o_amount / 6, 3);
            send_tons(owner2, o_amount / 6, 3);
        }
      } else {
        builder order = pack_order(o_seqno, 2, now(), o_amount, player);
        orders~udict_set_builder(64, o_seqno, order);

        in_amount += o_amount;
        out_amount += o_amount * 2;
        n_wins += 1;

        send_tons(player, 2 * o_amount, 3);
      }
      orders = remove_old_orders(orders, o_seqno);
      o_seqno += 1;

      set_data(pack_state(o_seqno, n_wins, in_amount, out_amount, hash, owner1, owner2, echo, orders));
    }
    return();
  }

  ;; workchain protection
  throw_unless(111, workchains_equal?(sender, my_address()));

  ;; min stake 1 TON
  throw_unless(333, msg_value > 999999999);

  ;; lottery active if balance > 2 stake + 1 TON
  throw_unless(666, my_tons() > msg_value * 2 + 1000000000);

  ;; send order amount to echo contract (crossworkchain)
  builder msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(echo)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_slice(sender)
    .store_coins(msg_value);
  send_raw_message(msg.end_cell(), 64);
}

;; ========== GET-METHODS FOR OLD SOFTWARE ==========

tuple order_tuple(int id, int status, int timestamp, int amount, int wc, int addr_hash) asm(id status timestamp amount wc addr_hash) "6 TUPLE";

int get_order_seqno() method_id {
  (slice stats, _, _, _, _) = unpack_state();
  (int o_seqno, _, _, _, _) = unpack_stats(stats);
  return o_seqno;
}

int get_number_of_wins() method_id {
  (slice stats, _, _, _, _) = unpack_state();
  (_, int n_wins, _, _, _) = unpack_stats(stats);
  return n_wins;
}

int get_incoming_amount() method_id {
  (slice stats, _, _, _, _) = unpack_state();
  (_, _, int in_amount, _, _) = unpack_stats(stats);
  return in_amount;
}

int get_outgoing_amount() method_id {
  (slice stats, _, _, _, _) = unpack_state();
  (_, _, _, int out_amount, _) = unpack_stats(stats);
  return out_amount;
}

var get_orders() method_id {
  (_, cell orders, _, _, _) = unpack_state();
  int cursor = 0x7fffffff;
  var l = nil;
  do {
    (cursor, var order, int f) = orders.udict_get_prev?(64, cursor);
    if (f) {
      (int id, int status, int timestamp, int amount, slice address) = unpack_order(order);
      (int wc, int addr_hash) = address.parse_std_addr();
      l = cons(order_tuple(id, status, timestamp, amount, wc, addr_hash), l);
    }
  } until (~ f)
  return l;
}

int get_pubkey() method_id {
  (slice stats, _, _, _, _) = unpack_state();
  (_, _, _, _, int hash) = unpack_stats(stats);
  return hash;
}

int balance() method_id {
    return my_tons();
}
