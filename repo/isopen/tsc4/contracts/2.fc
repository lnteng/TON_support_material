{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

(int) tlen (tuple t) asm "TLEN";

() recv_internal() {
}

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
    int rowsA = matrixA.tlen();
    int rowsB = matrixB.tlen();
    int colsB = matrixB.at(0).tlen();
    int colsA = matrixA.at(0).tlen();

    if (rowsA < 2) {
      return empty_tuple();
    }
    elseif (colsA < 2) {
      return empty_tuple();
    }
    elseif (rowsA > 32) {
      return empty_tuple();
    }
    elseif (colsA > 32) {
      return empty_tuple();
    }
    elseif (rowsB < 2) {
      return empty_tuple();
    }
    elseif (colsB < 2) {
      return empty_tuple();
    }
    elseif (rowsB > 32) {
      return empty_tuple();
    }
    elseif (colsB > 32) {
      return empty_tuple();
    }
    elseif (colsA != rowsB) {
      return empty_tuple();
    }

    tuple result = empty_tuple();

    int i = 0;
    repeat (rowsA) {
        tuple tmp = empty_tuple();
        int j = 0;
        repeat (colsB) {
            int sum = 0;
            int k = 0;
            repeat (rowsB) {
                sum += matrixA.at(i).at(k) * matrixB.at(k).at(j);
                k += 1;
            }
            tmp~tpush(sum);
            j += 1;
        }
        result~tpush(tmp);
        i += 1;
    }
    
    return result;
}

