#pragma version >=0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    __tact_verify_address(raw);
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

builder __gen_write_Transfer(builder build_0, (int, int, slice, int, cell) v) inline {
    var (v'seqno, v'mode, v'to, v'amount, v'body) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'mode, 8);
    build_0 = __tact_store_address(build_0, v'to);
    build_0 = build_0.store_coins(v'amount);
    build_0 = ~ null?(v'body) ? build_0.store_int(true, 1).store_ref(v'body) : build_0.store_int(false, 1);
    return build_0;
}

cell __gen_writecell_Transfer((int, int, slice, int, cell) v) inline_ref {
    return __gen_write_Transfer(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, int, cell))) __gen_read_Transfer(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'mode = sc_0~load_uint(8);
    var v'to = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'body = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'seqno, v'mode, v'to, v'amount, v'body));
}

(slice, ((slice, (int, int, slice, int, cell)))) __gen_read_TransferMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 123);
    var v'signature = sc_0~load_ref().begin_parse();
    var v'transfer = sc_0~__gen_read_Transfer();
    return (sc_0, (v'signature, v'transfer));
}

builder __gen_write_Wallet(builder build_0, (int, int, int) v) inline {
    var (v'seqno, v'key, v'walletId) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'key, 256);
    build_0 = build_0.store_uint(v'walletId, 64);
    return build_0;
}

(slice, ((int, int, int))) __gen_read_Wallet(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'key = sc_0~load_uint(256);
    var v'walletId = sc_0~load_uint(64);
    return (sc_0, (v'seqno, v'key, v'walletId));
}

_ __gen_Context_get_bounced((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'bounced;
}

(int, int, int) __gen_load_Wallet() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_Wallet();
}

() __gen_store_Wallet((int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_Wallet(b, v);
    set_data(b.end_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

cell $__gen_Wallet_init(cell sys', int $key, int $walletId) {
    var (($self'seqno, $self'key, $self'walletId)) = (0, null(), null());
    $self'key = $key;
    $self'walletId = $walletId;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_Wallet(b', ($self'seqno, $self'key, $self'walletId));
    return b'.end_cell();
}

(cell, cell) $__gen_Wallet_init_child(cell sys', int $key, int $walletId) {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Wallet
    cell mine = __tact_dict_get_code(source, 14718);
    contracts = __tact_dict_set_code(contracts, 14718, mine);
    cell sys = begin_cell().store_dict(contracts).end_cell();
    return (mine, $__gen_Wallet_init(sys, $key, $walletId));
}

int $__gen_Wallet_publicKey((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return $self'key;
}

_ $__gen_get_publicKey() method_id(86520) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_publicKey(self);
    return res;
}

int $__gen_Wallet_walletId((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return $self'walletId;
}

_ $__gen_get_walletId() method_id(114762) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_walletId(self);
    return res;
}

int $__gen_Wallet_seqno((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return $self'seqno;
}

_ $__gen_get_seqno() method_id(85143) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_seqno(self);
    return res;
}

((int, int, int), ()) $__gen_Wallet_receive_comment_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    return (($self'seqno, $self'key, $self'walletId), ());
}

(((int, int, int)), ()) $__gen_Wallet_receive_TransferMessage((int, int, int) $self, (slice, (int, int, slice, int, cell)) $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    var ($msg'signature, ($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)) = $msg;
    int $op_hash = cell_hash(__gen_writecell_Transfer(($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)));
    throw_unless(48401, check_signature($op_hash, $msg'signature, $self'key));
    throw_unless(17654, ($msg'transfer'seqno == $self'seqno));
    $self'seqno = ($self'seqno + 1);
    $send((true, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'mode, $msg'transfer'body, null(), null()));
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $__gen_Wallet_receive_fallback((int, int, int) $self, slice $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        $self'seqno = ($self'seqno + 1);
    }
    return (($self'seqno, $self'key, $self'walletId), ());
}

(((int, int, int)), ()) $__gen_Wallet_receive((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        $self'seqno = ($self'seqno + 1);
    }
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $__gen_Wallet_receive_comment_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        $self'seqno = ($self'seqno + 1);
    }
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $__gen_Wallet_receive_comment_6727d69765f8f22c75c581e356544397f5a00bb91bd32c4d0d96d4c92684bcc2((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        $self'seqno = ($self'seqno + 1);
    }
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $__gen_Wallet_receive_comment_9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    var ($walletInit'code, $walletInit'data) = $__gen_Wallet_init_child(__tact_context_sys, $self'key, ($self'walletId + 1));
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $__gen_Wallet_receive_bounced((int, int, int) $self, slice $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    return (($self'seqno, $self'key, $self'walletId), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        var self = __gen_load_Wallet();
        self~$__gen_Wallet_receive_bounced(in_msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive TransferMessage message
    if (op == 123) {
        var self = __gen_load_Wallet();
        var msg = in_msg~__gen_read_TransferMessage();
        self~$__gen_Wallet_receive_TransferMessage(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        var self = __gen_load_Wallet();
        self~$__gen_Wallet_receive();
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            __gen_store_Wallet(self);
            return ();
        }
        
        ;; Receive "notify" message
        if (text_op == 0x0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2();
            __gen_store_Wallet(self);
            return ();
        }
        
        ;; Receive "слава україни" message
        if (text_op == 0x6727d69765f8f22c75c581e356544397f5a00bb91bd32c4d0d96d4c92684bcc2) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_6727d69765f8f22c75c581e356544397f5a00bb91bd32c4d0d96d4c92684bcc2();
            __gen_store_Wallet(self);
            return ();
        }
        
        ;; Receive "duplicate" message
        if (text_op == 0x9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9();
            __gen_store_Wallet(self);
            return ();
        }
    }
    
    ;; Receiver fallback
    var self = __gen_load_Wallet();
    self~$__gen_Wallet_receive_fallback(in_msg);
    __gen_store_Wallet(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmNikh6ZCk3Zm2bqtKzxnmkyzhFi7BRU7zp1TQGS5WhLVV";
}