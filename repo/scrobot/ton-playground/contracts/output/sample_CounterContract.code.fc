#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_CounterContract.headers.fc";
#include "sample_CounterContract.stdlib.fc";
#include "sample_CounterContract.storage.fc";

;;
;; Contract CounterContract functions
;;

(int, int) $CounterContract$_contract_init(int $id) impure inline_ref {
    var (($self'id, $self'counter)) = (null(), null());
    $self'id = $id;
    $self'counter = 0;
    return ($self'id, $self'counter);
}

((int, int), int) $CounterContract$_fun_counter((int, int) $self) impure inline_ref {
    var (($self'id, $self'counter)) = $self;
    return (($self'id, $self'counter), $self'counter);
}

((int, int), int) $CounterContract$_fun_id((int, int) $self) impure inline_ref {
    var (($self'id, $self'counter)) = $self;
    return (($self'id, $self'counter), $self'id);
}

;;
;; Receivers of a Contract CounterContract
;;

((int, int), ()) $CounterContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae((int, int) $self) impure inline {
    var ($self'id, $self'counter) = $self;
    $self'counter = ($self'counter + 1);
    return (($self'id, $self'counter), ());
}

((int, int), ()) $CounterContract$_internal_text_ed8e2ce59b59e3dcf4a829a62446a19308b0315abeaa54439e1680624662bc1c((int, int) $self) impure inline {
    var ($self'id, $self'counter) = $self;
    $self'counter = ($self'counter + 1);
    ($self'id, $self'counter)~$CounterContract$_fun_reply($Box$_store_cell($Box$_constructor_value($self'counter)));
    return (($self'id, $self'counter), ());
}

((int, int), ()) $CounterContract$_internal_text_85915b1bf5943fd2853bb660338acacfae39d1f735549cef922255a9945acc3e((int, int) $self) impure inline {
    var ($self'id, $self'counter) = $self;
    $self'counter = ($self'counter - 1);
    return (($self'id, $self'counter), ());
}

((int, int), ()) $CounterContract$_internal_text_4aedba9b6dfe7cb8e0f95d1230cb0ac70b4bbbe6a3e991ae767cd363573daf1b((int, int) $self) impure inline {
    var ($self'id, $self'counter) = $self;
    $self'counter = 0;
    return (($self'id, $self'counter), ());
}

((int, int), ()) $CounterContract$_internal_text_16678fa1858bdf8e1aad796f4c9d0b5712fc09179ff87801e763a4dd4adcf710((int, int) $self) impure inline {
    var ($self'id, $self'counter) = $self;
    ($self'id, $self'counter)~$CounterContract$_fun_reply($Box$_store_cell($Box$_constructor_value($self'counter)));
    return (($self'id, $self'counter), ());
}

(((int, int)), ()) $CounterContract$_internal_binary_Add((int, int) $self, (int, int) $msg) impure inline {
    var ($self'id, $self'counter) = $self;
    var ($msg'queryId, $msg'amount) = $msg;
    $self'counter = ($self'counter + $msg'amount);
    return (($self'id, $self'counter), ());
}

(((int, int)), ()) $CounterContract$_internal_binary_Deploy((int, int) $self, (int) $deploy) impure inline {
    var ($self'id, $self'counter) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, $self'counter)~$CounterContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, $self'counter), ());
}

;;
;; Get methods of a Contract CounterContract
;;

_ %counter() method_id(104984) {
    var self = $CounterContract$_contract_load();
    var res = self~$CounterContract$_fun_counter();
    return res;
}

_ %id() method_id(105872) {
    var self = $CounterContract$_contract_load();
    var res = self~$CounterContract$_fun_id();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmfBLqVgEwrmwby1U9jrgu1WHLFDaPcxf6Fjpe7yNF3Pno";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract CounterContract
;;

((int, int), int) $CounterContract$_contract_router_internal((int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Add message
    if (op == 2335447074) {
        var msg = in_msg~$Add$_load();
        self~$CounterContract$_internal_binary_Add(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$CounterContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "increment" message
        if (text_op == 0xc4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae) {
            self~$CounterContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae();
            return (self, true);
        }
        
        ;; Receive "increment_until" message
        if (text_op == 0xed8e2ce59b59e3dcf4a829a62446a19308b0315abeaa54439e1680624662bc1c) {
            self~$CounterContract$_internal_text_ed8e2ce59b59e3dcf4a829a62446a19308b0315abeaa54439e1680624662bc1c();
            return (self, true);
        }
        
        ;; Receive "decrement" message
        if (text_op == 0x85915b1bf5943fd2853bb660338acacfae39d1f735549cef922255a9945acc3e) {
            self~$CounterContract$_internal_text_85915b1bf5943fd2853bb660338acacfae39d1f735549cef922255a9945acc3e();
            return (self, true);
        }
        
        ;; Receive "reset" message
        if (text_op == 0x4aedba9b6dfe7cb8e0f95d1230cb0ac70b4bbbe6a3e991ae767cd363573daf1b) {
            self~$CounterContract$_internal_text_4aedba9b6dfe7cb8e0f95d1230cb0ac70b4bbbe6a3e991ae767cd363573daf1b();
            return (self, true);
        }
        
        ;; Receive "query" message
        if (text_op == 0x16678fa1858bdf8e1aad796f4c9d0b5712fc09179ff87801e763a4dd4adcf710) {
            self~$CounterContract$_internal_text_16678fa1858bdf8e1aad796f4c9d0b5712fc09179ff87801e763a4dd4adcf710();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $CounterContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$CounterContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $CounterContract$_contract_store(self);
}
