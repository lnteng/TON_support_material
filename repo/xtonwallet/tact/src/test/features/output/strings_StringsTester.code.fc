#pragma version >=0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_str_to_slice(slice s) asm "NOP";

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

slice __tact_int_to_string(int src) inline_ref {
    var b = begin_cell();
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }

    if (src < 1000000000000000000000000000000) {
        int len = 0;
        int value = 0;
        int mult = 1;
        do {
            (src, int res) = src.divmod(10);
            value = value + (res + 48) * mult;
            mult = mult * 256;
            len = len + 1;
        } until (src == 0);

        b = b.store_uint(value, len * 8);
    } else {
        tuple t = empty_tuple();
        int len = 0;
        do {
            int digit = src % 10;
            t~tpush(digit);
            len = len + 1;
            src = src / 10;
        } until (src == 0);

        int c = len - 1;
        repeat(len) {
            int v = t.at(c);
            b = b.store_uint(v + 48, 8);
            c = c - 1;
        }
    }
    return b.end_cell().begin_parse();
}

slice __tact_float_to_string(int src, int digits) inline_ref {
    throw_if(134, (digits <= 0) | (digits > 77));
    builder b = begin_cell();

    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }

    ;; Process rem part
    int skip = true;
    int len = 0;
    int rem = 0;
    tuple t = empty_tuple();
    repeat(digits) {
        (src, rem) = src.divmod(10);
        if ( ~ ( skip & ( rem == 0 ) ) ) {
            skip = false;
            t~tpush(rem + 48);
            len = len + 1;
        }
    }

    ;; Process dot
    if (~ skip) {
        t~tpush(46);
        len = len + 1;
    }

    ;; Main
    do {
        (src, rem) = src.divmod(10);
        t~tpush(rem + 48);
        len = len + 1;
    } until (src == 0);

    ;; Assemble
    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v, 8);
        c = c - 1;
    }

    ;; Result
    return b.end_cell().begin_parse();
}

builder __gen_write_StringsTester(builder build_0, (int) v) inline {
    var (v'fee) = v;
    build_0 = build_0.store_int(v'fee, 257);
    return build_0;
}

(slice, ((int))) __gen_read_StringsTester(slice sc_0) inline {
    var v'fee = sc_0~load_int(257);
    return (sc_0, (v'fee));
}

(int) __gen_load_StringsTester() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_StringsTester();
}

() __gen_store_StringsTester((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_StringsTester(b, v);
    set_data(b.end_cell());
}

;; String "test string"
slice __gen_str_3579288646() asm "B{b5ee9c7241010101000d0000167465737420737472696e67ee608f50} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_3070532033() asm "B{b5ee9c7241010101001a000030d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d8d539ad} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€ Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_3872846997() asm "B{b5ee9c72410206010002fa0001fed0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f918020d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b80101fed0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d182200201fed0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d180200301fef09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd10401fe80d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b50500dcd18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0918e6a} B>boc <s PUSHSLICE";

;; String "Hello!"
slice __gen_str_860684655() asm "B{b5ee9c7241010101000800000c48656c6c6f21a44219b3} B>boc <s PUSHSLICE";

;; String "Something something world!"
slice __gen_str_2498516892() asm "B{b5ee9c7241010101001c000034536f6d657468696e6720736f6d657468696e6720776f726c64212a90ca7f} B>boc <s PUSHSLICE";

;; String "Hello, your balance: "
slice __gen_str_519161862() asm "B{b5ee9c7241010101001700002a48656c6c6f2c20796f75722062616c616e63653a201d628127} B>boc <s PUSHSLICE";

;; String "TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcmsu"
slice __gen_str_1560934365() asm "B{b5ee9c72410101010026000048545746756553426f5957356b637942745957746c494778705a32683049486476636d7375ff762436} B>boc <s PUSHSLICE";

slice $__gen_Builder_asSlice(builder $self) impure inline_ref {
    var ($self) = $self;
    return begin_parse(end_cell($self));
}

slice $__gen_Slice_fromBase64(slice $self) impure inline_ref {
    var ($self) = $self;
    int $size = (slice_bits($self) / 8);
    builder $result = begin_cell();
    repeat ($size) {
        int $code = $self~load_uint(8);
        if ((($code >= 65) & ($code <= 90))) {
            $result = store_uint($result, ($code - 65), 6);
        } elseif ((($code >= 97) & ($code <= 122))) {
            $result = store_uint($result, ($code - (97 - 26)), 6);
        } elseif ((($code >= 48) & ($code <= 57))) {
            $result = store_uint($result, ($code + (52 - 48)), 6);
        } elseif ((($code == 45) | ($code == 43))) {
            $result = store_uint($result, 62, 6);
        } elseif ((($code == 95) | ($code == 47))) {
            $result = store_uint($result, 63, 6);
        } elseif (($code == 61)) {
        } else {
            throw(134);
        }
    }
    int $total = builder_bits($result);
    int $padding = ($total % 8);
    if (($padding != 0)) {
        slice $s = $__gen_Builder_asSlice($result);
        return $s~load_bits(($total - $padding));
    } else {
        return $__gen_Builder_asSlice($result);
    }
}

slice $__gen_String_fromBase64(slice $self) impure inline_ref {
    var ($self) = $self;
    return $__gen_Slice_fromBase64(__tact_str_to_slice($self));
}

slice $__gen_StringsTester_constantString((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    return __gen_str_3579288646();
}

_ $__gen_get_constantString() method_id(93932) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_constantString(self);
    return res;
}

slice $__gen_StringsTester_constantStringUnicode((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    return __gen_str_3070532033();
}

_ $__gen_get_constantStringUnicode() method_id(94939) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_constantStringUnicode(self);
    return res;
}

slice $__gen_StringsTester_constantStringUnicodeLong((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    return __gen_str_3872846997();
}

_ $__gen_get_constantStringUnicodeLong() method_id(104680) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_constantStringUnicodeLong(self);
    return res;
}

cell $__gen_StringsTester_dynamicStringCell((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_860684655());
    return __tact_string_builder_end($b);
}

_ $__gen_get_dynamicStringCell() method_id(122225) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicStringCell(self);
    return res;
}

cell $__gen_StringsTester_dynamicCommentCell((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append(__gen_str_2498516892());
    return __tact_string_builder_end($b);
}

_ $__gen_get_dynamicCommentCell() method_id(122531) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicCommentCell(self);
    return res;
}

cell $__gen_StringsTester_dynamicCommentCellLarge((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_860684655());
    $b~__tact_string_builder_append(__gen_str_3872846997());
    return __tact_string_builder_end($b);
}

_ $__gen_get_dynamicCommentCellLarge() method_id(74771) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicCommentCellLarge(self);
    return res;
}

slice $__gen_StringsTester_dynamicCommentStringLarge((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_860684655());
    $b~__tact_string_builder_append(__gen_str_3872846997());
    return __tact_string_builder_end_slice($b);
}

_ $__gen_get_dynamicCommentStringLarge() method_id(74191) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicCommentStringLarge(self);
    return res;
}

slice $__gen_StringsTester_stringWithNumber((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_519161862());
    $b~__tact_string_builder_append(__tact_int_to_string(123));
    return __tact_string_builder_end_slice($b);
}

_ $__gen_get_stringWithNumber() method_id(68752) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithNumber(self);
    return res;
}

slice $__gen_StringsTester_stringWithNegativeNumber((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_519161862());
    $b~__tact_string_builder_append(__tact_int_to_string((- 123)));
    return __tact_string_builder_end_slice($b);
}

_ $__gen_get_stringWithNegativeNumber() method_id(82914) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithNegativeNumber(self);
    return res;
}

slice $__gen_StringsTester_stringWithLargeNumber((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_519161862());
    $b~__tact_string_builder_append(__tact_int_to_string(1000000000000000000000000000000000000000000000000000000000000));
    return __tact_string_builder_end_slice($b);
}

_ $__gen_get_stringWithLargeNumber() method_id(94811) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithLargeNumber(self);
    return res;
}

slice $__gen_StringsTester_stringWithFloat((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    return __tact_float_to_string(95, 1);
}

_ $__gen_get_stringWithFloat() method_id(80064) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithFloat(self);
    return res;
}

slice $__gen_StringsTester_base64((int) $self) impure inline_ref {
    var (($self'fee)) = $self;
    return $__gen_String_fromBase64(__gen_str_1560934365());
}

_ $__gen_get_base64() method_id(71427) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_base64(self);
    return res;
}

slice $__gen_StringsTester_processBase64((int) $self, slice $src) impure inline_ref {
    var (($self'fee)) = $self;
    return $__gen_String_fromBase64($src);
}

_ $__gen_get_processBase64(slice $$src) method_id(128362) {
    slice $src = $$src;
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_processBase64(self, $src);
    return res;
}

(((int)), ()) $__gen_StringsTester_receive((int) $self) impure inline {
    var ($self'fee) = $self;
    return (($self'fee), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        var self = __gen_load_StringsTester();
        self~$__gen_StringsTester_receive();
        __gen_store_StringsTester(self);
        return ();
    }
    
    throw(130);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.debug.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmbUytdrjxtNs5WmYU5HQKTKJZaZJXAyVomWvWv1ejGXAk";
}