#include "imports/stdlib.fc";

const int MIN_BALANCE = 30000000;

const int error::not_enough_balance = 101;
const int error::bad_signature = 102;
const int error::bad_message = 103;
const int error::wrong_id = 104;
const int error::timeout = 105;

const int EXPECTED_OP = 0x0f8a7ea5;

(int, int) load_data() {
    slice ds = get_data().begin_parse();
    int public_key = ds~load_uint(256);
    int escrow_id = ds~load_uint(64);
    ds.end_parse();
    return (public_key, escrow_id);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    throw(0xffff);
}

(slice, ()) ~skip_bits_refs(slice s, int bits, int refs) asm "SCUTFIRST";

(slice, ()) ~skip_jetton_transfer_message(slice cs) {
    int op = cs~load_uint(32);
    throw_unless(error::bad_message, op == EXPECTED_OP);

    cs~skip_bits(64); ;; query id

    cs~load_coins(); ;; amount

    cs~load_msg_addr(); ;; destination

    cs~load_msg_addr(); ;; response

    cs~load_maybe_ref(); ;; custom payload

    cs~load_coins(); ;; forward_amount

    ;; forward payload
    int is_right = cs~load_int(1);
    if (is_right) {
        cs~load_ref();
    } else {
        (int bits, int refs) = cs.slice_bits_refs();
        cs~skip_bits_refs(bits, refs);
    }

    return (cs, ());
}

() recv_external(slice in_msg) impure {
    [int bal, _] = get_balance();
    throw_unless(error::not_enough_balance, bal >= MIN_BALANCE);

    (int public_key, int escrow_id) = load_data();
    slice signature = in_msg~load_bits(512);
    throw_unless(error::bad_signature, check_signature(in_msg.slice_hash(), signature, public_key));

    int message_id = in_msg~load_uint(64);
    throw_unless(error::wrong_id, message_id == escrow_id);

    int timeout_after = in_msg~load_uint(64);
    throw_unless(error::timeout, now() <= timeout_after);

    slice message_recipient = in_msg~load_msg_addr();

    cell message_body = in_msg~load_ref();
    in_msg.end_parse();
    slice ms = message_body.begin_parse();
    ms~skip_jetton_transfer_message();
    ms.end_parse();

    accept_message();

    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(message_recipient)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(message_body)
        .end_cell(), 128 + 32);
}
