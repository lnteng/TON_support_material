{-
    ctx.fc

    This library helps to manage call context for incoming messages. 
-}

() ctx::init(int _my_balance, int _msg_value, cell _in_msg_full, slice _in_msg_body) impure inline {
    slice cs = _in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    int _is_bounced = false;
    if flags & 1 {
        _is_bounced = true;
        _in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    }

    slice _sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();

    ctx = _unsafe_tuple([
            _is_bounced,
            _sender_address,
            muldiv(cs~load_coins(), 3, 2),
            _in_msg_body~load_uint(32),
            _in_msg_body~load_uint(64),
            _my_balance,
            _msg_value,
            _in_msg_body,
            _in_msg_full
        ]);
}

;; returns if slice empty
;; if empty body, sets opcode=-1 & query_id=-1, so it cannot be faked
() ctx::init_wempty(int _my_balance, int _msg_value, cell _in_msg_full, slice _in_msg_body) impure inline {
    slice cs = _in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    int _is_bounced = false;
    if flags & 1 {
        _is_bounced = true;
        _in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    }

    slice _sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();

    ctx = _unsafe_tuple([
            _is_bounced,
            _sender_address,
            muldiv(cs~load_coins(), 3, 2),
            _in_msg_body.slice_empty?() ? -1 : _in_msg_body~load_uint(32),
            _in_msg_body.slice_empty?() ? -1 : _in_msg_body~load_uint(64),
            _my_balance,
            _msg_value,
            _in_msg_body, ;; could be an empty slice
            _in_msg_full
        ]);
}