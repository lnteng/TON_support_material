{-
    utils.fc

    Various utility functions.
-}

slice utils::address_to_hex_string(int value) inline {
    if (value == 0) {
        builder buffer = begin_cell();
        int i = 0;
        while (i < 64){
            buffer = buffer.store_uint("0"u, 8);
            i += 1;
        }
        return buffer.end_cell().begin_parse().preload_bits(i * 8);
    } else {
        int i = 0;
    
        int mask = 15;
        builder buffer = begin_cell();

        while (i < 64) {
            int curr = (value & mask);
            if(curr > 9){
                buffer = buffer.store_uint(55 + curr, 8);
            } else {
                buffer = buffer.store_uint(48 + curr, 8);
            }
            value = value >> 4;
            i += 1;
        }

        builder final_cell = begin_cell();

        slice reversed_buffer = buffer.end_cell().begin_parse();
    
        i = 64;
        while(i > 0){
            i -= 1;
            slice chr = reversed_buffer.preload_bits_offset(i * 8, 8);
            final_cell = final_cell.store_slice(chr);
        }
        return final_cell.end_cell().begin_parse().preload_bits(512);
    }
}

slice utils::number_to_slice(int number) {
    builder text_b = begin_cell();
    if (number < 0) {
        text_b = text_b.store_slice("-");
        number = - number;
    }
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);
    slice text = text_b.store_uint(value, len * 8).end_cell().begin_parse();
    return text;
}

() utils::send_custom(
    int _amount, 
    int _op, 
    slice _to, 
    int _mode
) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(_to)
        .store_coins(_amount)
        .store_uint(0, 107)
        .store_uint(_op, 32)
        .store_uint(ctx.at(QUERY_ID), 64)
    .end_cell();
    send_raw_message(msg, _mode);
}

() utils::send_excesses(
    int _amount, 
    slice _to, 
    int _mode
) impure inline {
    utils::send_custom(_amount, op::excesses, _to, _mode);
}

(int) utils::to_coins(int _n) inline { return _n * 1000000000; }
