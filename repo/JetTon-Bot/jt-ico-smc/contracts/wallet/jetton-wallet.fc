;; Storage TL-B Scheme;
;; storage#_ balance:Coins owner_address:MsgIntAddress jetton_master_address:MsgIntAddress jetton_wallet_code:^Cell locked_amounts:(HasmapE 16 LockInfo) = Storage;

#include "../imports/stdlib.fc";
#include "../imports/send-modes.fc";
#include "../imports/constants.fc";
#include "../imports/utils.fc";
#include "../imports/jetton-utils.fc";

const int min_tons_for_storage = 10000000; ;; 0.01 TON
const int gas_consumption = 10000000; ;; 0.01 TON
const int math_decimals = 1000000000; ;; 1e9

global int initialized?;
global int store::balance;
global slice store::owner_address;
global slice store::jetton_master_address;
global cell store::jetton_wallet_code;
global cell store::locked_amounts;

() load_data() impure inline_ref {
    ifnot (null?(initialized?)) {
        return ();
    }

    slice ds = get_data().begin_parse();
    store::balance = ds~load_coins();
    store::owner_address = ds~load_msg_addr();
    store::jetton_master_address = ds~load_msg_addr();
    store::jetton_wallet_code = ds~load_ref();
    store::locked_amounts = ds~load_dict();
    initialized? = true;
}

() save_data() impure inline {
    set_data(
        pack_jetton_wallet_data(
            store::balance,
            store::owner_address,
            store::jetton_master_address,
            store::jetton_wallet_code,
            store::locked_amounts
        )
    );
}

(cell, int, int, int) calculate_unlocked_amount(cell locked_amounts) inline_ref {
    int next_index = 0;
    int unlocked_amount_total = 0;
    int locked_amount_total = 0;
    int cur_time = now();

    do {
        (int k, slice value, int f?) = locked_amounts.udict_get_nexteq?(16, next_index);
        if (f?) {
            int start_unlock_time = value~load_uint(32); ;; 32 bits
            int end_unlock_time = value~load_uint(32); ;; 32 bits
            int last_received = value~load_uint(32); ;; 32 bits
            int locked_amount = value~load_coins(); ;; max 124 bits
            int unlocked_amount = value~load_coins(); ;; max 124 bits

            locked_amount_total += locked_amount;

            int tokens_per_second = locked_amount / (end_unlock_time - start_unlock_time); 
            if ((cur_time > start_unlock_time) & (cur_time > last_received) & (cur_time < end_unlock_time)) {
                int seconds_passed = 0;
                if (last_received != 0) {
                    seconds_passed = cur_time - last_received;
                } else {
                    seconds_passed = cur_time - start_unlock_time;
                }

                int tokens_unlocked = seconds_passed * tokens_per_second;
                unlocked_amount_total += tokens_unlocked;
                unlocked_amount += tokens_unlocked;
                last_received = cur_time;

                locked_amounts~udict_set(
                    16, k,
                    begin_cell()
                        .store_uint(start_unlock_time, 32)
                        .store_uint(end_unlock_time, 32)
                        .store_uint(last_received, 32)
                        .store_coins(locked_amount)
                        .store_coins(unlocked_amount)
                        .end_cell().begin_parse()
                );

            } elseif(cur_time >= end_unlock_time) {
                int tokens_unlocked = locked_amount - unlocked_amount;
                unlocked_amount_total += tokens_unlocked;
                (locked_amounts, _) = locked_amounts.udict_delete?(16, k);
            }

            next_index = k + 1;
        }
    } until (~ f?);
    return (locked_amounts, next_index, unlocked_amount_total, locked_amount_total);
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    ;; NOTE we can not allow fails in action phase since in that case there will be
    ;; no bounce. Thus check and throw in computation phase.
    load_data();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    ;; ignore custom payload
    ;; slice custom_payload = in_msg_body~load_dict();
    cell locked_amounts = store::locked_amounts;
    (locked_amounts, _, int unlocked_amount, _) = calculate_unlocked_amount(locked_amounts);
    store::locked_amounts = locked_amounts;
    store::balance += unlocked_amount;
    store::balance -= jetton_amount;

    throw_unless(ext::not_owner, equal_slices(store::owner_address, sender_address));
    throw_unless(ext::balance_error, store::balance >= 0);
    throw_unless(ext::not_enough_gas, msg_value > fwd_fee + 2 * gas_consumption);

    var msg_body = begin_cell()
            .store_uint(op::burn_notification, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(store::owner_address)
            .store_slice(response_address)
            .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(store::jetton_master_address)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);

    send_raw_message(msg.end_cell(), REVERT_ON_ERRORS | CARRY_REMAINING_GAS);
    save_data();
}

() send_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    force_chain(to_owner_address);

    load_data();
    throw_unless(ext::not_owner, equal_slices(store::owner_address, sender_address));

    ;; Calculate locked amounts
    cell locked_amounts = store::locked_amounts;
    (locked_amounts, _, int unlocked_amount, _) = calculate_unlocked_amount(locked_amounts);
    store::locked_amounts = locked_amounts;
    store::balance += unlocked_amount;
    store::balance -= jetton_amount;
    throw_unless(ext::balance_error, store::balance >= 0);

    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, store::jetton_master_address, store::jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    slice response_address = in_msg_body~load_msg_addr();
    cell lockup_params = in_msg_body~load_dict();
    int forward_ton_amount = in_msg_body~load_coins();
    slice either_forward_payload = in_msg_body;
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_wallet_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
    var msg_body = begin_cell()
            .store_uint(op::internal_transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(store::owner_address)
            .store_slice(response_address)
            .store_coins(forward_ton_amount)
            .store_dict(lockup_params)
            .store_slice(either_forward_payload)
            .end_cell();

    msg = msg.store_ref(msg_body);

    int fwd_count = (forward_ton_amount ? 2 : 1) + 1;
    throw_unless(ext::not_enough_gas, msg_value >
            forward_ton_amount +
                    ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
                    ;; but last one is optional (it is ok if it fails)
                    fwd_count * fwd_fee +
                    (2 * gas_consumption + min_tons_for_storage));
    ;; This amount is calculated under two assumptions:
    ;; 1) 2 * gas_consumption + min_tons_for_storage strictly less than 2 * max_tx_gas_price
    ;; 2) gas_consumption will not grow, which is true if ConfigParam21 gas_limit only decreases
    ;; universal message send fee calculation may be activated here
    ;; by using this instead of fwd_fee
    ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)
    ;; and reading ConfigParam21 gas_limit

    send_raw_message(msg.end_cell(), REVERT_ON_ERRORS | CARRY_REMAINING_GAS);
    save_data();
}

() receive_tokens(slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure inline {
    ;; NOTE we can not allow fails in action phase since in that case there will be
    ;; no bounce. Thus check and throw in computation phase.
    load_data();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(ext::not_valid_wallet,
        equal_slices(store::jetton_master_address, sender_address)
        |
        equal_slices(calculate_user_jetton_wallet_address(from_address, store::jetton_master_address, store::jetton_wallet_code), sender_address)
    );
    int forward_ton_amount = in_msg_body~load_coins();

    cell lockup_params = in_msg_body~load_maybe_ref();
    if (~ lockup_params.null?()) {
        slice lockup_params = lockup_params.begin_parse();
        int start_unlock_time = lockup_params~load_uint(32);
        int end_unlock_time = lockup_params~load_uint(32);

        cell locked_amounts = store::locked_amounts;
        (int k, _, int f?) = locked_amounts.udict_get_max?(16);
        int next_index = f? ? k + 1 : 0;

        locked_amounts~udict_set(
            16, next_index,
            begin_cell()
                .store_uint(start_unlock_time, 32)
                .store_uint(end_unlock_time, 32)
                .store_uint(0, 32) ;; last received
                .store_coins(jetton_amount)
                .store_coins(0)
                .end_cell().begin_parse()
        );

        store::locked_amounts = locked_amounts;
    } else {
        store::balance += jetton_amount;
    }

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
    msg_value -= (storage_fee + gas_consumption);
    throw_unless(ext::not_enough_gas, msg_value >= 0);

    if (forward_ton_amount) {
        msg_value -= (forward_ton_amount + fwd_fee);
        slice either_forward_payload = in_msg_body;

        var msg_body = begin_cell()
                .store_uint(op::transfer_notification, 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount)
                .store_slice(from_address)
                .store_slice(either_forward_payload)
                .end_cell();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(store::owner_address)
                .store_coins(forward_ton_amount)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);

        send_raw_message(msg.end_cell(), REVERT_ON_ERRORS | PAY_FEES_SEPARATELY);
    }

    msg_value -= fwd_fee;
    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce
                .store_slice(response_address)
                .store_coins(msg_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses, 32)
                .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), IGNORE_ERRORS);
    }

    save_data();
}

() on_bounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    load_data();
    int op = in_msg_body~load_uint(32);
    throw_unless(ext::wrong_op, (op == op::transfer) | (op == op::burn_notification));
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    store::balance += jetton_amount;
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer) { ;; outgoing transfer
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer) { ;; incoming transfer
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == op::burn) { ;; burn
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(ext::wrong_op);
}

;; поправить calculate_unlocked_amount. отдавать в смартконтракте на гетметоде все доступные токены + заблокированые, так как юзер не видит их в сканере
(int, slice, slice, cell) get_wallet_data() method_id {
    load_data();
    cell locked_amounts = store::locked_amounts;
    (_, _, _, int locked_amount) = calculate_unlocked_amount(locked_amounts);
    return (
        store::balance + locked_amount, ;; вместо unlocked_amount, нужет total_locked_amount
        store::owner_address,
        store::jetton_master_address,
        store::jetton_wallet_code
    );
}

(cell, int) get_unlocked_amount() method_id {
    load_data();
    cell locked_amounts = store::locked_amounts;
    (_, _, int unlocked_amount, _) = calculate_unlocked_amount(locked_amounts);
    return (store::locked_amounts, unlocked_amount);
}
