#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_HelloWorld.headers.fc";
#include "sample_HelloWorld.stdlib.fc";
#include "sample_HelloWorld.constants.fc";
#include "sample_HelloWorld.storage.fc";

;;
;; Contract HelloWorld functions
;;

tuple $HelloWorld$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, slice) $HelloWorld$_fun_greeting(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, __gen_slice_string_e3f85eb426d40008090255016d73ef2f09a300fbb999ca2472fdf0f0c1ec6566());
}

;;
;; Receivers of a Contract HelloWorld
;;

((tuple), ()) $HelloWorld$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$HelloWorld$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract HelloWorld
;;

_ %greeting() method_id(78250) {
    var self = $HelloWorld$_contract_load();
    var res = self~$HelloWorld$_fun_greeting();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmUWdfLsoBZnhkeJoh5AyKA5uTfTQoNUZXaxoFjQ8VVPd3";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract HelloWorld
;;

(tuple, int) $HelloWorld$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$HelloWorld$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $HelloWorld$_contract_load();
    
    ;; Handle operation
    int handled = self~$HelloWorld$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $HelloWorld$_contract_store(self);
}
