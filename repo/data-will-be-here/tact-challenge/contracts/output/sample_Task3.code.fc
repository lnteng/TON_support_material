#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Task3.headers.fc";
#include "sample_Task3.stdlib.fc";
#include "sample_Task3.storage.fc";

;;
;; Contract Task3 functions
;;

(slice, int, int, slice, slice) $Task3$_contract_init(slice $admin, slice $newJA, slice $newJB) impure inline_ref {
    var (($self'owner, $self'a, $self'b, $self'jA, $self'jB)) = (null(), 0, 0, null(), null());
    $self'owner = $admin;
    $self'jA = $newJA;
    $self'jB = $newJB;
    return ($self'owner, $self'a, $self'b, $self'jA, $self'jB);
}

((slice, int, int, slice, slice), int) $Task3$_fun_price((slice, int, int, slice, slice) $self, slice $token) impure inline_ref {
    var (($self'owner, $self'a, $self'b, $self'jA, $self'jB)) = $self;
    if (( __tact_slice_eq_bits($self'jB, $token) )) {
        return (($self'owner, $self'a, $self'b, $self'jA, $self'jB), (($self'a * 1000000000) / $self'b));
    }
    return (($self'owner, $self'a, $self'b, $self'jA, $self'jB), (($self'b * 1000000000) / $self'a));
}

((slice, int, int, slice, slice), int) $Task3$_fun_balance((slice, int, int, slice, slice) $self, slice $token) impure inline_ref {
    var (($self'owner, $self'a, $self'b, $self'jA, $self'jB)) = $self;
    if (( __tact_slice_eq_bits($self'jA, $token) )) {
        return (($self'owner, $self'a, $self'b, $self'jA, $self'jB), $self'a);
    }
    return (($self'owner, $self'a, $self'b, $self'jA, $self'jB), $self'b);
}

;;
;; Receivers of a Contract Task3
;;

(((slice, int, int, slice, slice)), ()) $Task3$_internal_binary_TokenNotification((slice, int, int, slice, slice) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'a, $self'b, $self'jA, $self'jB) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'forwardPayload) = $msg;
    slice $jettonAddress = __tact_context_get_sender();
    throw_unless(33780, ( (( __tact_slice_eq_bits($self'jA, $jettonAddress) )) ? (true) : (( __tact_slice_eq_bits($self'jB, $jettonAddress) )) ));
    if (( __tact_slice_eq_bits($self'owner, $msg'from) )) {
        if (( __tact_slice_eq_bits($self'jA, $jettonAddress) )) {
            $self'a = ($self'a + $msg'amount);
        } else {
            $self'b = ($self'b + $msg'amount);
        }
    } else {
        int $jet1 = $self'a;
        int $jet2 = $self'b;
        if (( __tact_slice_eq_bits($self'jA, $jettonAddress) )) {
            $jet1 = $self'b;
            $jet2 = $self'a;
        }
        int $to_recv = (((($jet1 * 1000000000) / $jet2) * $msg'amount) / 1000000000);
        if (( (($jet1 < $to_recv)) ? (true) : (($to_recv == 0)) )) {
            $to_recv = $msg'amount;
        } elseif (( __tact_slice_eq_bits($self'jA, $jettonAddress) )) {
            $self'a = ($self'a + $msg'amount);
            $self'b = ($self'b - $to_recv);
            $jettonAddress = $self'jB;
        } else {
            $self'b = ($self'b + $msg'amount);
            $self'a = ($self'a - $to_recv);
            $jettonAddress = $self'jA;
        }
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($jettonAddress, 0, (64 + 2), true, $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, $to_recv, $msg'from, my_address(), null(), 10000000, $global_emptySlice()))));
    }
    return (($self'owner, $self'a, $self'b, $self'jA, $self'jB), ());
}

(((slice, int, int, slice, slice)), ()) $Task3$_internal_binary_Deploy((slice, int, int, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'a, $self'b, $self'jA, $self'jB) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'a, $self'b, $self'jA, $self'jB)~$Task3$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'a, $self'b, $self'jA, $self'jB), ());
}

;;
;; Get methods of a Contract Task3
;;

_ %price(slice $$token) method_id(120091) {
    slice $token = __tact_verify_address($$token);
    var self = $Task3$_contract_load();
    var res = self~$Task3$_fun_price($token);
    return res;
}

_ %balance(slice $$token) method_id(104128) {
    slice $token = __tact_verify_address($$token);
    var self = $Task3$_contract_load();
    var res = self~$Task3$_fun_balance($token);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbJonkEfJxD5AXBmeKTcMPBqggXsyefVFRYFPdnUpwBJQ";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Task3
;;

((slice, int, int, slice, slice), int) $Task3$_contract_router_internal((slice, int, int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TokenNotification message
    if (op == 1935855772) {
        var msg = in_msg~$TokenNotification$_load();
        self~$Task3$_internal_binary_TokenNotification(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Task3$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Task3$_contract_load();
    
    ;; Handle operation
    int handled = self~$Task3$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Task3$_contract_store(self);
}
