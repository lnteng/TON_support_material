#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/send-modes.fc";
#include "imports/dtelecom-utils.fc";
#include "imports/dtelecom-op-codes.fc";
#include "imports/dtelecom-common.fc";

(int, cell, slice, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(256),   ;; public_key
        ds~load_ref(),       ;; node host
        ds~load_msg_addr(),  ;; owner_address
        ds~load_msg_addr(),  ;; master_address
        ds~load_ref(),       ;; user_wallet_code
        ds~load_ref()        ;; node_wallet_code
    );
}

() save_data(int public_key, cell node_host, slice owner_address, slice master_address, cell user_wallet_code, cell node_wallet_code) impure inline {
    set_data(pack_node_wallet_data(public_key, node_host, owner_address, master_address, user_wallet_code, node_wallet_code));
}

;; todo: return extra coins to owner
() init(slice sender_address, int public_key, cell node_host) impure {
    ~dump(21);
    var (old_public_key, old_node_host, owner_address, master_address, user_wallet_code, node_wallet_code) = load_data();
    throw_unless(707, old_public_key == 0);
    throw_unless(707, equal_slices(master_address, sender_address));

    save_data(public_key, node_host, owner_address, master_address, user_wallet_code, node_wallet_code);
}

() withdraw(int query_id, slice sender_address, int msg_value, int amount) impure {
    ~dump(22);
    var (public_key, node_host, owner_address, master_address, user_wallet_code, node_wallet_code) = load_data();
    throw_unless(707, equal_slices(owner_address, sender_address));

    int max_allowed_amount = get_balance().pair_first() - staked_amount() - msg_value;
    throw_unless(707, max_allowed_amount > 0);

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(min(amount, max_allowed_amount))
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_VALUE);
}

() create_call(slice sender_address, int query_id, slice user_address, cell user_signed_msg) impure {
    ~dump(23);
    var (public_key, node_host, owner_address, master_address, user_wallet_code, node_wallet_code) = load_data();
    throw_unless(707, equal_slices(owner_address,sender_address));

    var msg_body = begin_cell()
                .store_uint(op::user__create_call(), 32)
                .store_uint(query_id, 64)
                .store_slice(owner_address)
                .store_ref(user_signed_msg)
                .end_cell();
    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(calculate_user_wallet_address(user_address,master_address,node_wallet_code,user_wallet_code))
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_VALUE);
}

() end_call(slice sender_address, int query_id, slice user_address, cell user_signed_msg) impure {
    ~dump(24);
    var (public_key, node_host, owner_address, master_address, user_wallet_code, node_wallet_code) = load_data();
    throw_unless(707, equal_slices(owner_address, sender_address));

    var msg_body = begin_cell()
                    .store_uint(op::process_end_call(), 32)
                    .store_uint(query_id, 64)
                    .store_slice(owner_address)
                    .store_slice(user_address)
                    .store_ref(user_signed_msg)
                    .end_cell();
    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(master_address)
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_VALUE);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ~dump(2);
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::node__init()) {
        int public_key = in_msg_body~load_uint(256);
        cell node_host = in_msg_body~load_ref();
        
        init(sender_address, public_key, node_host);

        return ();
    }

    if (op == op::node__withdraw()) {
        int amount = in_msg_body~load_coins();

        withdraw(query_id, sender_address, msg_value, amount);

        return ();
    }

    if (op == op::node__create_call()) {
        slice user_address = in_msg_body~load_msg_addr();
        cell user_signed_msg = in_msg_body~load_ref();

        create_call(sender_address, query_id, user_address, user_signed_msg);

        return ();
    }

    if (op == op::node__end_call()) {
        slice user_address = in_msg_body~load_msg_addr();
        cell user_signed_msg = in_msg_body~load_ref();

        end_call(sender_address, query_id, user_address, user_signed_msg);

        return ();
    }
}

(int, cell, slice, slice) get_wallet_data() method_id {
    var (public_key, node_host, owner_address, master_address, user_wallet_code, node_wallet_code) = load_data();
    return (public_key, node_host, owner_address, master_address);
}