#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/send-modes.fc";
#include "imports/dtelecom-utils.fc";
#include "imports/dtelecom-op-codes.fc";

(int, cell, slice, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(256),  ;; public_key
        ds~load_dict(),     ;; calls
        ds~load_msg_addr(), ;; owner_address
        ds~load_msg_addr(), ;; master_address
        ds~load_ref(),      ;; node_wallet_code
        ds~load_ref()       ;; user_wallet_code
    );
}

() save_data(int public_key, cell calls, slice owner_address, slice master_address, cell node_wallet_code, cell user_wallet_code) impure inline {
    set_data(pack_user_wallet_data(public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code));
}

() set_public_key(int query_id, int new_public_key) impure {
    ~dump(31);
    var (old_public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code) = load_data();
    throw_unless(707, old_public_key == 0);
    save_data(new_public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code);
}

() create_call(slice sender_address, int query_id, slice node_owner_address, slice user_signature, slice signed_message, int call_id, int valid_until) impure {
    ~dump(32);
    var (public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code) = load_data();
    throw_if(36, valid_until <= now());
    throw_unless(33, equal_slices(sender_address, calculate_node_wallet_address(node_owner_address, master_address, user_wallet_code, node_wallet_code)));
    throw_unless(35, check_signature(slice_hash(signed_message), user_signature, public_key));

    (calls, int success?) = calls.udict_add_builder?(64, call_id, begin_cell());
    throw_unless(39, success?);

    save_data(public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code);

    ;; send cashback to initiator of the transactions
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(node_owner_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_VALUE);
}

() end_call(slice sender_address, int query_id, int minute_price, slice node_address, slice node_owner_address, slice user_signature, slice signed_message, int call_id, int valid_until, int spent_minutes) impure {
    ~dump(33);
    var (public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code) = load_data();
    throw_if(36, valid_until <= now());
    throw_unless(707, equal_slices(master_address, sender_address));
    throw_unless(35, check_signature(slice_hash(signed_message), user_signature, public_key));

    (calls, int success?) = calls.udict_delete?(64, call_id);
    if (success?) {
        int call_price = minute_price * spent_minutes;

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(master_address)
            .store_coins(call_price)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        send_raw_message(msg.end_cell(), NORMAL);

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(node_address)
                .store_coins(call_price)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        send_raw_message(msg.end_cell(), NORMAL);

        save_data(public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code);
    }

    ;; send cashback to initiator of the transactions
    var msg = begin_cell()
        .store_uint(0x18, 6)
            .store_slice(node_owner_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_VALUE);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    ~dump(3);
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::user__set_public_key()) {
        int public_key = in_msg_body~load_uint(256);
        set_public_key(query_id, public_key);
        return ();
    }

    if (op == op::user__create_call()) {
        slice node_owner_address = in_msg_body~load_msg_addr();
        slice user_signed_msg = in_msg_body~load_ref().begin_parse();

        slice user_signature = user_signed_msg~load_bits(512);
        slice signed_message = user_signed_msg;
        int call_id = user_signed_msg~load_uint(64);
        int valid_until = user_signed_msg~load_uint(32);

        create_call(sender_address, query_id, node_owner_address, user_signature, signed_message, call_id, valid_until);

        return ();
    }

    if (op == op::user__end_call()) {
        int minute_price = in_msg_body~load_coins();
        slice node_address = in_msg_body~load_msg_addr();
        slice node_owner_address = in_msg_body~load_msg_addr();
        slice user_signed_msg = in_msg_body~load_ref().begin_parse();

        slice user_signature = user_signed_msg~load_bits(512);
        slice signed_message = user_signed_msg;
        int call_id = user_signed_msg~load_uint(64);
        int valid_until = user_signed_msg~load_uint(32);
        int spent_minutes = user_signed_msg~load_uint(32);

        end_call(sender_address, query_id, minute_price, node_address, node_owner_address, user_signature, signed_message, call_id, valid_until, spent_minutes);
        return ();
    }
}

(int, slice, slice) get_wallet_data() method_id {
    var (public_key, call_ids_set, owner_address, master_address, node_wallet_code, user_wallet_code) = load_data();
    return (public_key, owner_address, master_address);
}


tuple get_call_ids_list() method_id {
    var (public_key, calls, owner_address, master_address, node_wallet_code, user_wallet_code) = load_data();
    var list = null();
    do {
        var (call_id, _, f) = calls~udict::delete_get_min(64);
        if (f) {
            list = cons(call_id, list);
        }
    } until (~ f);
    return list;
}