;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Mul
;; Header: 0x86a16325
;; TLB: mul#86a16325 amount:int257 = Mul
;;

(slice, ((int))) $Mul$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2258723621);
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

;;
;; Type: Div
;; Header: 0x328146c7
;; TLB: div#328146c7 amount:coins = Div
;;

(slice, ((int))) $Div$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 847333063);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: Add
;; Header: 0x067f25ee
;; TLB: add#067f25ee amount:int257 = Add
;;

(slice, ((int))) $Add$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 108996078);
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

;;
;; Type: Sub
;; Header: 0xd5bb24c3
;; TLB: sub#d5bb24c3 amount:int257 = Sub
;;

(slice, ((int))) $Sub$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3585811651);
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

;;
;; Type: Set
;; Header: 0x3b14ca42
;; TLB: set#3b14ca42 amount:coins = Set
;;

(slice, ((int))) $Set$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 991218242);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: FloatTest
;;

builder $FloatTest$_store(builder build_0, (int) v) inline {
    var (v'counter) = v;
    build_0 = build_0.store_coins(v'counter);
    return build_0;
}

(slice, ((int))) $FloatTest$_load(slice sc_0) inline {
    var v'counter = sc_0~load_coins();
    return (sc_0, (v'counter));
}

(int) $FloatTest$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$FloatTest$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $FloatTest$_contract_init();
    }
}

() $FloatTest$_contract_store((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $FloatTest$_store(b, v);
    set_data(b.end_cell());
}