;;
;; Header files for Lotton
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_eq_bits_nullable_one
int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $Lotton$_store
builder $Lotton$_store(builder build_0, (int, int, int, slice, int, int, cell, cell) v) inline;

;; $Lotton$_load
(slice, ((int, int, int, slice, int, int, cell, cell))) $Lotton$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Lotton$_contract_init
(int, int, int, slice, int, int, cell, cell) $Lotton$_contract_init() impure inline_ref;

;; $Lotton$_contract_load
(int, int, int, slice, int, int, cell, cell) $Lotton$_contract_load() impure inline_ref;

;; $Lotton$_contract_store
() $Lotton$_contract_store((int, int, int, slice, int, int, cell, cell) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Lotton$_fun_checkAddress
((int, int, int, slice, int, int, cell, cell), int) $Lotton$_fun_checkAddress((int, int, int, slice, int, int, cell, cell) $self, slice $address) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $Lotton$_fun_sendMoney
((int, int, int, slice, int, int, cell, cell), ()) $Lotton$_fun_sendMoney((int, int, int, slice, int, int, cell, cell) $self, slice $address, int $money) impure inline_ref;

;; $Lotton$_fun_winners
((int, int, int, slice, int, int, cell, cell), cell) $Lotton$_fun_winners((int, int, int, slice, int, int, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Lotton$_fun_forward
((int, int, int, slice, int, int, cell, cell), ()) $Lotton$_fun_forward((int, int, int, slice, int, int, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Lotton$_fun_reply
((int, int, int, slice, int, int, cell, cell), ()) $Lotton$_fun_reply((int, int, int, slice, int, int, cell, cell) $self, cell $body) impure inline;

;; $Lotton$_fun_notify
((int, int, int, slice, int, int, cell, cell), ()) $Lotton$_fun_notify((int, int, int, slice, int, int, cell, cell) $self, cell $body) impure inline;

;; $Lotton$_fun_requireOwner
((int, int, int, slice, int, int, cell, cell), ()) $Lotton$_fun_requireOwner((int, int, int, slice, int, int, cell, cell) $self) impure inline_ref;

;; $Lotton$_fun_owner
((int, int, int, slice, int, int, cell, cell), slice) $Lotton$_fun_owner((int, int, int, slice, int, int, cell, cell) $self) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;
