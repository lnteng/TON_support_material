;;
;; Header files for OrderlyAmmDeposit
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TokenExcesses$_store
builder $TokenExcesses$_store(builder build_0, (int) v) inline;

;; $TokenExcesses$_store_cell
cell $TokenExcesses$_store_cell((int) v) inline;

;; $DepositInternal$_load
(slice, ((int, int, slice))) $DepositInternal$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int, int))) $Withdraw$_load(slice sc_0) inline;

;; $WithdrawAll$_load
(slice, ((int))) $WithdrawAll$_load(slice sc_0) inline;

;; $WithdrawInternal$_store
builder $WithdrawInternal$_store(builder build_0, (int, int, slice, slice, slice) v) inline;

;; $WithdrawInternal$_store_cell
cell $WithdrawInternal$_store_cell((int, int, slice, slice, slice) v) inline;

;; $WithdrawInternal$_load_bounced
(slice, ((int, int))) $WithdrawInternal$_load_bounced(slice sc_0) inline;

;; $SwapLpInternal$_load_bounced
(slice, ((int, int))) $SwapLpInternal$_load_bounced(slice sc_0) inline;

;; $AddLiquidityInternal$_load
(slice, ((int, int, slice, int, slice))) $AddLiquidityInternal$_load(slice sc_0) inline;

;; $SendLiquidityToLpInternal$_store
builder $SendLiquidityToLpInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $SendLiquidityToLpInternal$_store_cell
cell $SendLiquidityToLpInternal$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $SendLiquidityToLpInternal$_load_bounced
(slice, ((int))) $SendLiquidityToLpInternal$_load_bounced(slice sc_0) inline;

;; $OrderlyAmmDeposit$_store
builder $OrderlyAmmDeposit$_store(builder build_0, (int, slice, slice, slice) v) inline;

;; $OrderlyAmmDeposit$_load
(slice, ((int, slice, slice, slice))) $OrderlyAmmDeposit$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $OrderlyDepositData$_to_external
(int, slice, slice, slice, cell) $OrderlyDepositData$_to_external(((int, slice, slice, slice, cell)) v) inline;

;; $OrderlyAmmDeposit$init$_store
builder $OrderlyAmmDeposit$init$_store(builder build_0, (slice, slice, slice) v) inline;

;; $OrderlyAmmDeposit$init$_load
(slice, ((slice, slice, slice))) $OrderlyAmmDeposit$init$_load(slice sc_0) inline;

;; $OrderlyAmmDeposit$_contract_init
(int, slice, slice, slice) $OrderlyAmmDeposit$_contract_init(slice $master, slice $owner, slice $jetton_wallet) impure inline_ref;

;; $OrderlyAmmDeposit$_contract_load
(int, slice, slice, slice) $OrderlyAmmDeposit$_contract_load() impure inline_ref;

;; $OrderlyAmmDeposit$_contract_store
() $OrderlyAmmDeposit$_contract_store((int, slice, slice, slice) v) impure inline;

;; $global_randomInt
int $global_randomInt() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $OrderlyAmmDeposit$_init_child
(cell, cell) $OrderlyAmmDeposit$_init_child(cell sys', slice $master, slice $owner, slice $jetton_wallet) inline_ref;

;; $OrderlyDepositData$_constructor_balance_master_owner_jetton_wallet_walletCode
((int, slice, slice, slice, cell)) $OrderlyDepositData$_constructor_balance_master_owner_jetton_wallet_walletCode(int balance, slice master, slice owner, slice jetton_wallet, cell walletCode) inline;

;; $OrderlyAmmDeposit$_fun_get_deposit_data
((int, slice, slice, slice), (int, slice, slice, slice, cell)) $OrderlyAmmDeposit$_fun_get_deposit_data((int, slice, slice, slice) $self) impure inline_ref;

;; $OrderlyAmmDeposit$_fun_forward
((int, slice, slice, slice), ()) $OrderlyAmmDeposit$_fun_forward((int, slice, slice, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $OrderlyAmmDeposit$_fun_notify
((int, slice, slice, slice), ()) $OrderlyAmmDeposit$_fun_notify((int, slice, slice, slice) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $TokenExcesses$_constructor_queryId
((int)) $TokenExcesses$_constructor_queryId(int queryId) inline;

;; $WithdrawInternal$_constructor_queryId_amount_destination_jetton_wallet_responseDestination
((int, int, slice, slice, slice)) $WithdrawInternal$_constructor_queryId_amount_destination_jetton_wallet_responseDestination(int queryId, int amount, slice destination, slice jetton_wallet, slice responseDestination) inline;

;; $SendLiquidityToLpInternal$_constructor_queryId_from_jettonWallet_amount_isBase_responseDestination
((int, int, slice, slice, int, slice)) $SendLiquidityToLpInternal$_constructor_queryId_from_jettonWallet_amount_isBase_responseDestination(int queryId, slice from, slice jettonWallet, int amount, int isBase, slice responseDestination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
