;;
;; Header files for OrderlyAmm
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $TokenExcesses$_store
builder $TokenExcesses$_store(builder build_0, (int) v) inline;

;; $TokenExcesses$_store_cell
cell $TokenExcesses$_store_cell((int) v) inline;

;; $DepositInternal$_store
builder $DepositInternal$_store(builder build_0, (int, int, slice) v) inline;

;; $DepositInternal$_store_cell
cell $DepositInternal$_store_cell((int, int, slice) v) inline;

;; $WithdrawInternal$_load
(slice, ((int, int, slice, slice, slice))) $WithdrawInternal$_load(slice sc_0) inline;

;; $SwapInternal$_store
builder $SwapInternal$_store(builder build_0, (int, slice, int, int) v) inline;

;; $SwapInternal$_store_cell
cell $SwapInternal$_store_cell((int, slice, int, int) v) inline;

;; $CreateLp$_load
(slice, ((slice, slice))) $CreateLp$_load(slice sc_0) inline;

;; $CreateLpInternal$_store
builder $CreateLpInternal$_store(builder build_0, (slice) v) inline;

;; $CreateLpInternal$_store_cell
cell $CreateLpInternal$_store_cell((slice) v) inline;

;; $CreateLpSuccessInternal$_load
(slice, ((slice, slice, slice))) $CreateLpSuccessInternal$_load(slice sc_0) inline;

;; $LiquidityPool$_store
builder $LiquidityPool$_store(builder build_0, (slice, slice) v) inline;

;; $LiquidityPool$_store_cell
cell $LiquidityPool$_store_cell((slice, slice) v) inline;

;; $AddLiquidity$_load
(slice, ((slice, int, slice, slice, int, slice))) $AddLiquidity$_load(slice sc_0) inline_ref;

;; $AddLiquidityInternal$_store
builder $AddLiquidityInternal$_store(builder build_0, (int, int, slice, int, slice) v) inline;

;; $AddLiquidityInternal$_store_cell
cell $AddLiquidityInternal$_store_cell((int, int, slice, int, slice) v) inline;

;; $OrderlyAmm$_store
builder $OrderlyAmm$_store(builder build_0, (slice, cell, int) v) inline;

;; $OrderlyAmm$_load
(slice, ((slice, cell, int))) $OrderlyAmm$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $OrderlyAmmDeposit$init$_store
builder $OrderlyAmmDeposit$init$_store(builder build_0, (slice, slice, slice) v) inline;

;; $OrderlyAmmLiquidityPool$init$_store
builder $OrderlyAmmLiquidityPool$init$_store(builder build_0, (slice, slice, slice) v) inline;

;; $OrderlyAmm$init$_load
(slice, ((slice))) $OrderlyAmm$init$_load(slice sc_0) inline;

;; $OrderlyAmm$_contract_init
(slice, cell, int) $OrderlyAmm$_contract_init(slice $owner) impure inline_ref;

;; $OrderlyAmm$_contract_load
(slice, cell, int) $OrderlyAmm$_contract_load() impure inline_ref;

;; $OrderlyAmm$_contract_store
() $OrderlyAmm$_contract_store((slice, cell, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_randomInt
int $global_randomInt() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $OrderlyAmmDeposit$_init_child
(cell, cell) $OrderlyAmmDeposit$_init_child(cell sys', slice $master, slice $owner, slice $jetton_wallet) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $OrderlyAmmLiquidityPool$_init_child
(cell, cell) $OrderlyAmmLiquidityPool$_init_child(cell sys', slice $master, slice $base, slice $quote) inline_ref;

;; $Swap$_constructor_lpAddress_side_minOut
((slice, int, int)) $Swap$_constructor_lpAddress_side_minOut(slice lpAddress, int side, int minOut) inline;

;; $OrderlyAmm$_fun_readSwap
((slice, cell, int), (slice, int, int)) $OrderlyAmm$_fun_readSwap((slice, cell, int) $self, slice $msg) impure inline_ref;

;; $OrderlyAmm$_fun_get_deposit_address
((slice, cell, int), slice) $OrderlyAmm$_fun_get_deposit_address((slice, cell, int) $self, slice $owner, slice $jetton_wallet) impure inline_ref;

;; $OrderlyAmm$_fun_get_lp_address
((slice, cell, int), slice) $OrderlyAmm$_fun_get_lp_address((slice, cell, int) $self, slice $base, slice $quote) impure inline_ref;

;; $OrderlyAmm$_fun_get_liquidity_pools
((slice, cell, int), cell) $OrderlyAmm$_fun_get_liquidity_pools((slice, cell, int) $self) impure inline_ref;

;; $OrderlyAmm$_fun_forward
((slice, cell, int), ()) $OrderlyAmm$_fun_forward((slice, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $OrderlyAmm$_fun_notify
((slice, cell, int), ()) $OrderlyAmm$_fun_notify((slice, cell, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int queryId, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $DepositInternal$_constructor_queryId_amount_responseDestination
((int, int, slice)) $DepositInternal$_constructor_queryId_amount_responseDestination(int queryId, int amount, slice responseDestination) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $SwapInternal$_constructor_amount_lpAddress_side_minOut
((int, slice, int, int)) $SwapInternal$_constructor_amount_lpAddress_side_minOut(int amount, slice lpAddress, int side, int minOut) inline;

;; $CreateLpInternal$_constructor_responseDestination
((slice)) $CreateLpInternal$_constructor_responseDestination(slice responseDestination) inline;

;; $LiquidityPool$_constructor_base_quote
((slice, slice)) $LiquidityPool$_constructor_base_quote(slice base, slice quote) inline;

;; $TokenExcesses$_constructor_queryId
((int)) $TokenExcesses$_constructor_queryId(int queryId) inline;

;; $AddLiquidityInternal$_constructor_queryId_amount_lpAddress_isBase_responseDestination
((int, int, slice, int, slice)) $AddLiquidityInternal$_constructor_queryId_amount_lpAddress_isBase_responseDestination(int queryId, int amount, slice lpAddress, int isBase, slice responseDestination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
