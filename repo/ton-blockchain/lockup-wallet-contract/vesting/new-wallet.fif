#!/usr/bin/fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " $0 type ." <workchain-id> <wallet-id> <start_time> <total_duration> <unlock_period> <cliff_duration> <total_amount> <allow_elector> [<filename-base>]" cr
  ."Creates a new advanced wallet with unique 32-bit identifier <wallet-id> in specified workchain, with private key saved to or loaded from <filename-base>.pk" cr
  ."('new-wallet.pk' by default)" cr 1 halt
} : usage
$# dup 8 < swap 9 > or ' usage if

9 :$1..n
$1 parse-workchain-id =: wc    // set workchain id from command line argument
$2 parse-int =: subwallet-id
$3 parse-int =: start_time
$4 parse-int =: total_duration
$5 parse-int =: unlock_period
$6 parse-int =: cliff_duration
$7 $>GR =: total_amount
$8 parse-int =: allow_elector
$9 "new-wallet" replace-if-null =: file-base

// Do not deploy wallet in basechain which are allowed to send to elector
wc 0 =   allow_elector * abort"Wallets in basechain can not validate"

."Creating new advanced v3 wallet in workchain " wc . cr
."with unique wallet id " subwallet-id . cr

// Create new advanced wallet
"vesting-lockup-wallet-code.fif" include
// >libref
// code
<b 0 32 u,
   subwallet-id 32 u,
   file-base +".pk" load-generate-keypair
   constant wallet_pk
   B,
   start_time 64 u,
   total_duration 32 u,
   unlock_period 32 u,
   cliff_duration 32 u,
   total_amount Gram,
   allow_elector 1 i,
b> // data
null // no libraries
<b b{0011} s, 3 roll ref, rot ref, swap dict, b>  // create StateInit
dup ."StateInit: " <s csr. cr
dup hashu wc swap 2dup 2constant wallet_addr
."new wallet address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
<b subwallet-id 32 u, -1 32 i, 0 32 u, b>
dup ."signing message: " <s csr. cr
dup hashu wallet_pk ed25519_sign_uint rot
<b b{1000100} s, wallet_addr addr, b{000010} s, swap <s s, b{0} s, swap B, swap <s s, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr
