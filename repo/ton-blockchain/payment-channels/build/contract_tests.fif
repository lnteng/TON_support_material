"Asm.fif" include
// automatically generated from `/home/func/.config/toncli/func-libs/math.func` `/home/func/.config/toncli/func-libs/error_codes.func` `/home/func/.config/toncli/func-libs/stdlib.func` `/home/func/.config/toncli/test-libs/bad_messages_generator.func` `/home/func/.config/toncli/test-libs/tests-helpers.func` `/home/func/.config/toncli/test-libs/c5_parse_helpers.func` `/home/func/.config/toncli/test-libs/storage-test-helpers.func` `/home/func/.config/toncli/test-libs/address_helpers.func` `/home/func/.config/toncli/test-libs/message_helpers.func` `/home/func/Documents/shared/payment_channel/func/async-channel.func` `/home/func/Documents/shared/payment_channel/tests/test.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  76887 DECLMETHOD generate_external_out_message_with_bad_source_address
  105789 DECLMETHOD generate_external_address
  113901 DECLMETHOD generate_external_out_message_with_bad_destination_address
  103563 DECLMETHOD generate_internal_address
  124331 DECLMETHOD generate_external_in_message_with_bad_source_address
  128854 DECLMETHOD generate_external_in_message_with_bad_destination_address
  122899 DECLMETHOD generate_internal_message_with_bad_grams_data
  105345 DECLMETHOD generate_internal_message_with_bad_init_state_data
  85860 DECLMETHOD get_c7
  78457 DECLMETHOD invoke_method
  93676 DECLMETHOD invoke_method_expect_fail
  127733 DECLMETHOD assert_no_actions
  DECLPROC parse_send_raw_message
  DECLPROC parse_lib_code
  DECLPROC parse_raw_reserve
  DECLPROC parse_set_code
  DECLPROC parse_c5
  69682 DECLMETHOD init_environment
  104832 DECLMETHOD storage_key
  68533 DECLMETHOD load_storage_with_tag
  113134 DECLMETHOD save_storage_with_tag
  114362 DECLMETHOD generate_empty_address
  71142 DECLMETHOD generate_internal_address_with_custom_data
  77760 DECLMETHOD generate_external_address_with_custom_data
  119020 DECLMETHOD generate_var_address
  101577 DECLMETHOD generate_var_address_with_custom_data
  DECLPROC generate_any_address
  66092 DECLMETHOD generate_init_state
  86734 DECLMETHOD generate_init_state_with_data
  70014 DECLMETHOD parse_init_state
  129018 DECLMETHOD generate_internal_message
  108731 DECLMETHOD generate_internal_message_relaxed
  115574 DECLMETHOD generate_external_in_message
  78122 DECLMETHOD generate_external_in_message_with_empty_source_address
  94514 DECLMETHOD generate_external_out_message
  75192 DECLMETHOD generate_external_out_message_with_empty_destination_address
  77897 DECLMETHOD generate_external_out_message_relaxed
  94767 DECLMETHOD parse_internal_message
  97177 DECLMETHOD parse_external_message
  DECLPROC ~load_closure_config
  DECLPROC closure_config::quarantin_duration
  DECLPROC closure_config::misbehavior_fine
  DECLPROC closure_config::conditional_close_duration
  DECLPROC store_closure_config
  DECLPROC load_storage
  DECLPROC save_storage
  DECLPROC top_up_balance
  DECLPROC init_channel
  DECLPROC send_payout
  DECLPROC close_channel
  DECLPROC cooperative_close
  DECLPROC cooperative_commit
  DECLPROC parse_semichannel_data
  DECLPROC parse_maybe_semichannel_body
  DECLPROC start_uncooperative_close
  DECLPROC challenge_quarantined_state
  DECLPROC settle_conditionals
  DECLPROC finish_uncooperative_close
  DECLPROC recv_any
  DECLPROC recv_internal
  DECLPROC recv_external
  106901 DECLMETHOD get_channel_state
  69628 DECLMETHOD get_channel_data
  DECLPROC set_uninit_state
  DECLPROC __test_uninit
  DECLPROC __test_alice_top_up_uninit
  DECLPROC __test_alice_top_up_uninit_wants_too_much
  DECLPROC __test_alice_init_state
  DECLPROC __test_bob_init_state
  DECLPROC __test_alice_init_state_wrong_channel_id
  DECLPROC __test_alice_init_state_decrease_balances
  DECLPROC __test_alice_init_state_not_enough_balance
  DECLPROC __test_unauthorized_init
  DECLPROC init_channel_helper
  DECLPROC __test_cooperative_close
  DECLPROC __test_unauthorized_cooperative_close
  DECLPROC __test_cooperative_close_decrease_seqnos
  DECLPROC __test_cooperative_close_B_too_high
  DECLPROC __test_cooperative_close_wrong_channel_id
  DECLPROC __test_cooperative_commit
  DECLPROC __test_cooperative_commit_unauthorized
  DECLPROC __test_cooperative_commit_seqnos_decrease
  DECLPROC __test_cooperative_commit_wrong_channel_id
  DECLPROC build_semichannel_state
  DECLPROC build_signed_semichannel
  DECLPROC build_semichannel_state_wrong_channel_id
  DECLPROC build_signed_semichannel_wrong_channel_id
  DECLPROC __test_start_uncooperative_close_null_state_Alice
  DECLPROC __test_start_uncooperative_close_null_state_Bob
  DECLPROC __test_start_uncooperative_close_not_null_with_refs
  DECLPROC __test_start_uncooperative_close_unauthorized
  DECLPROC __test_start_uncooperative_close_wrong_channel_id
  DECLPROC __test_start_uncooperative_close_outdated_semichannels
  DECLPROC __test_start_uncooperative_close_contradicting_semichannels
  DECLPROC __test_start_uncooperative_close_then_cooperative_close
  DECLPROC __test_start_uncooperative_close_cooperative_commit_old_state
  DECLPROC __test_start_uncooperative_close_cooperative_commit_fresher_state
  DECLPROC create_quatantine_helper
  DECLPROC __test_challenge_quarantined_state_alice
  DECLPROC __test_challenge_quarantined_state_bob
  DECLPROC __test_challenge_quarantined_state_no_quarantine
  DECLPROC __test_challenge_quarantined_state_with_the_same_state
  DECLPROC __test_challenge_quarantined_state_unauthorized
  DECLPROC __test_challenge_quarantined_state_wrong_channel_id
  DECLPROC __test_challenge_quarantined_state_outdated_semichannels
  DECLPROC __test_challenge_quarantined_state_contradicting_semichannels
  DECLPROC __test_challenge_quarantined_state_too_late
  72795 DECLMETHOD default_hashlock
  DECLPROC __test_default_hashlock
  DECLPROC ~add_conditional
  DECLPROC create_quatantine_with_conditional_helper
  DECLPROC __test_settle_conditionals_null
  DECLPROC __test_settle_conditionals_alice
  DECLPROC __test_settle_conditionals_bob
  DECLPROC __test_settle_conditionals_unauthorized
  DECLPROC __test_settle_conditionals_wrong_channel_id
  DECLPROC __test_settle_nonexisted_conditionals
  DECLPROC __test_settle_conditionals_twice
  DECLPROC __test_settle_conditionals_in_two_steps
  DECLPROC __test_settle_conditionals_too_early
  DECLPROC __test_settle_conditionals_too_late
  DECLPROC create_quatantine_with_executed_conditional_helper
  DECLPROC __test_finish_uncooperative_close
  DECLPROC __test_finish_uncooperative_close_too_early
  DECLGLOBVAR inited
  DECLGLOBVAR balance_A
  DECLGLOBVAR balance_B
  DECLGLOBVAR key_A
  DECLGLOBVAR key_B
  DECLGLOBVAR channel_id
  DECLGLOBVAR closure_config
  DECLGLOBVAR commited_seqno_A
  DECLGLOBVAR commited_seqno_B
  DECLGLOBVAR quarantin
  DECLGLOBVAR payment_config
  DECLGLOBVAR unparsed_storage
  DECLGLOBVAR storage_parse_level
  power PROCINLINE:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IF:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>ELSE<{	//  x exponent
      DUP	//  x exponent exponent
      0 EQINT	//  x exponent _6
      IFJMP:<{	//  x exponent
        2DROP	// 
        1 PUSHINT	//  _7=1
      }>	//  x exponent
      OVER	//  x counter result
      WHILE:<{
        OVER	//  x counter result counter
        1 GTINT	//  x counter result _11
      }>DO<{	//  x counter result
        s2 PUSH	//  x counter result x
        MUL	//  x counter result
        SWAP	//  x result counter
        DEC	//  x result counter
        SWAP	//  x counter result
      }>	//  x counter result
      2 1 BLKDROP2	//  result
    }>
  }>
  sqrt PROCINLINE:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IF:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>ELSE<{	//  x
      DUP	//  x x
      4 LESSINT	//  x _5
      IFJMP:<{	//  x
        DROP	// 
        1 PUSHINT	//  _6=1
      }>	//  x
      DUP	//  x x
      INC	//  x _9
      1 RSHIFT#	//  x z
      OVER	//  x z y
      WHILE:<{
        2DUP	//  x z y z y
        LESS	//  x z y _13
      }>DO<{	//  x z y
        DROP	//  x z
        s0 s1 s0 PUSH3	//  x z y x z
        DIV	//  x z y _14
        ROT	//  x y _14 z
        ADD	//  x y _15
        1 RSHIFT#	//  x y z
        SWAP	//  x z y
      }>	//  x z y
      2 1 BLKDROP2	//  y
    }>
  }>
  avg PROCINLINE:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCINLINE:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCINLINE:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  generate_external_out_message_with_bad_source_address PROC:<{
    // 
    8 PUSHPOW2	//  _1=256
    generate_external_address CALLDICT	//  sdest
    0 PUSHINT	//  sdest _3=0
    3 PUSHINT	//  sdest _3=0 _4=3
    NEWC	//  sdest _3=0 _4=3 _5
    2 STU	//  sdest _3=0 _7
    1 STI	//  sdest _9
    SWAP	//  _9 sdest
    STSLICER	//  _10
    ENDC	//  _11
  }>
  generate_external_address PROC:<{
    //  address_length
    RANDU256	//  address_length address
    1 PUSHINT	//  address_length address _4=1
    NEWC	//  address_length address _4=1 _5
    2 STU	//  address_length address _7
    s2 s(-1) PUXC	//  address_length address address_length _7
    9 STU	//  address_length address _9
    ROT	//  address _9 address_length
    STUX	//  _10
    ENDC	//  _11
    CTOS	//  address_cell
  }>
  generate_external_out_message_with_bad_destination_address PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    0 PUSHINT	//  ssrc _2=0
    3 PUSHINT	//  ssrc _2=0 _3=3
    NEWC	//  ssrc _2=0 _3=3 _4
    2 STU	//  ssrc _2=0 _6
    ROT	//  _2=0 _6 ssrc
    STSLICER	//  _2=0 _7
    1 STI	//  _9
    ENDC	//  _10
  }>
  generate_internal_address PROC:<{
    // 
    RANDU256	//  address
    -1 PUSHINT	//  address _3=-1
    0 PUSHINT	//  address _3=-1 _4=0
    2 PUSHINT	//  address _3=-1 _4=0 _5=2
    NEWC	//  address _3=-1 _4=0 _5=2 _6
    2 STU	//  address _3=-1 _4=0 _8
    1 STU	//  address _3=-1 _10
    8 STI	//  address _12
    256 STU	//  _14
    ENDC	//  _15
    CTOS	//  address_cell
  }>
  generate_external_in_message_with_bad_source_address PROC:<{
    // 
    generate_internal_address CALLDICT	//  sdest
    0 PUSHINT	//  sdest _2=0
    2 PUSHINT	//  sdest _2=0 _3=2
    NEWC	//  sdest _2=0 _3=2 _4
    2 STU	//  sdest _2=0 _6
    1 STI	//  sdest _8
    SWAP	//  _8 sdest
    STSLICER	//  _9
    ENDC	//  _10
  }>
  generate_external_in_message_with_bad_destination_address PROC:<{
    // 
    8 PUSHPOW2	//  _1=256
    generate_external_address CALLDICT	//  ssrc
    0 PUSHINT	//  ssrc _3=0
    2 PUSHINT	//  ssrc _3=0 _4=2
    NEWC	//  ssrc _3=0 _4=2 _5
    2 STU	//  ssrc _3=0 _7
    ROT	//  _3=0 _7 ssrc
    STSLICER	//  _3=0 _8
    1 STI	//  _10
    ENDC	//  _11
  }>
  generate_internal_message_with_bad_grams_data PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    generate_internal_address CALLDICT	//  ssrc sdest
    1 PUSHINT	//  ssrc sdest _4=1
    8 PUSHINT	//  ssrc sdest _4=1 _5=8
    0 PUSHINT	//  ssrc sdest _4=1 _5=8 _6=0
    s0 s0 s0 PUSH3	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _9=0
    NEWC	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _9=0 _10
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _12
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _14
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _16
    1 STU	//  ssrc sdest _4=1 _5=8 _18
    s0 s4 XCHG2	//  _5=8 sdest _4=1 _18 ssrc
    STSLICER	//  _5=8 sdest _4=1 _19
    ROT	//  _5=8 _4=1 _19 sdest
    STSLICER	//  _5=8 _4=1 _20
    s1 s2 XCHG	//  _4=1 _5=8 _20
    8 STU	//  _4=1 _22
    1 STU	//  _24
    ENDC	//  _25
  }>
  generate_internal_message_with_bad_init_state_data PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    generate_internal_address CALLDICT	//  ssrc sdest
    1 PUSHINT	//  ssrc sdest _5=1
    s0 s0 PUSH2	//  ssrc sdest _5=1 _6=1 _7=1
    0 PUSHINT	//  ssrc sdest _5=1 _6=1 _7=1 _8=0
    s1 s1 s0 PUSH3	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _11=0
    NEWC	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _11=0 _12
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _14
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _16
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _18
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _20
    1 STU	//  ssrc sdest _5=1 _6=1 _22
    1 STU	//  ssrc sdest _5=1 _24
    1 STU	//  ssrc sdest init_state_with_bad_data
    ENDC	//  ssrc sdest _27
    1 PUSHINT	//  ssrc sdest _27 _28=1
    1000 PUSHINT	//  ssrc sdest _27 _28=1 _29=1000
    DUP	//  ssrc sdest _27 _28=1 _29=1000 _30=1000
    PUSHNULL	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31
    0 PUSHINT	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _32=0
    s0 s0 s0 PUSH3	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _32=0 _33=0 _34=0 _35=0
    NEWC	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _32=0 _33=0 _34=0 _35=0 _36
    1 STU	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _32=0 _33=0 _34=0 _38
    1 STU	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _32=0 _33=0 _40
    1 STU	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _32=0 _42
    1 STU	//  ssrc sdest _27 _28=1 _29=1000 _30=1000 _31 _44
    s0 s7 XCHG2	//  _31 sdest _27 _28=1 _29=1000 _30=1000 _44 ssrc
    STSLICER	//  _31 sdest _27 _28=1 _29=1000 _30=1000 _45
    s0 s5 XCHG2	//  _31 _30=1000 _27 _28=1 _29=1000 _45 sdest
    STSLICER	//  _31 _30=1000 _27 _28=1 _29=1000 _46
    0 PUSHINT	//  _31 _30=1000 _27 _28=1 _29=1000 _46 _47=0
    STGRAMS	//  _31 _30=1000 _27 _28=1 _29=1000 _48
    s1 s5 XCHG	//  _29=1000 _30=1000 _27 _28=1 _31 _48
    STDICT	//  _29=1000 _30=1000 _27 _28=1 _49
    0 PUSHINT	//  _29=1000 _30=1000 _27 _28=1 _49 _50=0
    STGRAMS	//  _29=1000 _30=1000 _27 _28=1 _51
    0 PUSHINT	//  _29=1000 _30=1000 _27 _28=1 _51 _52=0
    STGRAMS	//  _29=1000 _30=1000 _27 _28=1 _53
    s1 s3 XCHG	//  _29=1000 _28=1 _27 _30=1000 _53
    64 STU	//  _29=1000 _28=1 _27 _55
    s1 s3 XCHG	//  _27 _28=1 _29=1000 _55
    32 STU	//  _27 _28=1 _57
    1 STU	//  _27 _59
    STREF	//  _60
    ENDC	//  _61
  }>
  get_c7 PROCINLINE:<{
    // 
    124711402 PUSHINT	//  _2=124711402
    0 PUSHINT	//  _2=124711402 _3=0
    DUP	//  _2=124711402 _3=0 _4=0
    NOW	//  _2=124711402 _3=0 _4=0 _5
    1 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1
    DUP	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1
    239 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239
    1000000000 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000
    PUSHNULL	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000 _11
    PAIR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12
    MYADDR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13
    CONFIGROOT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13 _14
    10 TUPLE	//  _15
    SINGLE	//  _16
  }>
  invoke_method PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  exit_code gas_used return_values
    s2 PUSH	//  exit_code gas_used return_values exit_code
    0 NEQINT	//  exit_code gas_used return_values _7
    s3 PUSH	//  exit_code gas_used return_values _7 exit_code
    1 NEQINT	//  exit_code gas_used return_values _7 _9
    AND	//  exit_code gas_used return_values _10
    s1 s3 XCHG	//  return_values gas_used exit_code _10
    THROWANYIF
    SWAP	//  gas_used return_values
  }>
  invoke_method_expect_fail PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _13 _14 _15
    DROP	//  exit_code gas_used
    OVER	//  exit_code gas_used exit_code
    0 EQINT	//  exit_code gas_used _8
    s0 s2 XCHG	//  _8 gas_used exit_code
    1 EQINT	//  _8 gas_used _10
    s1 s2 XCHG	//  gas_used _8 _10
    OR	//  gas_used _11
    201 THROWIF
  }>
  assert_no_actions PROCINLINE:<{
    // 
    c5 PUSH CTOS	//  _1
    SEMPTY	//  _2
    NOT	//  _3
    202 THROWIF
  }>
  parse_send_raw_message PROCINLINE:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDREF	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_lib_code PROCINLINE:<{
    //  out_action
    7 LDU	//  mode out_action
    DUP	//  mode out_action out_action
    SREFS	//  mode out_action _5
    0 GTINT	//  mode out_action _7
    IF:<{	//  mode out_action
      LDREF	//  mode _20 _19
      DROP	//  mode _8
    }>ELSE<{	//  mode out_action
      256 LDSLICE	//  mode _22 _21
      DROP	//  mode loaded_bits
      NEWC	//  mode loaded_bits _14
      SWAP	//  mode _14 loaded_bits
      STSLICER	//  mode _15
      ENDC	//  mode _16
    }>
  }>
  parse_raw_reserve PROCINLINE:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDDICT	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_set_code PROCINLINE:<{
    //  out_action
    LDREF	//  _4 _3
    DROP	//  _1
  }>
  parse_c5 PROCINLINE:<{
    // 
    NIL	//  list_of_actions_tuple
    c5 PUSH	//  list_of_actions_tuple c5
    NIL	//  list_of_actions_tuple c5 actions
    SWAP	//  list_of_actions_tuple actions c5
    CTOS	//  list_of_actions_tuple actions out_action_node
    DUP	//  list_of_actions_tuple actions out_action_node out_action_node
    SBITS	//  list_of_actions_tuple actions out_action_node _8
    0 EQINT	//  list_of_actions_tuple actions out_action_node _10
    IF:<{	//  list_of_actions_tuple actions out_action_node
      3 BLKDROP	// 
      PUSHNULL	//  _11
    }>ELSE<{	//  list_of_actions_tuple actions out_action_node
      0 PUSHINT	//  list_of_actions_tuple actions out_action_node num=0
      UNTIL:<{
        SWAP	//  list_of_actions_tuple actions num out_action_node
        LDREF	//  list_of_actions_tuple actions num next out_action_node
        s0 s3 XCHG2	//  list_of_actions_tuple next num out_action_node actions
        CONS	//  list_of_actions_tuple next num actions
        s0 s2 XCHG	//  list_of_actions_tuple actions num next
        CTOS	//  list_of_actions_tuple actions num out_action_node
        SWAP	//  list_of_actions_tuple actions out_action_node num
        INC	//  list_of_actions_tuple actions out_action_node num
        OVER	//  list_of_actions_tuple actions out_action_node num out_action_node
        SBITS	//  list_of_actions_tuple actions out_action_node num _23
        0 EQINT	//  list_of_actions_tuple actions out_action_node num break
      }>	//  list_of_actions_tuple actions out_action_node num
      NIP	//  list_of_actions_tuple actions num
      0 PUSHINT	//  list_of_actions_tuple actions num i=0
      UNTIL:<{
        s0 s2 XCHG	//  list_of_actions_tuple i num actions
        UNCONS	//  list_of_actions_tuple i num out_action actions
        SWAP	//  list_of_actions_tuple i num actions out_action
        32 LDU	//  list_of_actions_tuple i num actions action_code out_action
        OVER
        247711853 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _35=247711853
        EQUAL	//  list_of_actions_tuple i num actions action_code out_action _36
        IF:<{	//  list_of_actions_tuple i num actions action_code out_action
          NIP	//  list_of_actions_tuple i num actions out_action
          parse_send_raw_message INLINECALLDICT	//  list_of_actions_tuple i num actions mode body
          0 PUSHINT	//  list_of_actions_tuple i num actions mode body _42=0
          s0 s2 XCHG	//  list_of_actions_tuple i num actions _42=0 body mode
          TRIPLE	//  list_of_actions_tuple i num actions _41
          s1 s4 XCHG	//  actions i num list_of_actions_tuple _41
          TPUSH	//  actions i num list_of_actions_tuple
        }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
          OVER
          2907562126 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _44=2907562126
          EQUAL	//  list_of_actions_tuple i num actions action_code out_action _45
          IF:<{	//  list_of_actions_tuple i num actions action_code out_action
            NIP	//  list_of_actions_tuple i num actions out_action
            parse_set_code INLINECALLDICT	//  list_of_actions_tuple i num actions new_setcode
            1 PUSHINT	//  list_of_actions_tuple i num actions new_setcode _50=1
            SWAP
            -1 PUSHINT	//  list_of_actions_tuple i num actions _50=1 new_setcode _51=-1
            TRIPLE	//  list_of_actions_tuple i num actions _49
            s1 s4 XCHG	//  actions i num list_of_actions_tuple _49
            TPUSH	//  actions i num list_of_actions_tuple
          }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
            OVER
            921090057 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _53=921090057
            EQUAL	//  list_of_actions_tuple i num actions action_code out_action _54
            IF:<{	//  list_of_actions_tuple i num actions action_code out_action
              NIP	//  list_of_actions_tuple i num actions out_action
              parse_raw_reserve INLINECALLDICT	//  list_of_actions_tuple i num actions mode currencies
              2 PUSHINT	//  list_of_actions_tuple i num actions mode currencies _60=2
              s0 s2 XCHG	//  list_of_actions_tuple i num actions _60=2 currencies mode
              TRIPLE	//  list_of_actions_tuple i num actions _59
              s1 s4 XCHG	//  actions i num list_of_actions_tuple _59
              TPUSH	//  actions i num list_of_actions_tuple
            }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
              SWAP
              653925844 PUSHINT	//  list_of_actions_tuple i num actions out_action action_code _62=653925844
              EQUAL	//  list_of_actions_tuple i num actions out_action _63
              IF:<{	//  list_of_actions_tuple i num actions out_action
                parse_lib_code INLINECALLDICT	//  list_of_actions_tuple i num actions mode lib_cell_or_lib_hash
                3 PUSHINT	//  list_of_actions_tuple i num actions mode lib_cell_or_lib_hash _69=3
                s0 s2 XCHG	//  list_of_actions_tuple i num actions _69=3 lib_cell_or_lib_hash mode
                TRIPLE	//  list_of_actions_tuple i num actions _68
                s1 s4 XCHG	//  actions i num list_of_actions_tuple _68
                TPUSH	//  actions i num list_of_actions_tuple
                s0 s3 XCHG	//  list_of_actions_tuple i num actions
              }>ELSE<{
                DROP	//  list_of_actions_tuple i num actions
              }>
              s0 s3 XCHG	//  actions i num list_of_actions_tuple
            }>
          }>
        }>
        s0 s2 XCHG	//  actions list_of_actions_tuple num i
        INC	//  actions list_of_actions_tuple num i
        s0 s1 PUSH2	//  actions list_of_actions_tuple num i i num
        GEQ	//  actions list_of_actions_tuple num i _73
        s3 s4 XCHG	//  list_of_actions_tuple actions num i _73
      }>	//  list_of_actions_tuple actions num i
      3 BLKDROP	//  list_of_actions_tuple
    }>
  }>
  init_environment PROC:<{
    // 
    PUSHNULL	//  _0
    NEWC	//  _0 _1
    STDICT	//  _2
    ENDC	//  _3
    c4 POP
  }>
  storage_key PROC:<{
    //  tag
    2824609491042946229920590003095732224 PUSHINTX	//  tag _3
    SWAP	//  _3 tag
    ADD	//  _4
  }>
  load_storage_with_tag PROC:<{
    //  tag
    storage_key CALLDICT	//  _1
    c4 PUSH	//  _1 _2
    CTOS	//  _1 _3
    PLDDICT	//  _1 _4
    8 PUSHPOW2	//  _1 _4 _5=256
    DICTIGETOPTREF	//  _6
  }>
  save_storage_with_tag PROC:<{
    //  tag storage
    c4 PUSH	//  tag storage _3
    CTOS	//  tag storage _4
    PLDDICT	//  tag storage dict
    s0 s2 XCHG	//  dict storage tag
    storage_key CALLDICT	//  dict storage _7
    ROT
    8 PUSHPOW2	//  storage _7 dict _8=256
    DICTISETREF	//  dict
    NEWC	//  dict _10
    STDICT	//  _11
    ENDC	//  _12
    c4 POP
  }>
  generate_empty_address PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    2 STU	//  _3
    ENDC	//  _4
    CTOS	//  _5
  }>
  generate_internal_address_with_custom_data PROC:<{
    //  anycast workchain_id address
    2 PUSHINT	//  anycast workchain_id address _4=2
    NEWC	//  anycast workchain_id address _4=2 _5
    2 STU	//  anycast workchain_id address _7
    s1 s3 XCHG	//  address workchain_id anycast _7
    1 STU	//  address workchain_id _9
    8 STI	//  address _11
    256 STU	//  _13
    ENDC	//  _14
    CTOS	//  address_cell
  }>
  generate_external_address_with_custom_data PROC:<{
    //  address_length address
    1 PUSHINT	//  address_length address _3=1
    NEWC	//  address_length address _3=1 _4
    2 STU	//  address_length address _6
    s2 s(-1) PUXC	//  address_length address address_length _6
    9 STU	//  address_length address _8
    ROT	//  address _8 address_length
    STUX	//  _9
    ENDC	//  _10
    CTOS	//  address_cell
  }>
  generate_var_address PROC:<{
    //  address_length
    DUP
    8 PUSHPOW2	//  address_length address_length _1=256
    GREATER	//  address_length _2
    IFJMP:<{	//  address_length
      RANDU256	//  address_length address
      RANDU256	//  address_length address address_secondpart
      -1 PUSHINT	//  address_length address address_secondpart _8=-1
      0 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0
      3 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0 _10=3
      NEWC	//  address_length address address_secondpart _8=-1 _9=0 _10=3 _11
      2 STU	//  address_length address address_secondpart _8=-1 _9=0 _13
      1 STU	//  address_length address address_secondpart _8=-1 _15
      s1 s4 XCHG	//  _8=-1 address address_secondpart address_length _15
      9 STU	//  _8=-1 address address_secondpart _17
      s1 s3 XCHG	//  address_secondpart address _8=-1 _17
      8 STI	//  address_secondpart address _19
      256 STU	//  address_secondpart _21
      256 STU	//  _23
      ENDC	//  _24
      CTOS	//  address_cell
    }>	//  address_length
    RANDU256	//  address_length address
    -1 PUSHINT	//  address_length address _29=-1
    0 PUSHINT	//  address_length address _29=-1 _30=0
    3 PUSHINT	//  address_length address _29=-1 _30=0 _31=3
    NEWC	//  address_length address _29=-1 _30=0 _31=3 _32
    2 STU	//  address_length address _29=-1 _30=0 _34
    1 STU	//  address_length address _29=-1 _36
    s3 s(-1) PUXC	//  address_length address _29=-1 address_length _36
    9 STU	//  address_length address _29=-1 _38
    8 STI	//  address_length address _40
    ROT	//  address _40 address_length
    STUX	//  _41
    ENDC	//  _42
    CTOS	//  address_cell
  }>
  generate_var_address_with_custom_data PROC:<{
    //  anycast workchain_id address_length address_slice
    OVER
    8 PUSHPOW2	//  anycast workchain_id address_length address_slice address_length _4=256
    GREATER	//  anycast workchain_id address_length address_slice _5
    IFJMP:<{	//  anycast workchain_id address_length address_slice
      256 LDU	//  anycast workchain_id address_length addr address_slice
      256 LDU	//  anycast workchain_id address_length addr _52 _51
      DROP	//  anycast workchain_id address_length addr addr_second_part
      3 PUSHINT	//  anycast workchain_id address_length addr addr_second_part _15=3
      NEWC	//  anycast workchain_id address_length addr addr_second_part _15=3 _16
      2 STU	//  anycast workchain_id address_length addr addr_second_part _18
      s1 s5 XCHG	//  addr_second_part workchain_id address_length addr anycast _18
      1 STU	//  addr_second_part workchain_id address_length addr _20
      s1 s2 XCHG	//  addr_second_part workchain_id addr address_length _20
      9 STU	//  addr_second_part workchain_id addr _22
      s1 s2 XCHG	//  addr_second_part addr workchain_id _22
      8 STI	//  addr_second_part addr _24
      256 STU	//  addr_second_part _26
      256 STU	//  _28
      ENDC	//  _29
      CTOS	//  address_cell
    }>	//  anycast workchain_id address_length address_slice
    256 LDU	//  anycast workchain_id address_length _54 _53
    DROP	//  anycast workchain_id address_length addr
    3 PUSHINT	//  anycast workchain_id address_length addr _36=3
    NEWC	//  anycast workchain_id address_length addr _36=3 _37
    2 STU	//  anycast workchain_id address_length addr _39
    s1 s4 XCHG	//  addr workchain_id address_length anycast _39
    1 STU	//  addr workchain_id address_length _41
    s1 s(-1) PUXC	//  addr workchain_id address_length address_length _41
    9 STU	//  addr workchain_id address_length _43
    s1 s2 XCHG	//  addr address_length workchain_id _43
    8 STI	//  addr address_length _45
    SWAP	//  addr _45 address_length
    STUX	//  _46
    ENDC	//  _47
    CTOS	//  address_cell
  }>
  generate_any_address PROC:<{
    //  typeOfAddress
    DUP	//  typeOfAddress typeOfAddress
    0 EQINT	//  typeOfAddress _2
    IFJMP:<{	//  typeOfAddress
      DROP	// 
      generate_empty_address CALLDICT	//  _3
    }>	//  typeOfAddress
    DUP	//  typeOfAddress typeOfAddress
    1 EQINT	//  typeOfAddress _5
    IFJMP:<{	//  typeOfAddress
      DROP	// 
      generate_internal_address CALLDICT	//  _6
    }>	//  typeOfAddress
    2 EQINT	//  _8
    IFJMP:<{	// 
      8 PUSHPOW2	//  _9=256
      generate_external_address CALLDICT	//  _10
    }>	// 
    8 PUSHPOW2	//  _11=256
    generate_var_address CALLDICT	//  _12
  }>
  generate_init_state PROC:<{
    // 
    0 PUSHINT	//  _0=0
    s0 s0 s0 PUSH3	//  _0=0 _1=0 _2=0 _3=0
    1 PUSHINT	//  _0=0 _1=0 _2=0 _3=0 _4=1
    s0 s1 PUSH2	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _6=0
    NEWC	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _6=0 _7
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _9
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _4=1 _11
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _13
    1 STU	//  _0=0 _1=0 _2=0 _15
    1 STU	//  _0=0 _1=0 _17
    1 STU	//  _0=0 _19
    1 STU	//  _21
  }>
  generate_init_state_with_data PROC:<{
    //  code data library
    1 PUSHINT	//  code data library _3=1
    s0 s0 PUSH2	//  code data library _3=1 _4=1 _5=1
    0 PUSHINT	//  code data library _3=1 _4=1 _5=1 _6=0
    s1 s1 s0 PUSH3	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _9=0
    NEWC	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _9=0 _10
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _12
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _14
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _16
    1 STU	//  code data library _3=1 _4=1 _5=1 _18
    1 STU	//  code data library _3=1 _4=1 _20
    s1 s5 XCHG	//  _4=1 data library _3=1 code _20
    STREF	//  _4=1 data library _3=1 _21
    s1 s4 XCHG	//  _3=1 data library _4=1 _21
    1 STU	//  _3=1 data library _23
    s1 s2 XCHG	//  _3=1 library data _23
    STREF	//  _3=1 library _24
    s1 s2 XCHG	//  library _3=1 _24
    1 STU	//  library _26
    STREF	//  _27
  }>
  parse_init_state PROC:<{
    //  cs
    NIL	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_five cs
    s2 s1 XCPU	//  cs maybe_five parsed_tuple maybe_five
    TPUSH	//  cs maybe_five parsed_tuple
    SWAP	//  cs parsed_tuple maybe_five
    1 EQINT	//  cs parsed_tuple _10
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      5 LDU	//  parsed_tuple _12 cs
      -ROT	//  cs parsed_tuple _12
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_tick_tock cs
    s2 s1 XCPU	//  cs maybe_tick_tock parsed_tuple maybe_tick_tock
    TPUSH	//  cs maybe_tick_tock parsed_tuple
    OVER	//  cs maybe_tick_tock parsed_tuple maybe_tick_tock
    1 EQINT	//  cs maybe_tick_tock parsed_tuple _23
    IF:<{	//  cs maybe_tick_tock parsed_tuple
      s0 s2 XCHG	//  parsed_tuple maybe_tick_tock cs
      1 LDU	//  parsed_tuple maybe_tick_tock _25 cs
      s3 s3 XCHG2	//  cs maybe_tick_tock parsed_tuple _25
      TPUSH	//  cs maybe_tick_tock parsed_tuple
      s0 s2 XCHG	//  parsed_tuple maybe_tick_tock cs
      1 LDU	//  parsed_tuple maybe_tick_tock _30 cs
      s3 s3 XCHG2	//  cs maybe_tick_tock parsed_tuple _30
      TPUSH	//  cs maybe_tick_tock parsed_tuple
    }>	//  cs maybe_tick_tock parsed_tuple
    s0 s2 XCHG	//  parsed_tuple maybe_tick_tock cs
    1 LDU	//  parsed_tuple maybe_tick_tock maybe_code cs
    s3 s3 XCHG2	//  cs maybe_tick_tock parsed_tuple maybe_code
    TPUSH	//  cs maybe_tick_tock parsed_tuple
    OVER	//  cs maybe_tick_tock parsed_tuple maybe_tick_tock
    1 EQINT	//  cs maybe_tick_tock parsed_tuple _41
    IF:<{	//  cs maybe_tick_tock parsed_tuple
      s0 s2 XCHG	//  parsed_tuple maybe_tick_tock cs
      LDREF	//  parsed_tuple maybe_tick_tock _43 cs
      s3 s3 XCHG2	//  cs maybe_tick_tock parsed_tuple _43
      TPUSH	//  cs maybe_tick_tock parsed_tuple
    }>	//  cs maybe_tick_tock parsed_tuple
    s0 s2 XCHG	//  parsed_tuple maybe_tick_tock cs
    1 LDU	//  parsed_tuple maybe_tick_tock maybe_data cs
    s3 s3 XCHG2	//  cs maybe_tick_tock parsed_tuple maybe_data
    TPUSH	//  cs maybe_tick_tock parsed_tuple
    SWAP	//  cs parsed_tuple maybe_tick_tock
    1 EQINT	//  cs parsed_tuple _53
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _55 cs
      -ROT	//  cs parsed_tuple _55
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_library cs
    s2 s1 XCPU	//  cs maybe_library parsed_tuple maybe_library
    TPUSH	//  cs maybe_library parsed_tuple
    SWAP	//  cs parsed_tuple maybe_library
    1 EQINT	//  cs parsed_tuple _65
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _91 _90
      DROP	//  parsed_tuple _67
      TPUSH	//  parsed_tuple
    }>ELSE<{
      NIP	//  parsed_tuple
    }>
  }>
  generate_internal_message PROC:<{
    //  bounce ton_amount init_state payload
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _9=1000
    DUP	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000
    PUSHNULL	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11
    0 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _14=0
    NEWC	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _14=0 _15
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _17
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _19
    s1 s10 XCHG	//  _12=0 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 bounce _19
    1 STU	//  _12=0 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _21
    s1 s9 XCHG	//  _11 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _12=0 _21
    1 STU	//  _11 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _23
    s0 s4 XCHG2	//  _11 ton_amount init_state payload _10=1000 sdest _9=1000 _23 ssrc
    STSLICER	//  _11 ton_amount init_state payload _10=1000 sdest _9=1000 _24
    ROT	//  _11 ton_amount init_state payload _10=1000 _9=1000 _24 sdest
    STSLICER	//  _11 ton_amount init_state payload _10=1000 _9=1000 _25
    s0 s5 XCHG2	//  _11 _9=1000 init_state payload _10=1000 _25 ton_amount
    STGRAMS	//  _11 _9=1000 init_state payload _10=1000 _26
    s1 s5 XCHG	//  _10=1000 _9=1000 init_state payload _11 _26
    STDICT	//  _10=1000 _9=1000 init_state payload _27
    0 PUSHINT	//  _10=1000 _9=1000 init_state payload _27 _28=0
    STGRAMS	//  _10=1000 _9=1000 init_state payload _29
    0 PUSHINT	//  _10=1000 _9=1000 init_state payload _29 _30=0
    STGRAMS	//  _10=1000 _9=1000 init_state payload _31
    s1 s4 XCHG	//  payload _9=1000 init_state _10=1000 _31
    64 STU	//  payload _9=1000 init_state _33
    s1 s2 XCHG	//  payload init_state _9=1000 _33
    32 STU	//  payload init_state _35
    s1 s(-1) PUXC	//  payload init_state init_state _35
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _39
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _42
      OVER	//  payload msg init_state_builder _42 init_state_builder
      BBITS	//  payload msg init_state_builder _42 _43
      ADD	//  payload msg init_state_builder _44
      10 PUSHPOW2DEC	//  payload msg init_state_builder _44 _45=1023
      GEQ	//  payload msg init_state_builder _46
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _47
        1 PUSHINT
        ROT	//  payload _47 _48=1 msg
        1 STU	//  payload _47 _50
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _52=0 msg
        1 STU	//  payload init_state_builder _54
        SWAP	//  payload _54 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _56
    s2 PUSH	//  payload msg _56 payload
    BBITS	//  payload msg _56 _57
    ADD	//  payload msg _58
    10 PUSHPOW2DEC	//  payload msg _58 _59=1023
    GEQ	//  payload msg _60
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _61
      1 PUSHINT
      ROT	//  _61 _62=1 msg
      1 STU	//  _61 _64
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _66=0
      SWAP	//  payload _66=0 msg
      1 STU	//  payload _68
      SWAP	//  _68 payload
      STBR	//  msg
    }>
    ENDC	//  _70
  }>
  generate_internal_message_relaxed PROC:<{
    //  bounce ton_amount init_state payload typeOfAnyAddress
    generate_any_address CALLDICT	//  bounce ton_amount init_state payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _10=1000
    DUP	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000
    PUSHNULL	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12
    0 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _15=0
    NEWC	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _15=0 _16
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _18
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _20
    s1 s10 XCHG	//  _13=0 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 bounce _20
    1 STU	//  _13=0 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _22
    s1 s9 XCHG	//  _12 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _13=0 _22
    1 STU	//  _12 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _24
    s0 s4 XCHG2	//  _12 ton_amount init_state payload _11=1000 sdest _10=1000 _24 ssrc
    STSLICER	//  _12 ton_amount init_state payload _11=1000 sdest _10=1000 _25
    ROT	//  _12 ton_amount init_state payload _11=1000 _10=1000 _25 sdest
    STSLICER	//  _12 ton_amount init_state payload _11=1000 _10=1000 _26
    s0 s5 XCHG2	//  _12 _10=1000 init_state payload _11=1000 _26 ton_amount
    STGRAMS	//  _12 _10=1000 init_state payload _11=1000 _27
    s1 s5 XCHG	//  _11=1000 _10=1000 init_state payload _12 _27
    STDICT	//  _11=1000 _10=1000 init_state payload _28
    0 PUSHINT	//  _11=1000 _10=1000 init_state payload _28 _29=0
    STGRAMS	//  _11=1000 _10=1000 init_state payload _30
    0 PUSHINT	//  _11=1000 _10=1000 init_state payload _30 _31=0
    STGRAMS	//  _11=1000 _10=1000 init_state payload _32
    s1 s4 XCHG	//  payload _10=1000 init_state _11=1000 _32
    64 STU	//  payload _10=1000 init_state _34
    s1 s2 XCHG	//  payload init_state _10=1000 _34
    32 STU	//  payload init_state _36
    s1 s(-1) PUXC	//  payload init_state init_state _36
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _40
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _43
      OVER	//  payload msg init_state_builder _43 init_state_builder
      BBITS	//  payload msg init_state_builder _43 _44
      ADD	//  payload msg init_state_builder _45
      10 PUSHPOW2DEC	//  payload msg init_state_builder _45 _46=1023
      GEQ	//  payload msg init_state_builder _47
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _48
        1 PUSHINT
        ROT	//  payload _48 _49=1 msg
        1 STU	//  payload _48 _51
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _53=0 msg
        1 STU	//  payload init_state_builder _55
        SWAP	//  payload _55 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _57
    s2 PUSH	//  payload msg _57 payload
    BBITS	//  payload msg _57 _58
    ADD	//  payload msg _59
    10 PUSHPOW2DEC	//  payload msg _59 _60=1023
    GEQ	//  payload msg _61
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _62
      1 PUSHINT
      ROT	//  _62 _63=1 msg
      1 STU	//  _62 _65
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _67=0
      SWAP	//  payload _67=0 msg
      1 STU	//  payload _69
      SWAP	//  _69 payload
      STBR	//  msg
    }>
    ENDC	//  _71
  }>
  generate_external_in_message PROC:<{
    //  import_fee init_state payload
    8 PUSHPOW2	//  import_fee init_state payload _4=256
    generate_external_address CALLDICT	//  import_fee init_state payload ssrc
    generate_internal_address CALLDICT	//  import_fee init_state payload ssrc sdest
    2 PUSHINT	//  import_fee init_state payload ssrc sdest _9=2
    NEWC	//  import_fee init_state payload ssrc sdest _9=2 _10
    2 STU	//  import_fee init_state payload ssrc sdest _12
    ROT	//  import_fee init_state payload sdest _12 ssrc
    STSLICER	//  import_fee init_state payload sdest _13
    SWAP	//  import_fee init_state payload _13 sdest
    STSLICER	//  import_fee init_state payload _14
    s0 s3 XCHG2	//  payload init_state _14 import_fee
    STGRAMS	//  payload init_state _15
    s1 s(-1) PUXC	//  payload init_state init_state _15
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _19
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _22
      OVER	//  payload msg init_state_builder _22 init_state_builder
      BBITS	//  payload msg init_state_builder _22 _23
      ADD	//  payload msg init_state_builder _24
      10 PUSHPOW2DEC	//  payload msg init_state_builder _24 _25=1023
      GEQ	//  payload msg init_state_builder _26
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _27
        1 PUSHINT
        ROT	//  payload _27 _28=1 msg
        1 STU	//  payload _27 _30
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _32=0 msg
        1 STU	//  payload init_state_builder _34
        SWAP	//  payload _34 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _36
    s2 PUSH	//  payload msg _36 payload
    BBITS	//  payload msg _36 _37
    ADD	//  payload msg _38
    10 PUSHPOW2DEC	//  payload msg _38 _39=1023
    GREATER	//  payload msg _40
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _41
      1 PUSHINT
      ROT	//  _41 _42=1 msg
      1 STU	//  _41 _44
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _46=0
      SWAP	//  payload _46=0 msg
      1 STU	//  payload _48
      SWAP	//  _48 payload
      STBR	//  msg
    }>
    ENDC	//  _50
  }>
  generate_external_in_message_with_empty_source_address PROC:<{
    //  import_fee init_state payload
    generate_empty_address CALLDICT	//  import_fee init_state payload ssrc
    generate_internal_address CALLDICT	//  import_fee init_state payload ssrc sdest
    2 PUSHINT	//  import_fee init_state payload ssrc sdest _8=2
    NEWC	//  import_fee init_state payload ssrc sdest _8=2 _9
    2 STU	//  import_fee init_state payload ssrc sdest _11
    ROT	//  import_fee init_state payload sdest _11 ssrc
    STSLICER	//  import_fee init_state payload sdest _12
    SWAP	//  import_fee init_state payload _12 sdest
    STSLICER	//  import_fee init_state payload _13
    s0 s3 XCHG2	//  payload init_state _13 import_fee
    STGRAMS	//  payload init_state _14
    s1 s(-1) PUXC	//  payload init_state init_state _14
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _18
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _21
      OVER	//  payload msg init_state_builder _21 init_state_builder
      BBITS	//  payload msg init_state_builder _21 _22
      ADD	//  payload msg init_state_builder _23
      10 PUSHPOW2DEC	//  payload msg init_state_builder _23 _24=1023
      GEQ	//  payload msg init_state_builder _25
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _26
        1 PUSHINT
        ROT	//  payload _26 _27=1 msg
        1 STU	//  payload _26 _29
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _31=0 msg
        1 STU	//  payload init_state_builder _33
        SWAP	//  payload _33 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _35
    s2 PUSH	//  payload msg _35 payload
    BBITS	//  payload msg _35 _36
    ADD	//  payload msg _37
    10 PUSHPOW2DEC	//  payload msg _37 _38=1023
    GEQ	//  payload msg _39
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _40
      1 PUSHINT
      ROT	//  _40 _41=1 msg
      1 STU	//  _40 _43
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _45=0
      SWAP	//  payload _45=0 msg
      1 STU	//  payload _47
      SWAP	//  _47 payload
      STBR	//  msg
    }>
    ENDC	//  _49
  }>
  generate_external_out_message PROC:<{
    //  import_fee init_state payload
    s2 POP	//  payload init_state
    generate_internal_address CALLDICT	//  payload init_state ssrc
    8 PUSHPOW2	//  payload init_state ssrc _6=256
    generate_external_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _9=1000
    DUP	//  payload init_state ssrc sdest _9=1000 _10=1000
    3 PUSHINT	//  payload init_state ssrc sdest _9=1000 _10=1000 _11=3
    NEWC	//  payload init_state ssrc sdest _9=1000 _10=1000 _11=3 _12
    2 STU	//  payload init_state ssrc sdest _9=1000 _10=1000 _14
    s0 s4 XCHG2	//  payload init_state _10=1000 sdest _9=1000 _14 ssrc
    STSLICER	//  payload init_state _10=1000 sdest _9=1000 _15
    ROT	//  payload init_state _10=1000 _9=1000 _15 sdest
    STSLICER	//  payload init_state _10=1000 _9=1000 _16
    s1 s2 XCHG	//  payload init_state _9=1000 _10=1000 _16
    64 STU	//  payload init_state _9=1000 _18
    32 STU	//  payload init_state _20
    s1 s(-1) PUXC	//  payload init_state init_state _20
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _24
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _27
      OVER	//  payload msg init_state_builder _27 init_state_builder
      BBITS	//  payload msg init_state_builder _27 _28
      ADD	//  payload msg init_state_builder _29
      10 PUSHPOW2DEC	//  payload msg init_state_builder _29 _30=1023
      GEQ	//  payload msg init_state_builder _31
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _32
        1 PUSHINT
        ROT	//  payload _32 _33=1 msg
        1 STU	//  payload _32 _35
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _37=0 msg
        1 STU	//  payload init_state_builder _39
        SWAP	//  payload _39 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _41
    s2 PUSH	//  payload msg _41 payload
    BBITS	//  payload msg _41 _42
    ADD	//  payload msg _43
    10 PUSHPOW2DEC	//  payload msg _43 _44=1023
    GEQ	//  payload msg _45
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _46
      1 PUSHINT
      ROT	//  _46 _47=1 msg
      1 STU	//  _46 _49
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _51=0
      SWAP	//  payload _51=0 msg
      1 STU	//  payload _53
      SWAP	//  _53 payload
      STBR	//  msg
    }>
    ENDC	//  _55
  }>
  generate_external_out_message_with_empty_destination_address PROC:<{
    //  import_fee init_state payload
    s2 POP	//  payload init_state
    generate_internal_address CALLDICT	//  payload init_state ssrc
    generate_empty_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _8=1000
    DUP	//  payload init_state ssrc sdest _8=1000 _9=1000
    3 PUSHINT	//  payload init_state ssrc sdest _8=1000 _9=1000 _10=3
    NEWC	//  payload init_state ssrc sdest _8=1000 _9=1000 _10=3 _11
    2 STU	//  payload init_state ssrc sdest _8=1000 _9=1000 _13
    s0 s4 XCHG2	//  payload init_state _9=1000 sdest _8=1000 _13 ssrc
    STSLICER	//  payload init_state _9=1000 sdest _8=1000 _14
    ROT	//  payload init_state _9=1000 _8=1000 _14 sdest
    STSLICER	//  payload init_state _9=1000 _8=1000 _15
    s1 s2 XCHG	//  payload init_state _8=1000 _9=1000 _15
    64 STU	//  payload init_state _8=1000 _17
    32 STU	//  payload init_state _19
    s1 s(-1) PUXC	//  payload init_state init_state _19
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _23
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _26
      OVER	//  payload msg init_state_builder _26 init_state_builder
      BBITS	//  payload msg init_state_builder _26 _27
      ADD	//  payload msg init_state_builder _28
      10 PUSHPOW2DEC	//  payload msg init_state_builder _28 _29=1023
      GEQ	//  payload msg init_state_builder _30
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _31
        1 PUSHINT
        ROT	//  payload _31 _32=1 msg
        1 STU	//  payload _31 _34
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _36=0 msg
        1 STU	//  payload init_state_builder _38
        SWAP	//  payload _38 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _40
    s2 PUSH	//  payload msg _40 payload
    BBITS	//  payload msg _40 _41
    ADD	//  payload msg _42
    10 PUSHPOW2DEC	//  payload msg _42 _43=1023
    GEQ	//  payload msg _44
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _45
      1 PUSHINT
      ROT	//  _45 _46=1 msg
      1 STU	//  _45 _48
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _50=0
      SWAP	//  payload _50=0 msg
      1 STU	//  payload _52
      SWAP	//  _52 payload
      STBR	//  msg
    }>
    ENDC	//  _54
  }>
  generate_external_out_message_relaxed PROC:<{
    //  ton_amount init_state payload typeOfAnyAddress
    s3 POP	//  typeOfAnyAddress init_state payload
    s0 s2 XCHG	//  payload init_state typeOfAnyAddress
    generate_any_address CALLDICT	//  payload init_state ssrc
    8 PUSHPOW2	//  payload init_state ssrc _7=256
    generate_external_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _10=1000
    DUP	//  payload init_state ssrc sdest _10=1000 _11=1000
    3 PUSHINT	//  payload init_state ssrc sdest _10=1000 _11=1000 _12=3
    NEWC	//  payload init_state ssrc sdest _10=1000 _11=1000 _12=3 _13
    2 STU	//  payload init_state ssrc sdest _10=1000 _11=1000 _15
    s0 s4 XCHG2	//  payload init_state _11=1000 sdest _10=1000 _15 ssrc
    STSLICER	//  payload init_state _11=1000 sdest _10=1000 _16
    ROT	//  payload init_state _11=1000 _10=1000 _16 sdest
    STSLICER	//  payload init_state _11=1000 _10=1000 _17
    s1 s2 XCHG	//  payload init_state _10=1000 _11=1000 _17
    64 STU	//  payload init_state _10=1000 _19
    32 STU	//  payload init_state _21
    s1 s(-1) PUXC	//  payload init_state init_state _21
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _25
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _28
      OVER	//  payload msg init_state_builder _28 init_state_builder
      BBITS	//  payload msg init_state_builder _28 _29
      ADD	//  payload msg init_state_builder _30
      10 PUSHPOW2DEC	//  payload msg init_state_builder _30 _31=1023
      GEQ	//  payload msg init_state_builder _32
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _33
        1 PUSHINT
        ROT	//  payload _33 _34=1 msg
        1 STU	//  payload _33 _36
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _38=0 msg
        1 STU	//  payload init_state_builder _40
        SWAP	//  payload _40 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _42
    s2 PUSH	//  payload msg _42 payload
    BBITS	//  payload msg _42 _43
    ADD	//  payload msg _44
    10 PUSHPOW2DEC	//  payload msg _44 _45=1023
    GEQ	//  payload msg _46
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _47
      1 PUSHINT
      ROT	//  _47 _48=1 msg
      1 STU	//  _47 _50
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _52=0
      SWAP	//  payload _52=0 msg
      1 STU	//  payload _54
      SWAP	//  _54 payload
      STBR	//  msg
    }>
    ENDC	//  _56
  }>
  parse_internal_message PROC:<{
    //  message
    CTOS	//  cs
    112 PUSHINT	//  cs _3
    SWAP	//  _3 cs
    1 LDU	//  _3 _4 cs
    SWAP	//  _3 cs _4
    0 NEQINT	//  _3 cs _8
    s1 s2 XCHG	//  cs _3 _8
    THROWANYIF
    1 LDU	//  ihr_disabled cs
    1 LDU	//  ihr_disabled bounce cs
    1 LDU	//  ihr_disabled bounce bounced cs
    LDMSGADDR	//  ihr_disabled bounce bounced src cs
    LDMSGADDR	//  ihr_disabled bounce bounced src to_address cs
    LDVARUINT16	//  ihr_disabled bounce bounced src to_address money cs
    LDDICT	//  ihr_disabled bounce bounced src to_address money _79 _78
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _81 _80
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _83 _82
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    96 LDU	//  ihr_disabled bounce bounced src to_address money timestamps cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs
    NIL	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs init_state
    s0 s2 XCHG	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs maybe_init_state
    1 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _50
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      NIP	//  ihr_disabled bounce bounced src to_address money timestamps cs
      DUP	//  ihr_disabled bounce bounced src to_address money timestamps cs cs
      parse_init_state CALLDICT	//  ihr_disabled bounce bounced src to_address money timestamps cs init_state
      SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    }>	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps init_state body_flag cs
    SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs body_flag
    0 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _59
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>ELSE<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      LDREF	//  ihr_disabled bounce bounced src to_address money timestamps init_state _91 _90
      DROP	//  ihr_disabled bounce bounced src to_address money timestamps init_state _60
      CTOS	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>
    9 TUPLE	//  _63
  }>
  parse_external_message PROC:<{
    //  message
    CTOS	//  cs
    2 LDU	//  msg_info cs
    113 PUSHINT	//  msg_info cs _7
    s2 PUSH	//  msg_info cs _7 msg_info
    2 NEQINT	//  msg_info cs _7 _9
    s3 PUSH	//  msg_info cs _7 _9 msg_info
    3 NEQINT	//  msg_info cs _7 _9 _11
    AND	//  msg_info cs _7 _12
    THROWANYIF
    LDMSGADDR	//  msg_info src cs
    LDMSGADDR	//  msg_info src to_address cs
    0 PUSHINT	//  msg_info src to_address cs import_fee=0
    s0 s4 PUXC	//  timestamps=0 src to_address cs import_fee=0 msg_info
    2 EQINT	//  timestamps=0 src to_address cs import_fee=0 _25
    IF:<{	//  timestamps=0 src to_address cs import_fee=0
      DROP	//  timestamps=0 src to_address cs
      LDGRAMS	//  timestamps=0 src to_address import_fee cs
    }>ELSE<{	//  timestamps=0 src to_address cs import_fee=0
      s4 POP	//  import_fee=0 src to_address cs
      96 LDU	//  import_fee=0 src to_address timestamps cs
      s1 s4 XCHG	//  timestamps src to_address import_fee cs
    }>
    1 LDU	//  timestamps src to_address import_fee maybe_init_state cs
    NIL	//  timestamps src to_address import_fee maybe_init_state cs init_state
    s0 s2 XCHG	//  timestamps src to_address import_fee init_state cs maybe_init_state
    1 EQINT	//  timestamps src to_address import_fee init_state cs _38
    IF:<{	//  timestamps src to_address import_fee init_state cs
      NIP	//  timestamps src to_address import_fee cs
      DUP	//  timestamps src to_address import_fee cs cs
      parse_init_state CALLDICT	//  timestamps src to_address import_fee cs init_state
      SWAP	//  timestamps src to_address import_fee init_state cs
    }>	//  timestamps src to_address import_fee init_state cs
    1 LDU	//  timestamps src to_address import_fee init_state body_flag cs
    SWAP	//  timestamps src to_address import_fee init_state cs body_flag
    0 EQINT	//  timestamps src to_address import_fee init_state cs _47
    IF:<{	//  timestamps src to_address import_fee init_state body
    }>ELSE<{	//  timestamps src to_address import_fee init_state cs
      LDREF	//  timestamps src to_address import_fee init_state _67 _66
      DROP	//  timestamps src to_address import_fee init_state _48
      CTOS	//  timestamps src to_address import_fee init_state body
    }>
    s4 s5 XCHG
    s3 s4 XCHG
    s2 s3 XCHG	//  src to_address import_fee timestamps init_state body
    6 TUPLE	//  _51
  }>
  ~load_closure_config PROC:<{
    //  cs
    LDREF	//  _2 cs
    SWAP	//  cs _2
    CTOS	//  cs conf
    32 LDU	//  cs _5 conf
    LDVARUINT16	//  cs _5 _8 conf
    32 LDU	//  cs _5 _8 _21 _20
    DROP	//  cs _5 _8 _10
    TRIPLE	//  cs _13
    closure_config SETGLOB
  }>
  closure_config::quarantin_duration PROCINLINE:<{
    // 
    closure_config GETGLOB	//  _0
    FIRST	//  _1
  }>
  closure_config::misbehavior_fine PROCINLINE:<{
    // 
    closure_config GETGLOB	//  _0
    SECOND	//  _1
  }>
  closure_config::conditional_close_duration PROCINLINE:<{
    // 
    closure_config GETGLOB	//  _0
    THIRD	//  _1
  }>
  store_closure_config PROC:<{
    //  b
    closure_config::conditional_close_duration INLINECALLDICT	//  b _1
    closure_config::quarantin_duration INLINECALLDICT	//  b _1 _2
    NEWC	//  b _1 _2 _3
    32 STU	//  b _1 _5
    closure_config::misbehavior_fine INLINECALLDICT	//  b _1 _5 _6
    STVARUINT16	//  b _1 _7
    32 STU	//  b _9
    ENDC	//  b _10
    SWAP	//  _10 b
    STREF	//  _11
  }>
  load_storage PROC:<{
    //  level
    DUP	//  level level
    storage_parse_level SETGLOB
    c4 PUSH	//  level _2
    CTOS	//  level cs
    1 LDI	//  level _4 cs
    SWAP	//  level cs _4
    inited SETGLOB
    LDVARUINT16	//  level _7 cs
    SWAP	//  level cs _7
    balance_A SETGLOB
    LDVARUINT16	//  level _9 cs
    SWAP	//  level cs _9
    balance_B SETGLOB
    256 LDU	//  level _11 cs
    SWAP	//  level cs _11
    key_A SETGLOB
    256 LDU	//  level _14 cs
    SWAP	//  level cs _14
    key_B SETGLOB
    128 LDU	//  level _17 cs
    SWAP	//  level cs _17
    channel_id SETGLOB
    ~load_closure_config CALLDICT	//  level cs
    OVER	//  level cs level
    2 GTINT	//  level cs _23
    IF:<{	//  level cs
      32 LDU	//  level _24 cs
      SWAP	//  level cs _24
      commited_seqno_A SETGLOB
      32 LDU	//  level _27 cs
      SWAP	//  level cs _27
      commited_seqno_B SETGLOB
      LDOPTREF	//  level _30 cs
      SWAP	//  level cs _30
      quarantin SETGLOB
    }>	//  level cs
    SWAP	//  cs level
    3 GTINT	//  cs _33
    IF:<{	//  cs
      LDREF	//  _34 cs
      SWAP	//  cs _34
      payment_config SETGLOB
    }>	//  cs
    unparsed_storage SETGLOB
  }>
  save_storage PROC:<{
    // 
    storage_parse_level GETGLOB	//  level
    NEWC	//  level storage
    channel_id GETGLOB	//  level storage _4
    key_B GETGLOB	//  level storage _4 _5
    key_A GETGLOB	//  level storage _4 _5 _6
    inited GETGLOB	//  level storage _4 _5 _6 _7
    s0 s4 XCHG2	//  level _6 _4 _5 _7 storage
    1 STI	//  level _6 _4 _5 _9
    balance_A GETGLOB	//  level _6 _4 _5 _9 _10
    STVARUINT16	//  level _6 _4 _5 _11
    balance_B GETGLOB	//  level _6 _4 _5 _11 _12
    STVARUINT16	//  level _6 _4 _5 _13
    s1 s3 XCHG	//  level _5 _4 _6 _13
    256 STU	//  level _5 _4 _15
    s1 s2 XCHG	//  level _4 _5 _15
    256 STU	//  level _4 _17
    128 STU	//  level _19
    store_closure_config CALLDICT	//  level storage
    OVER	//  level storage level
    2 GTINT	//  level storage _22
    IF:<{	//  level storage
      quarantin GETGLOB	//  level storage _23
      commited_seqno_B GETGLOB	//  level storage _23 _24
      commited_seqno_A GETGLOB	//  level storage _23 _24 _25
      s0 s3 XCHG2	//  level _24 _23 _25 storage
      32 STU	//  level _24 _23 _27
      s1 s2 XCHG	//  level _23 _24 _27
      32 STU	//  level _23 _29
      STOPTREF	//  level storage
    }>	//  level storage
    SWAP	//  storage level
    3 GTINT	//  storage _32
    IF:<{	//  storage
      payment_config GETGLOB	//  storage _33
      SWAP	//  _33 storage
      STREF	//  storage
    }>ELSE<{	//  storage
      unparsed_storage GETGLOB	//  storage _35
      STSLICER	//  storage
    }>
    ENDC	//  _37
    c4 POP
  }>
  top_up_balance PROC:<{
    //  contract_balance msg
    0 PUSHINT	//  contract_balance msg _2=0
    load_storage CALLDICT
    inited GETGLOB	//  contract_balance msg _5
    NOT	//  contract_balance msg _6
    100 THROWIFNOT
    LDVARUINT16	//  contract_balance add_A msg
    LDVARUINT16	//  contract_balance add_A _28 _27
    DROP	//  contract_balance add_A add_B
    balance_A GETGLOB	//  contract_balance add_A add_B _14
    ROT	//  contract_balance add_B _14 add_A
    ADD	//  contract_balance add_B _15
    balance_A SETGLOB
    balance_B GETGLOB	//  contract_balance add_B _16
    SWAP	//  contract_balance _16 add_B
    ADD	//  contract_balance _17
    balance_B SETGLOB
    balance_A GETGLOB	//  contract_balance _19
    balance_B GETGLOB	//  contract_balance _19 _20
    ADD	//  contract_balance _21
    SWAP	//  _21 contract_balance
    LEQ	//  _22
    102 THROWIFNOT
    save_storage CALLDICT
  }>
  init_channel PROC:<{
    //  contract_balance msg
    4 PUSHINT	//  contract_balance msg _2=4
    load_storage CALLDICT
    inited GETGLOB	//  contract_balance msg _5
    NOT	//  contract_balance msg _6
    100 THROWIFNOT
    1 LDI	//  contract_balance is_A msg
    9 PUSHPOW2	//  contract_balance is_A msg _14=512
    LDSLICEX	//  contract_balance is_A signature msg
    DUP	//  contract_balance is_A signature msg msg
    HASHSU	//  contract_balance is_A signature msg _17
    s0 s3 XCHG	//  contract_balance _17 signature msg is_A
    IF:<{	//  contract_balance _17 signature msg
      key_A GETGLOB	//  contract_balance _17 signature msg _18
    }>ELSE<{	//  contract_balance _17 signature msg
      key_B GETGLOB	//  contract_balance _17 signature msg _18
    }>
    s3 s3 s0 XCHG3	//  contract_balance msg _17 signature _18
    CHKSIGNU	//  contract_balance msg _21
    101 THROWIFNOT
    32 LDU	//  contract_balance _24 msg
    SWAP
    1768843636 PUSHINT	//  contract_balance msg _24 _27=1768843636
    EQUAL	//  contract_balance msg _28
    104 THROWIFNOT
    channel_id GETGLOB	//  contract_balance msg _31
    SWAP	//  contract_balance _31 msg
    128 LDU	//  contract_balance _31 _32 msg
    -ROT	//  contract_balance msg _31 _32
    EQUAL	//  contract_balance msg _35
    114 THROWIFNOT
    LDVARUINT16	//  contract_balance set_balance_A msg
    LDVARUINT16	//  contract_balance set_balance_A _76 _75
    DROP	//  contract_balance set_balance_A set_balance_B
    balance_A GETGLOB	//  contract_balance set_balance_A set_balance_B _44
    s2 s(-1) PUXC	//  contract_balance set_balance_A set_balance_B set_balance_A _44
    GEQ	//  contract_balance set_balance_A set_balance_B _45
    balance_B GETGLOB	//  contract_balance set_balance_A set_balance_B _45 _46
    s2 s(-1) PUXC	//  contract_balance set_balance_A set_balance_B _45 set_balance_B _46
    GEQ	//  contract_balance set_balance_A set_balance_B _45 _47
    AND	//  contract_balance set_balance_A set_balance_B _48
    102 THROWIFNOT
    SWAP	//  contract_balance set_balance_B set_balance_A
    balance_A SETGLOB
    balance_B SETGLOB
    payment_config GETGLOB	//  contract_balance _51
    CTOS	//  contract_balance pcs
    LDVARUINT16	//  contract_balance _78 _77
    DROP	//  contract_balance excess_fee
    balance_A GETGLOB	//  contract_balance excess_fee _57
    balance_B GETGLOB	//  contract_balance excess_fee _57 _58
    ADD	//  contract_balance excess_fee _59
    SWAP	//  contract_balance _59 excess_fee
    ADD	//  contract_balance _60
    SWAP	//  _60 contract_balance
    LESS	//  _61
    102 THROWIFNOT
    TRUE	//  _63
    inited SETGLOB
    save_storage CALLDICT
  }>
  send_payout PROC:<{
    //  s_addr amount channel_id flags
    3722217658 PUSHINT	//  s_addr amount channel_id flags _4=3722217658
    0 PUSHINT	//  s_addr amount channel_id flags _4=3722217658 _5=0
    16 PUSHINT	//  s_addr amount channel_id flags _4=3722217658 _5=0 _6=16
    NEWC	//  s_addr amount channel_id flags _4=3722217658 _5=0 _6=16 _7
    6 STU	//  s_addr amount channel_id flags _4=3722217658 _5=0 _9
    s0 s6 XCHG2	//  _5=0 amount channel_id flags _4=3722217658 _9 s_addr
    STSLICER	//  _5=0 amount channel_id flags _4=3722217658 _10
    s0 s4 XCHG2	//  _5=0 _4=3722217658 channel_id flags _10 amount
    STGRAMS	//  _5=0 _4=3722217658 channel_id flags _11
    s1 s4 XCHG	//  flags _4=3722217658 channel_id _5=0 _11
    107 STU	//  flags _4=3722217658 channel_id _25
    s1 s2 XCHG	//  flags channel_id _4=3722217658 _25
    32 STU	//  flags channel_id _27
    128 STU	//  flags _29
    ENDC	//  flags _30
    SWAP	//  _30 flags
    SENDRAWMSG
  }>
  close_channel PROC:<{
    // 
    payment_config GETGLOB	//  _1
    CTOS	//  pcs
    LDVARUINT16	//  _35 _34
    NIP	//  pcs
    LDMSGADDR	//  _8 pcs
    LDMSGADDR	//  _8 _39 _38
    DROP	//  addr_A addr_B
    BALANCE	//  addr_A addr_B _13
    FIRST	//  addr_A addr_B total_contract_balance
    2 PUSHINT	//  addr_A addr_B total_contract_balance mode_B=2
    balance_B GETGLOB	//  addr_A addr_B total_contract_balance mode_B=2 _17
    ROT	//  addr_A addr_B mode_B=2 _17 total_contract_balance
    GREATER	//  addr_A addr_B mode_B=2 _18
    IF:<{	//  addr_A addr_B mode_B=2
      DROP	//  addr_A addr_B
      7 PUSHPOW2	//  addr_A addr_B mode_B=128
    }>	//  addr_A addr_B mode_B
    balance_B GETGLOB	//  addr_A addr_B mode_B _20
    channel_id GETGLOB	//  addr_A addr_B mode_B _20 _21
    ROT	//  addr_A addr_B _20 _21 mode_B
    send_payout CALLDICT
    balance_A GETGLOB	//  addr_A _23
    channel_id GETGLOB	//  addr_A _23 _24
    130 PUSHINT	//  addr_A _23 _24 _27
    send_payout CALLDICT
    FALSE	//  _29
    inited SETGLOB
    0 PUSHINT	//  _30=0
    balance_A SETGLOB
    0 PUSHINT	//  _31=0
    balance_B SETGLOB
    PUSHNULL	//  _32
    quarantin SETGLOB
    save_storage CALLDICT
  }>
  cooperative_close PROC:<{
    //  msg
    4 PUSHINT	//  msg _1=4
    load_storage CALLDICT
    LDREF	//  _4 msg
    SWAP	//  msg _4
    CTOS	//  msg sig_A
    SWAP	//  sig_A msg
    LDREF	//  sig_A _8 msg
    SWAP	//  sig_A msg _8
    CTOS	//  sig_A msg sig_B
    OVER	//  sig_A msg sig_B msg
    HASHSU	//  sig_A msg sig_B hash
    s0 s2 XCHG	//  sig_A hash sig_B msg
    32 LDU	//  sig_A hash sig_B _14 msg
    SWAP
    1131179891 PUSHINT	//  sig_A hash sig_B msg _14 _17=1131179891
    EQUAL	//  sig_A hash sig_B msg _18
    104 THROWIFNOT
    channel_id GETGLOB	//  sig_A hash sig_B msg _21
    SWAP	//  sig_A hash sig_B _21 msg
    128 LDU	//  sig_A hash sig_B _21 _22 msg
    -ROT	//  sig_A hash sig_B msg _21 _22
    EQUAL	//  sig_A hash sig_B msg _25
    114 THROWIFNOT
    key_A GETGLOB	//  sig_A hash sig_B msg _28
    s3 s4 s4 PUXC2	//  msg hash sig_B hash sig_A _28
    CHKSIGNU	//  msg hash sig_B _29
    key_B GETGLOB	//  msg hash sig_B _29 _30
    s3 s3 s0 XCHG3	//  msg _29 hash sig_B _30
    CHKSIGNU	//  msg _29 _31
    AND	//  msg _32
    101 THROWIFNOT
    LDVARUINT16	//  _34 msg
    SWAP	//  msg _34
    balance_A SETGLOB
    LDVARUINT16	//  _36 msg
    SWAP	//  msg _36
    balance_B SETGLOB
    64 LDU	//  new_seqno_A msg
    64 LDU	//  new_seqno_A _70 _69
    DROP	//  new_seqno_A new_seqno_B
    commited_seqno_A GETGLOB	//  new_seqno_A new_seqno_B _47
    s2 PUSH	//  new_seqno_A new_seqno_B _47 new_seqno_A
    LESS	//  new_seqno_A new_seqno_B _48
    commited_seqno_B GETGLOB	//  new_seqno_A new_seqno_B _48 _49
    s2 PUSH	//  new_seqno_A new_seqno_B _48 _49 new_seqno_B
    LESS	//  new_seqno_A new_seqno_B _48 _50
    AND	//  new_seqno_A new_seqno_B _51
    108 THROWIFNOT
    SWAP	//  new_seqno_B new_seqno_A
    commited_seqno_A SETGLOB
    commited_seqno_B SETGLOB
    ACCEPT
    close_channel CALLDICT
  }>
  cooperative_commit PROC:<{
    //  msg
    3 PUSHINT	//  msg _1=3
    load_storage CALLDICT
    LDREF	//  _4 msg
    SWAP	//  msg _4
    CTOS	//  msg sig_A
    SWAP	//  sig_A msg
    LDREF	//  sig_A _8 msg
    SWAP	//  sig_A msg _8
    CTOS	//  sig_A msg sig_B
    OVER	//  sig_A msg sig_B msg
    HASHSU	//  sig_A msg sig_B hash
    s0 s2 XCHG	//  sig_A hash sig_B msg
    32 LDU	//  sig_A hash sig_B _14 msg
    SWAP
    1128492404 PUSHINT	//  sig_A hash sig_B msg _14 _17=1128492404
    EQUAL	//  sig_A hash sig_B msg _18
    104 THROWIFNOT
    channel_id GETGLOB	//  sig_A hash sig_B msg _21
    SWAP	//  sig_A hash sig_B _21 msg
    128 LDU	//  sig_A hash sig_B _21 _22 msg
    -ROT	//  sig_A hash sig_B msg _21 _22
    EQUAL	//  sig_A hash sig_B msg _25
    114 THROWIFNOT
    key_A GETGLOB	//  sig_A hash sig_B msg _28
    s3 s4 s4 PUXC2	//  msg hash sig_B hash sig_A _28
    CHKSIGNU	//  msg hash sig_B _29
    key_B GETGLOB	//  msg hash sig_B _29 _30
    s3 s3 s0 XCHG3	//  msg _29 hash sig_B _30
    CHKSIGNU	//  msg _29 _31
    AND	//  msg _32
    101 THROWIFNOT
    64 LDU	//  new_seqno_A msg
    64 LDU	//  new_seqno_A _88 _87
    DROP	//  new_seqno_A new_seqno_B
    commited_seqno_A GETGLOB	//  new_seqno_A new_seqno_B _43
    s2 PUSH	//  new_seqno_A new_seqno_B _43 new_seqno_A
    LESS	//  new_seqno_A new_seqno_B _44
    commited_seqno_B GETGLOB	//  new_seqno_A new_seqno_B _44 _45
    s2 PUSH	//  new_seqno_A new_seqno_B _44 _45 new_seqno_B
    LESS	//  new_seqno_A new_seqno_B _44 _46
    AND	//  new_seqno_A new_seqno_B _47
    108 THROWIFNOT
    OVER	//  new_seqno_A new_seqno_B new_seqno_A
    commited_seqno_A SETGLOB
    DUP	//  new_seqno_A new_seqno_B new_seqno_B
    commited_seqno_B SETGLOB
    quarantin GETGLOB	//  new_seqno_A new_seqno_B _49
    ISNULL	//  new_seqno_A new_seqno_B _50
    IFNOT:<{	//  new_seqno_A new_seqno_B
      quarantin GETGLOB	//  new_seqno_A new_seqno_B _52
      CTOS	//  new_seqno_A new_seqno_B stored_states
      64 LDU	//  new_seqno_A new_seqno_B _56 stored_states
      LDVARUINT16	//  new_seqno_A new_seqno_B _56 _92 _91
      NIP	//  new_seqno_A new_seqno_B stored_seqno_A stored_states
      1 PUSHINT	//  new_seqno_A new_seqno_B stored_seqno_A stored_states _62=1
      SDSKIPFIRST	//  new_seqno_A new_seqno_B stored_seqno_A stored_states
      64 LDU	//  new_seqno_A new_seqno_B stored_seqno_A _94 _93
      DROP	//  new_seqno_A new_seqno_B stored_seqno_A stored_seqno_B
      s3 s3 XCHG2	//  stored_seqno_B new_seqno_B new_seqno_A stored_seqno_A
      GREATER	//  stored_seqno_B new_seqno_B _71
      s0 s2 XCHG	//  _71 new_seqno_B stored_seqno_B
      GREATER	//  _71 _72
      OR	//  _73
      IF:<{	// 
        PUSHNULL	//  _74
        quarantin SETGLOB
      }>	// 
    }>ELSE<{
      2DROP	// 
    }>
    ACCEPT
    save_storage CALLDICT
  }>
  parse_semichannel_data PROCINLINE:<{
    //  cs
    32 LDU	//  _2 cs
    SWAP
    1130910580 PUSHINT	//  cs _2 _5=1130910580
    EQUAL	//  cs _6
    104 THROWIFNOT
    channel_id GETGLOB	//  cs _9
    SWAP	//  _9 cs
    128 LDU	//  _9 _10 cs
    -ROT	//  cs _9 _10
    EQUAL	//  cs _13
    114 THROWIFNOT
    64 LDU	//  _16 cs
    LDVARUINT16	//  _16 _19 cs
    LDDICT	//  res res res cs
    3 -ROLL	//  cs res res res
  }>
  parse_maybe_semichannel_body PROCINLINE:<{
    //  cs
    1 LDI	//  maybe cs
    SWAP	//  cs maybe
    IFNOT:<{	//  cs
      -1 PUSHINT	//  cs _5=-1
      DUP	//  cs _5=-1 _6=-1
      PUSHNULL	//  cs _5=-1 _6=-1 _7
    }>ELSE<{	//  cs
      LDREF	//  _9 cs
      SWAP	//  cs _9
      CTOS	//  cs body
      64 LDU	//  cs _12 body
      LDVARUINT16	//  cs _12 _15 body
      LDDICT	//  cs _12 _15 _28 _27
      DROP	//  cs _12 _15 _17
    }>
  }>
  start_uncooperative_close PROC:<{
    //  msg
    3 PUSHINT	//  msg _1=3
    load_storage CALLDICT
    quarantin GETGLOB	//  msg _4
    ISNULL	//  msg _5
    106 THROWIFNOT
    1 LDI	//  signed_by_A msg
    9 PUSHPOW2	//  signed_by_A msg _13=512
    LDSLICEX	//  signed_by_A signature msg
    DUP	//  signed_by_A signature msg msg
    HASHSU	//  signed_by_A signature msg _16
    s3 PUSH	//  signed_by_A signature msg _16 signed_by_A
    IF:<{	//  signed_by_A signature msg _16
      key_A GETGLOB	//  signed_by_A signature msg _16 _17
    }>ELSE<{	//  signed_by_A signature msg _16
      key_B GETGLOB	//  signed_by_A signature msg _16 _17
    }>
    s1 s3 s0 XCHG3	//  signed_by_A msg _16 signature _17
    CHKSIGNU	//  signed_by_A msg _20
    101 THROWIFNOT
    32 LDU	//  signed_by_A _23 msg
    SWAP
    1433289580 PUSHINT	//  signed_by_A msg _23 _26=1433289580
    EQUAL	//  signed_by_A msg _27
    104 THROWIFNOT
    channel_id GETGLOB	//  signed_by_A msg _30
    SWAP	//  signed_by_A _30 msg
    128 LDU	//  signed_by_A _30 _31 msg
    -ROT	//  signed_by_A msg _30 _31
    EQUAL	//  signed_by_A msg _34
    114 THROWIFNOT
    LDREF	//  signed_by_A _37 msg
    SWAP	//  signed_by_A msg _37
    CTOS	//  signed_by_A msg semi_channel_A
    9 PUSHPOW2	//  signed_by_A msg semi_channel_A _42=512
    LDSLICEX	//  signed_by_A msg signature_A semi_channel_A
    DUP	//  signed_by_A msg signature_A semi_channel_A semi_channel_A
    HASHSU	//  signed_by_A msg signature_A semi_channel_A _45
    key_A GETGLOB	//  signed_by_A msg signature_A semi_channel_A _45 _46
    s1 s3 s0 XCHG3	//  signed_by_A msg semi_channel_A _45 signature_A _46
    CHKSIGNU	//  signed_by_A msg semi_channel_A _47
    101 THROWIFNOT
    SWAP	//  signed_by_A semi_channel_A msg
    LDREF	//  signed_by_A semi_channel_A _129 _128
    DROP	//  signed_by_A semi_channel_A _50
    CTOS	//  signed_by_A semi_channel_A semi_channel_B
    9 PUSHPOW2	//  signed_by_A semi_channel_A semi_channel_B _55=512
    LDSLICEX	//  signed_by_A semi_channel_A signature_B semi_channel_B
    DUP	//  signed_by_A semi_channel_A signature_B semi_channel_B semi_channel_B
    HASHSU	//  signed_by_A semi_channel_A signature_B semi_channel_B _58
    key_B GETGLOB	//  signed_by_A semi_channel_A signature_B semi_channel_B _58 _59
    s1 s3 s0 XCHG3	//  signed_by_A semi_channel_A semi_channel_B _58 signature_B _59
    CHKSIGNU	//  signed_by_A semi_channel_A semi_channel_B _60
    101 THROWIFNOT
    SWAP	//  signed_by_A semi_channel_B semi_channel_A
    parse_semichannel_data INLINECALLDICT	//  signed_by_A semi_channel_B semi_channel_A _132 _133 _134
    s0 s3 XCHG	//  signed_by_A semi_channel_B _134 _132 _133 semi_channel_A
    parse_maybe_semichannel_body INLINECALLDICT	//  signed_by_A semi_channel_B _134 _132 _133 _142 _143 _144 _145
    DROP
    s2 POP	//  signed_by_A semi_channel_B conditionals_A seqno_A sent_A sent_B_ref_A seqno_B_ref_A
    s0 s5 XCHG	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A semi_channel_B
    parse_semichannel_data INLINECALLDICT	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A semi_channel_B _146 _147 _148
    s0 s3 XCHG	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A _148 _146 _147 semi_channel_B
    parse_maybe_semichannel_body INLINECALLDICT	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A _148 _146 _147 _156 _157 _158 _159
    DROP
    s2 POP	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B
    commited_seqno_A GETGLOB	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _83
    s8 s(-1) PUXC	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B seqno_A _83
    GEQ	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84
    commited_seqno_B GETGLOB	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84 _85
    s5 s(-1) PUXC	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84 seqno_B _85
    GEQ	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84 _86
    AND	//  signed_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _87
    s4 s10 PUXC	//  signed_by_A _87 conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B seqno_B seqno_B_ref_A
    GEQ	//  signed_by_A _87 conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _88
    s1 s10 XCHG	//  signed_by_A seqno_A_ref_B conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B _87 _88
    AND	//  signed_by_A seqno_A_ref_B conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B _89
    s7 s9 PUXC	//  signed_by_A _89 conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A seqno_A_ref_B
    GEQ	//  signed_by_A _89 conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B _90
    s1 s9 XCHG	//  signed_by_A sent_A_ref_B conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B _89 _90
    AND	//  signed_by_A sent_A_ref_B conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B _91
    s1 s4 PUXC	//  signed_by_A sent_A_ref_B conditionals_A seqno_A sent_A _91 conditionals_B seqno_B sent_B sent_B sent_B_ref_A
    GEQ	//  signed_by_A sent_A_ref_B conditionals_A seqno_A sent_A _91 conditionals_B seqno_B sent_B _92
    s1 s4 XCHG	//  signed_by_A sent_A_ref_B conditionals_A seqno_A sent_A sent_B conditionals_B seqno_B _91 _92
    AND	//  signed_by_A sent_A_ref_B conditionals_A seqno_A sent_A sent_B conditionals_B seqno_B _93
    s4 s7 PUXC	//  signed_by_A _93 conditionals_A seqno_A sent_A sent_B conditionals_B seqno_B sent_A sent_A_ref_B
    GEQ	//  signed_by_A _93 conditionals_A seqno_A sent_A sent_B conditionals_B seqno_B _94
    s1 s7 XCHG	//  signed_by_A seqno_B conditionals_A seqno_A sent_A sent_B conditionals_B _93 _94
    AND	//  signed_by_A seqno_B conditionals_A seqno_A sent_A sent_B conditionals_B _95
    105 THROWIFNOT
    FALSE	//  signed_by_A seqno_B conditionals_A seqno_A sent_A sent_B conditionals_B _97
    NOW	//  signed_by_A seqno_B conditionals_A seqno_A sent_A sent_B conditionals_B _97 _98
    s0 s5 XCHG
    NEWC	//  signed_by_A seqno_B conditionals_A _98 sent_A sent_B conditionals_B _97 seqno_A _99
    64 STU	//  signed_by_A seqno_B conditionals_A _98 sent_A sent_B conditionals_B _97 _101
    s0 s4 XCHG2	//  signed_by_A seqno_B conditionals_A _98 _97 sent_B conditionals_B _101 sent_A
    STVARUINT16	//  signed_by_A seqno_B conditionals_A _98 _97 sent_B conditionals_B _102
    s1 s5 XCHG	//  signed_by_A seqno_B conditionals_B _98 _97 sent_B conditionals_A _102
    STDICT	//  signed_by_A seqno_B conditionals_B _98 _97 sent_B _103
    s1 s5 XCHG	//  signed_by_A sent_B conditionals_B _98 _97 seqno_B _103
    64 STU	//  signed_by_A sent_B conditionals_B _98 _97 _105
    s0 s4 XCHG2	//  signed_by_A _97 conditionals_B _98 _105 sent_B
    STVARUINT16	//  signed_by_A _97 conditionals_B _98 _106
    s1 s2 XCHG	//  signed_by_A _97 _98 conditionals_B _106
    STDICT	//  signed_by_A _97 _98 _107
    32 STU	//  signed_by_A _97 _109
    s1 s2 XCHG	//  _97 signed_by_A _109
    1 STI	//  _97 _111
    1 STI	//  _113
    ENDC	//  _114
    quarantin SETGLOB
    save_storage CALLDICT
  }>
  challenge_quarantined_state PROC:<{
    //  msg
    3 PUSHINT	//  msg _1=3
    load_storage CALLDICT
    quarantin GETGLOB	//  msg _4
    ISNULL	//  msg _5
    NOT	//  msg _6
    107 THROWIFNOT
    1 LDI	//  challenged_by_A msg
    9 PUSHPOW2	//  challenged_by_A msg _14=512
    LDSLICEX	//  challenged_by_A signature msg
    DUP	//  challenged_by_A signature msg msg
    HASHSU	//  challenged_by_A signature msg _17
    s3 PUSH	//  challenged_by_A signature msg _17 challenged_by_A
    IF:<{	//  challenged_by_A signature msg _17
      key_A GETGLOB	//  challenged_by_A signature msg _17 _18
    }>ELSE<{	//  challenged_by_A signature msg _17
      key_B GETGLOB	//  challenged_by_A signature msg _17 _18
    }>
    s1 s3 s0 XCHG3	//  challenged_by_A msg _17 signature _18
    CHKSIGNU	//  challenged_by_A msg _21
    101 THROWIFNOT
    32 LDU	//  challenged_by_A _24 msg
    SWAP
    1130915665 PUSHINT	//  challenged_by_A msg _24 _27=1130915665
    EQUAL	//  challenged_by_A msg _28
    104 THROWIFNOT
    channel_id GETGLOB	//  challenged_by_A msg _31
    SWAP	//  challenged_by_A _31 msg
    128 LDU	//  challenged_by_A _31 _32 msg
    -ROT	//  challenged_by_A msg _31 _32
    EQUAL	//  challenged_by_A msg _35
    114 THROWIFNOT
    LDREF	//  challenged_by_A _38 msg
    SWAP	//  challenged_by_A msg _38
    CTOS	//  challenged_by_A msg semi_channel_A
    9 PUSHPOW2	//  challenged_by_A msg semi_channel_A _43=512
    LDSLICEX	//  challenged_by_A msg signature_A semi_channel_A
    DUP	//  challenged_by_A msg signature_A semi_channel_A semi_channel_A
    HASHSU	//  challenged_by_A msg signature_A semi_channel_A _46
    key_A GETGLOB	//  challenged_by_A msg signature_A semi_channel_A _46 _47
    s1 s3 s0 XCHG3	//  challenged_by_A msg semi_channel_A _46 signature_A _47
    CHKSIGNU	//  challenged_by_A msg semi_channel_A _48
    101 THROWIFNOT
    SWAP	//  challenged_by_A semi_channel_A msg
    LDREF	//  challenged_by_A semi_channel_A _201 _200
    DROP	//  challenged_by_A semi_channel_A _51
    CTOS	//  challenged_by_A semi_channel_A semi_channel_B
    9 PUSHPOW2	//  challenged_by_A semi_channel_A semi_channel_B _56=512
    LDSLICEX	//  challenged_by_A semi_channel_A signature_B semi_channel_B
    DUP	//  challenged_by_A semi_channel_A signature_B semi_channel_B semi_channel_B
    HASHSU	//  challenged_by_A semi_channel_A signature_B semi_channel_B _59
    key_B GETGLOB	//  challenged_by_A semi_channel_A signature_B semi_channel_B _59 _60
    s1 s3 s0 XCHG3	//  challenged_by_A semi_channel_A semi_channel_B _59 signature_B _60
    CHKSIGNU	//  challenged_by_A semi_channel_A semi_channel_B _61
    101 THROWIFNOT
    SWAP	//  challenged_by_A semi_channel_B semi_channel_A
    parse_semichannel_data INLINECALLDICT	//  challenged_by_A semi_channel_B semi_channel_A _204 _205 _206
    s0 s3 XCHG	//  challenged_by_A semi_channel_B _206 _204 _205 semi_channel_A
    parse_maybe_semichannel_body INLINECALLDICT	//  challenged_by_A semi_channel_B _206 _204 _205 _214 _215 _216 _217
    DROP
    s2 POP	//  challenged_by_A semi_channel_B conditionals_A seqno_A sent_A sent_B_ref_A seqno_B_ref_A
    s0 s5 XCHG	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A semi_channel_B
    parse_semichannel_data INLINECALLDICT	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A semi_channel_B _218 _219 _220
    s0 s3 XCHG	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A _220 _218 _219 semi_channel_B
    parse_maybe_semichannel_body INLINECALLDICT	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A _220 _218 _219 _228 _229 _230 _231
    DROP
    s2 POP	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B
    s3 s9 PUSH2	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B seqno_B seqno_B_ref_A
    GEQ	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84
    s8 s1 PUSH2	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84 seqno_A seqno_A_ref_B
    GEQ	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _84 _85
    AND	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _86
    commited_seqno_B GETGLOB	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _86 _87
    s5 s(-1) PUXC	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _86 seqno_B _87
    GEQ	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _86 _88
    AND	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _89
    commited_seqno_A GETGLOB	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _89 _90
    s9 s(-1) PUXC	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _89 seqno_A _90
    GEQ	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _89 _91
    AND	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A sent_B_ref_A conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _92
    s3 s6 PUXC	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A _92 conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B sent_B sent_B_ref_A
    GEQ	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A _92 conditionals_B seqno_B sent_B sent_A_ref_B seqno_A_ref_B _93
    s1 s6 XCHG	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B sent_A_ref_B _92 _93
    AND	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B sent_A_ref_B _94
    s6 s1 PUXC	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B _94 sent_A sent_A_ref_B
    GEQ	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B _94 _95
    AND	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B _96
    105 THROWIFNOT
    s7 PUSH	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B seqno_B_ref_A
    0 GTINT	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B _99
    IF:<{	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B
      commited_seqno_B GETGLOB	//  challenged_by_A seqno_B_ref_A conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B sent_B _101
      s1 s8 XCHG	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B seqno_B_ref_A _101
      GEQ	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B _102
      105 THROWIFNOT
    }>ELSE<{
      s7 POP	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B
    }>
    s2 PUSH	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B seqno_A_ref_B
    0 GTINT	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B _105
    IF:<{	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B
      commited_seqno_A GETGLOB	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_A_ref_B conditionals_B seqno_B _107
      s1 s3 XCHG	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B seqno_A_ref_B _107
      GEQ	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B _108
      105 THROWIFNOT
    }>ELSE<{
      s2 POP	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B
    }>
    quarantin GETGLOB	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B _111
    CTOS	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_states
    64 LDU	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B _115 stored_states
    LDVARUINT16	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_states
    LDDICT	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_states
    64 LDU	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A _125 stored_states
    LDVARUINT16	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_states
    LDDICT	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B stored_states
    32 LDU	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started stored_states
    closure_config::quarantin_duration INLINECALLDICT	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started stored_states _138
    s2 s(-1) PUXC	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started stored_states quarantine_started _138
    ADD	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started stored_states _139
    NOW	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started stored_states _139 _140
    GREATER	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started stored_states _141
    111 THROWIFNOT
    1 LDI	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A stored_states
    1 LDI	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A _249 _248
    DROP	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A quarantine_challenged
    NOT	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A _152
    115 THROWIFNOT
    DUP	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A prev_signed_by_A
    IF:<{	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A
      s5 POP
      s7 POP
      s7 POP
      s10 POP	//  challenged_by_A stored_sent_B conditionals_A seqno_A sent_A stored_conditionals_B quarantine_started stored_seqno_A stored_sent_A prev_signed_by_A stored_seqno_B
      s7 s3 PUXC	//  challenged_by_A stored_sent_B conditionals_A seqno_A sent_A stored_conditionals_B quarantine_started stored_seqno_B stored_sent_A prev_signed_by_A seqno_A stored_seqno_A
      GREATER	//  challenged_by_A stored_sent_B conditionals_A seqno_A sent_A stored_conditionals_B quarantine_started stored_seqno_B stored_sent_A prev_signed_by_A _156
      s6 s2 PUXC	//  challenged_by_A stored_sent_B conditionals_A seqno_A sent_A stored_conditionals_B quarantine_started stored_seqno_B _156 prev_signed_by_A sent_A stored_sent_A
      GREATER	//  challenged_by_A stored_sent_B conditionals_A seqno_A sent_A stored_conditionals_B quarantine_started stored_seqno_B _156 prev_signed_by_A _157
      s1 s2 XCHG	//  challenged_by_A stored_sent_B conditionals_A seqno_A sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A _156 _157
      OR	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A misbehavior_detected
    }>ELSE<{	//  challenged_by_A sent_B conditionals_A seqno_A sent_A seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B stored_sent_B stored_conditionals_B quarantine_started prev_signed_by_A
      s2 POP
      s9 POP
      s9 POP
      s9 POP	//  challenged_by_A sent_B stored_sent_B prev_signed_by_A quarantine_started seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A stored_seqno_B
      s5 s(-1) PUXC	//  challenged_by_A sent_B stored_sent_B prev_signed_by_A quarantine_started seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A seqno_B stored_seqno_B
      GREATER	//  challenged_by_A sent_B stored_sent_B prev_signed_by_A quarantine_started seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A _159
      s9 s8 PUXC	//  challenged_by_A sent_B _159 prev_signed_by_A quarantine_started seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A sent_B stored_sent_B
      GREATER	//  challenged_by_A sent_B _159 prev_signed_by_A quarantine_started seqno_B conditionals_B stored_seqno_A stored_sent_A stored_conditionals_A _160
      s1 s8 XCHG	//  challenged_by_A sent_B stored_conditionals_A prev_signed_by_A quarantine_started seqno_B conditionals_B stored_seqno_A stored_sent_A _159 _160
      OR	//  challenged_by_A stored_sent_B stored_conditionals_A prev_signed_by_A quarantine_started stored_seqno_B stored_conditionals_B stored_seqno_A stored_sent_A misbehavior_detected
      s6 s5 s0 XCHG3
      s1 s3 XCHG
      s4 s4 s0 XCHG3	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A misbehavior_detected
    }>
    s1 s9 PUSH2	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A misbehavior_detected prev_signed_by_A challenged_by_A
    EQUAL	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A misbehavior_detected _163
    NOT	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A misbehavior_detected _164
    109 THROWIFNOT
    IF:<{	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B prev_signed_by_A
      IF:<{	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B
        closure_config::misbehavior_fine INLINECALLDICT	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B _166
        s1 s4 XCHG	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_seqno_B stored_conditionals_B quarantine_started stored_sent_A _166
        ADD	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_seqno_B stored_conditionals_B quarantine_started stored_sent_A
      }>ELSE<{	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B
        closure_config::misbehavior_fine INLINECALLDICT	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B _168
        s1 s7 XCHG	//  challenged_by_A stored_seqno_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_sent_B _168
        ADD	//  challenged_by_A stored_seqno_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_sent_B
        s0 s6 XCHG
        s0 s3 XCHG	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_seqno_B stored_conditionals_B quarantine_started stored_sent_A
      }>
      s0 s3 XCHG	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B
    }>ELSE<{
      DROP	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B
    }>
    TRUE	//  challenged_by_A stored_sent_B stored_conditionals_A stored_seqno_A stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B _170
    s0 s5 XCHG
    NEWC	//  challenged_by_A stored_sent_B stored_conditionals_A _170 stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B stored_seqno_A _171
    64 STU	//  challenged_by_A stored_sent_B stored_conditionals_A _170 stored_sent_A stored_conditionals_B quarantine_started stored_seqno_B _173
    s0 s4 XCHG2	//  challenged_by_A stored_sent_B stored_conditionals_A _170 stored_seqno_B stored_conditionals_B quarantine_started _173 stored_sent_A
    STVARUINT16	//  challenged_by_A stored_sent_B stored_conditionals_A _170 stored_seqno_B stored_conditionals_B quarantine_started _174
    s1 s5 XCHG	//  challenged_by_A stored_sent_B quarantine_started _170 stored_seqno_B stored_conditionals_B stored_conditionals_A _174
    STDICT	//  challenged_by_A stored_sent_B quarantine_started _170 stored_seqno_B stored_conditionals_B _175
    s1 s2 XCHG	//  challenged_by_A stored_sent_B quarantine_started _170 stored_conditionals_B stored_seqno_B _175
    64 STU	//  challenged_by_A stored_sent_B quarantine_started _170 stored_conditionals_B _177
    s0 s4 XCHG2	//  challenged_by_A stored_conditionals_B quarantine_started _170 _177 stored_sent_B
    STVARUINT16	//  challenged_by_A stored_conditionals_B quarantine_started _170 _178
    s1 s3 XCHG	//  challenged_by_A _170 quarantine_started stored_conditionals_B _178
    STDICT	//  challenged_by_A _170 quarantine_started _179
    32 STU	//  challenged_by_A _170 _181
    s1 s2 XCHG	//  _170 challenged_by_A _181
    1 STI	//  _170 _183
    1 STI	//  _185
    ENDC	//  _186
    quarantin SETGLOB
    save_storage CALLDICT
  }>
  settle_conditionals PROC:<{
    //  msg
    3 PUSHINT	//  msg _1=3
    load_storage CALLDICT
    quarantin GETGLOB	//  msg _4
    ISNULL	//  msg _5
    NOT	//  msg _6
    107 THROWIFNOT
    1 LDI	//  from_A msg
    9 PUSHPOW2	//  from_A msg _14=512
    LDSLICEX	//  from_A signature msg
    DUP	//  from_A signature msg msg
    HASHSU	//  from_A signature msg _17
    s3 PUSH	//  from_A signature msg _17 from_A
    IF:<{	//  from_A signature msg _17
      key_A GETGLOB	//  from_A signature msg _17 _18
    }>ELSE<{	//  from_A signature msg _17
      key_B GETGLOB	//  from_A signature msg _17 _18
    }>
    s1 s3 s0 XCHG3	//  from_A msg _17 signature _18
    CHKSIGNU	//  from_A msg _21
    101 THROWIFNOT
    32 LDU	//  from_A _24 msg
    SWAP
    1131168622 PUSHINT	//  from_A msg _24 _27=1131168622
    EQUAL	//  from_A msg _28
    104 THROWIFNOT
    channel_id GETGLOB	//  from_A msg _31
    SWAP	//  from_A _31 msg
    128 LDU	//  from_A _31 _32 msg
    -ROT	//  from_A msg _31 _32
    EQUAL	//  from_A msg _35
    114 THROWIFNOT
    LDDICT	//  from_A _130 _129
    DROP	//  from_A conditionals_to_settle
    quarantin GETGLOB	//  from_A conditionals_to_settle _41
    CTOS	//  from_A conditionals_to_settle stored_states
    64 LDU	//  from_A conditionals_to_settle _46 stored_states
    LDVARUINT16	//  from_A conditionals_to_settle _46 _49 stored_states
    LDDICT	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A stored_states
    64 LDU	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A _56 stored_states
    LDVARUINT16	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A _56 _59 stored_states
    LDDICT	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B stored_states
    32 LDU	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states
    closure_config::quarantin_duration INLINECALLDICT	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states _68
    s2 s(-1) PUXC	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states quarantine_started _68
    ADD	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states quarantine_finished
    DUP
    NOW	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states quarantine_finished quarantine_finished _71
    LESS	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states quarantine_finished _72
    110 THROWIFNOT
    closure_config::conditional_close_duration INLINECALLDICT	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states quarantine_finished _75
    ADD	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states _76
    NOW	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states _76 _77
    GREATER	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started stored_states _78
    112 THROWIFNOT
    1 LDI	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started _146 _145
    DROP	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A
    s5 s6 s9 PUSH3	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target target_sent from_A
    IF:<{	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target target_sent
      2DROP	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A
      s2 s3 PUSH2	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target target_sent
    }>	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target target_sent
    UNTIL:<{
      s0 s10 XCHG
      32 PUSHINT	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle _91=32
      DICTUREMMIN
      NULLSWAPIFNOT2	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle input cid continue
      DUP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle input cid continue continue
      IF:<{	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle input cid continue
        DROP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle input cid
        s0 s3 XCHG2
        32 PUSHINT	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle cid target _95=32
        DICTUDELGET
        NULLSWAPIFNOT	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle target condition continue
        DUP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle target condition continue continue
        IF:<{	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle target condition continue
          SWAP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle target continue condition
          LDVARUINT16	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle target continue amount condition
          BLESS	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A input conditionals_to_settle target continue amount executable_condition
          s1 s5 XCHG	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A amount conditionals_to_settle target continue input executable_condition
          1 1 CALLXARGS	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A amount conditionals_to_settle target continue _103
          IF:<{	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A amount conditionals_to_settle target continue
            s12 s3 XCHG2	//  from_A target seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A continue conditionals_to_settle target_sent amount
            ADD	//  from_A target seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A continue conditionals_to_settle target_sent
            s0 s11 XCHG	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A continue conditionals_to_settle target
          }>ELSE<{
            s3 POP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A continue conditionals_to_settle target
          }>
        }>ELSE<{
          s4 POP
          DROP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A continue conditionals_to_settle target
        }>
        s0 s2 XCHG	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle continue
      }>ELSE<{
        2 1 BLKDROP2	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle continue
      }>
      NOT	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target conditionals_to_settle _105
      s1 s11 XCHG	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target target_sent _105
    }>	//  from_A conditionals_to_settle seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target target_sent
    s10 POP	//  from_A target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A target
    s0 s10 XCHG	//  target target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A from_A
    IF:<{	//  target target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A
      2 2 BLKDROP2	//  conditionals_B sent_B seqno_A sent_A conditionals_A seqno_B quarantine_started state_commited_by_A
    }>ELSE<{	//  target target_sent seqno_A sent_A conditionals_A seqno_B sent_B conditionals_B quarantine_started state_commited_by_A
      s5 POP
      s5 POP	//  conditionals_A sent_A seqno_A quarantine_started state_commited_by_A seqno_B sent_B conditionals_B
      s0 s7 XCHG
      s6 s3 XCHG2
      s1 s4 XCHG	//  conditionals_B sent_B seqno_A sent_A conditionals_A seqno_B quarantine_started state_commited_by_A
    }>
    s0 s5 XCHG
    NEWC	//  conditionals_B sent_B state_commited_by_A sent_A conditionals_A seqno_B quarantine_started seqno_A _106
    64 STU	//  conditionals_B sent_B state_commited_by_A sent_A conditionals_A seqno_B quarantine_started _108
    s0 s4 XCHG2	//  conditionals_B sent_B state_commited_by_A quarantine_started conditionals_A seqno_B _108 sent_A
    STVARUINT16	//  conditionals_B sent_B state_commited_by_A quarantine_started conditionals_A seqno_B _109
    s1 s2 XCHG	//  conditionals_B sent_B state_commited_by_A quarantine_started seqno_B conditionals_A _109
    STDICT	//  conditionals_B sent_B state_commited_by_A quarantine_started seqno_B _110
    64 STU	//  conditionals_B sent_B state_commited_by_A quarantine_started _112
    s0 s3 XCHG2	//  conditionals_B quarantine_started state_commited_by_A _112 sent_B
    STVARUINT16	//  conditionals_B quarantine_started state_commited_by_A _113
    s1 s3 XCHG	//  state_commited_by_A quarantine_started conditionals_B _113
    STDICT	//  state_commited_by_A quarantine_started _114
    32 STU	//  state_commited_by_A _116
    1 STI	//  _118
    ENDC	//  _119
    quarantin SETGLOB
    save_storage CALLDICT
  }>
  finish_uncooperative_close PROC:<{
    // 
    4 PUSHINT	//  _0=4
    load_storage CALLDICT
    quarantin GETGLOB	//  _3
    ISNULL	//  _4
    NOT	//  _5
    107 THROWIFNOT
    quarantin GETGLOB	//  _8
    CTOS	//  stored_states
    64 LDU	//  _13 stored_states
    LDVARUINT16	//  _13 _16 stored_states
    LDDICT	//  _13 _16 _73 _72
    NIP	//  seqno_A sent_A stored_states
    64 LDU	//  seqno_A sent_A _23 stored_states
    LDVARUINT16	//  seqno_A sent_A _23 _26 stored_states
    LDDICT	//  seqno_A sent_A _23 _26 _79 _78
    NIP	//  seqno_A sent_A seqno_B sent_B stored_states
    32 LDU	//  seqno_A sent_A seqno_B sent_B _81 _80
    DROP	//  seqno_A sent_A seqno_B sent_B quarantine_started
    closure_config::quarantin_duration INLINECALLDICT	//  seqno_A sent_A seqno_B sent_B quarantine_started _35
    ADD	//  seqno_A sent_A seqno_B sent_B _36
    closure_config::conditional_close_duration INLINECALLDICT	//  seqno_A sent_A seqno_B sent_B _36 _37
    ADD	//  seqno_A sent_A seqno_B sent_B _38
    NOW	//  seqno_A sent_A seqno_B sent_B _38 _39
    LESS	//  seqno_A sent_A seqno_B sent_B _40
    113 THROWIFNOT
    ACCEPT
    balance_A GETGLOB	//  seqno_A sent_A seqno_B sent_B _43
    OVER	//  seqno_A sent_A seqno_B sent_B _43 sent_B
    ADD	//  seqno_A sent_A seqno_B sent_B _44
    s3 PUSH	//  seqno_A sent_A seqno_B sent_B _44 sent_A
    SUB	//  seqno_A sent_A seqno_B sent_B _45
    balance_A SETGLOB
    balance_B GETGLOB	//  seqno_A sent_A seqno_B sent_B _46
    s0 s3 XCHG2	//  seqno_A sent_B seqno_B _46 sent_A
    ADD	//  seqno_A sent_B seqno_B _47
    ROT	//  seqno_A seqno_B _47 sent_B
    SUB	//  seqno_A seqno_B _48
    balance_B SETGLOB
    balance_B GETGLOB	//  seqno_A seqno_B _49
    0 LESSINT	//  seqno_A seqno_B _51
    IF:<{	//  seqno_A seqno_B
      balance_A GETGLOB	//  seqno_A seqno_B _52
      balance_B GETGLOB	//  seqno_A seqno_B _52 _53
      ADD	//  seqno_A seqno_B _54
      balance_A SETGLOB
      0 PUSHINT	//  seqno_A seqno_B _55=0
      balance_B SETGLOB
    }>	//  seqno_A seqno_B
    balance_A GETGLOB	//  seqno_A seqno_B _56
    0 LESSINT	//  seqno_A seqno_B _58
    IF:<{	//  seqno_A seqno_B
      balance_B GETGLOB	//  seqno_A seqno_B _59
      balance_A GETGLOB	//  seqno_A seqno_B _59 _60
      ADD	//  seqno_A seqno_B _61
      balance_B SETGLOB
      0 PUSHINT	//  seqno_A seqno_B _62=0
      balance_B SETGLOB
    }>	//  seqno_A seqno_B
    SWAP	//  seqno_B seqno_A
    INC	//  seqno_B _64
    commited_seqno_A SETGLOB
    INC	//  _66
    commited_seqno_B SETGLOB
    close_channel CALLDICT
  }>
  recv_any PROC:<{
    SAMEALTSAVE	//  contract_balance msg
    32 LDU	//  contract_balance op msg
    OVER
    1741148801 PUSHINT	//  contract_balance op msg op _6=1741148801
    EQUAL	//  contract_balance op msg _7
    IFJMP:<{	//  contract_balance op msg
      NIP	//  contract_balance msg
      top_up_balance CALLDICT
    }>	//  contract_balance op msg
    OVER
    235282626 PUSHINT	//  contract_balance op msg op _9=235282626
    EQUAL	//  contract_balance op msg _10
    IFJMP:<{	//  contract_balance op msg
      NIP	//  contract_balance msg
      init_channel CALLDICT
      RETALT
    }>	//  contract_balance op msg
    s2 POP	//  msg op
    DUP
    1433884798 PUSHINT	//  msg op op _12=1433884798
    EQUAL	//  msg op _13
    IFJMP:<{	//  msg op
      DROP	//  msg
      cooperative_close CALLDICT
      RETALT
    }>	//  msg op
    DUP
    2040604399 PUSHINT	//  msg op op _15=2040604399
    EQUAL	//  msg op _16
    IFJMP:<{	//  msg op
      DROP	//  msg
      cooperative_commit CALLDICT
      RETALT
    }>	//  msg op
    DUP
    521476815 PUSHINT	//  msg op op _18=521476815
    EQUAL	//  msg op _19
    IFJMP:<{	//  msg op
      DROP	//  msg
      start_uncooperative_close CALLDICT
      RETALT
    }>	//  msg op
    DUP
    143567410 PUSHINT	//  msg op op _21=143567410
    EQUAL	//  msg op _22
    IFJMP:<{	//  msg op
      DROP	//  msg
      challenge_quarantined_state CALLDICT
      RETALT
    }>	//  msg op
    DUP
    1727459433 PUSHINT	//  msg op op _24=1727459433
    EQUAL	//  msg op _25
    IFJMP:<{	//  msg op
      DROP	//  msg
      settle_conditionals CALLDICT
      RETALT
    }>	//  msg op
    NIP	//  op
    625158801 PUSHINT	//  op _27=625158801
    EQUAL	//  _28
    IFJMP:<{	// 
      finish_uncooperative_close CALLDICT
      RETALT
    }>	// 
    16 PUSHPOW2DEC	//  _30=65535
    THROWANY
  }>
  recv_internal PROC:<{
    //  contract_balance _1 _2 in_msg
    2 1 BLKDROP2	//  contract_balance in_msg
    recv_any CALLDICT
  }>
  recv_external PROC:<{
    //  contract_balance _1 _2 in_msg
    2 1 BLKDROP2	//  contract_balance in_msg
    recv_any CALLDICT
  }>
  get_channel_state PROC:<{
    // 
    4 PUSHINT	//  _0=4
    load_storage CALLDICT
    inited GETGLOB	//  _2
    IFNOTJMP:<{	// 
      0 PUSHINT	//  _3=0
    }>	// 
    quarantin GETGLOB	//  _4
    ISNULL	//  _5
    IFJMP:<{	// 
      1 PUSHINT	//  _6=1
    }>	// 
    quarantin GETGLOB	//  _8
    CTOS	//  stored_states
    64 PUSHINT	//  stored_states _11=64
    SDSKIPFIRST	//  stored_states
    LDVARUINT16	//  _43 _42
    NIP	//  stored_states
    65 PUSHINT	//  stored_states _18
    SDSKIPFIRST	//  stored_states
    LDVARUINT16	//  _45 _44
    NIP	//  stored_states
    1 PUSHINT	//  stored_states _23=1
    SDSKIPFIRST	//  stored_states
    32 LDU	//  _47 _46
    DROP	//  quarantine_started
    closure_config::quarantin_duration INLINECALLDICT	//  quarantine_started _29
    s1 s(-1) PUXC	//  quarantine_started quarantine_started _29
    ADD	//  quarantine_started _30
    NOW	//  quarantine_started _30 _31
    GREATER	//  quarantine_started _32
    IFJMP:<{	//  quarantine_started
      DROP	// 
      2 PUSHINT	//  _33=2
    }>	//  quarantine_started
    closure_config::quarantin_duration INLINECALLDICT	//  quarantine_started _34
    ADD	//  _35
    closure_config::conditional_close_duration INLINECALLDICT	//  _35 _36
    ADD	//  _37
    NOW	//  _37 _38
    GREATER	//  _39
    IFJMP:<{	// 
      3 PUSHINT	//  _40=3
    }>	// 
    4 PUSHINT	//  _41=4
  }>
  get_channel_data PROC:<{
    // 
    4 PUSHINT	//  _0=4
    load_storage CALLDICT
    payment_config GETGLOB	//  _3
    CTOS	//  pcs
    LDVARUINT16	//  excess_fee pcs
    LDMSGADDR	//  excess_fee _10 pcs
    LDMSGADDR	//  excess_fee _10 _33 _32
    DROP	//  excess_fee addr_A addr_B
    get_channel_state CALLDICT	//  excess_fee addr_A addr_B _14
    balance_A GETGLOB	//  excess_fee addr_A addr_B _14 _16
    balance_B GETGLOB	//  excess_fee addr_A addr_B _14 _16 _17
    PAIR	//  excess_fee addr_A addr_B _14 _15
    key_A GETGLOB	//  excess_fee addr_A addr_B _14 _15 _19
    key_B GETGLOB	//  excess_fee addr_A addr_B _14 _15 _19 _20
    PAIR	//  excess_fee addr_A addr_B _14 _15 _18
    channel_id GETGLOB	//  excess_fee addr_A addr_B _14 _15 _18 _21
    closure_config GETGLOB	//  excess_fee addr_A addr_B _14 _15 _18 _21 _22
    commited_seqno_A GETGLOB	//  excess_fee addr_A addr_B _14 _15 _18 _21 _22 _24
    commited_seqno_B GETGLOB	//  excess_fee addr_A addr_B _14 _15 _18 _21 _22 _24 _25
    PAIR	//  excess_fee addr_A addr_B _14 _15 _18 _21 _22 _23
    quarantin GETGLOB	//  excess_fee addr_A addr_B _14 _15 _18 _21 _22 _23 _26
    s9 s8 s7 XCHG3	//  _22 _23 _26 _14 _15 _18 _21 excess_fee addr_A addr_B
    TRIPLE	//  _22 _23 _26 _14 _15 _18 _21 _27
    s4 s7 XCHG
    s3 s6 XCHG
    s5 s4 s0 XCHG3
    s3 s3 s0 XCHG3	//  _14 _15 _18 _21 _22 _23 _26 _27
  }>
  set_uninit_state PROC:<{
    //  seqno_A seqno_B
    3600 PUSHINT	//  seqno_A seqno_B _3=3600
    86400 PUSHINT	//  seqno_A seqno_B _3=3600 _4=86400
    NEWC	//  seqno_A seqno_B _3=3600 _4=86400 _5
    32 STU	//  seqno_A seqno_B _3=3600 _7
    30000000 PUSHINT	//  seqno_A seqno_B _3=3600 _7 _8=30000000
    STVARUINT16	//  seqno_A seqno_B _3=3600 _9
    32 STU	//  seqno_A seqno_B _11
    ENDC	//  seqno_A seqno_B config
    NEWC	//  seqno_A seqno_B config _13
    30000000 PUSHINT	//  seqno_A seqno_B config _13 _14=30000000
    STVARUINT16	//  seqno_A seqno_B config _15
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  seqno_A seqno_B config _15 _16
    STSLICER	//  seqno_A seqno_B config _17
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  seqno_A seqno_B config _17 _18
    STSLICER	//  seqno_A seqno_B config _19
    ENDC	//  seqno_A seqno_B config _20
    payment_config SETGLOB
    payment_config GETGLOB	//  seqno_A seqno_B config _22
    PUSHNULL	//  seqno_A seqno_B config _22 _23
    931 PUSHINT	//  seqno_A seqno_B config _22 _23 _24=931
    3456 PUSHINT	//  seqno_A seqno_B config _22 _23 _24=931 _25=3456
    PRIVTOPUB	//  seqno_A seqno_B config _22 _23 _24=931 _26
    777 PUSHINT	//  seqno_A seqno_B config _22 _23 _24=931 _26 _27=777
    PRIVTOPUB	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28
    0 PUSHINT	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _29=0
    NEWC	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _29=0 _30
    1 STI	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _32
    0 PUSHINT	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _32 _33=0
    STVARUINT16	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _34
    0 PUSHINT	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _34 _35=0
    STVARUINT16	//  seqno_A seqno_B config _22 _23 _24=931 _26 _28 _36
    256 STU	//  seqno_A seqno_B config _22 _23 _24=931 _26 _38
    256 STU	//  seqno_A seqno_B config _22 _23 _24=931 _40
    128 STU	//  seqno_A seqno_B config _22 _23 _42
    s3 s(-1) PUXC	//  seqno_A seqno_B config _22 _23 config _42
    STREF	//  seqno_A seqno_B config _22 _23 _43
    s1 s5 XCHG	//  _23 seqno_B config _22 seqno_A _43
    32 STU	//  _23 seqno_B config _22 _45
    s1 s3 XCHG	//  _23 _22 config seqno_B _45
    32 STU	//  _23 _22 config _47
    s1 s3 XCHG	//  config _22 _23 _47
    STDICT	//  config _22 _48
    STREF	//  config _49
    ENDC	//  config result_state
    DUP	//  config result_state result_state
    c4 POP
    payment_config GETGLOB	//  config result_state _52
    SWAP	//  config _52 result_state
  }>
  __test_uninit PROC:<{
    // 
    0 PUSHINT	//  _0=0
    DUP	//  _0=0 _1=0
    set_uninit_state CALLDICT	//  _15 _16 _17
    3 BLKDROP	// 
    CONT:<{
      get_channel_state CALLDICT
    }>	//  _5
    0 TUPLE	//  _5 _6
    invoke_method CALLDICT	//  _18 _19
    NIP	//  stack
    UNSINGLE	//  state
    9001 PUSHINT	//  state _10=9001
    SWAP	//  _10=9001 state
    0 EQINT	//  _10=9001 _12
    THROWANYIFNOT
    TRUE	//  _14
  }>
  __test_alice_top_up_uninit PROC:<{
    // 
    0 PUSHINT	//  _0=0
    DUP	//  _0=0 _1=0
    set_uninit_state CALLDICT	//  _22 _23 _24
    3 BLKDROP	// 
    5000000000 PUSHINT	//  contract_balance=5000000000
    1741148801 PUSHINT	//  contract_balance=5000000000 _6=1741148801
    NEWC	//  contract_balance=5000000000 _6=1741148801 _7
    32 STU	//  contract_balance=5000000000 _9
    322 PUSHINT	//  contract_balance=5000000000 _9 _10=322
    STVARUINT16	//  contract_balance=5000000000 _11
    1322 PUSHINT	//  contract_balance=5000000000 _11 _12=1322
    STVARUINT16	//  contract_balance=5000000000 _13
    ENDC	//  contract_balance=5000000000 _14
    CTOS	//  contract_balance=5000000000 message_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  contract_balance=5000000000 message_body _16
    s1 s2 XCHG
    PUSHNULL
    PUSHNULL
    ROT
    s0 s4 XCHG	//  _16 contract_balance=5000000000 _18 _19 message_body
    4 TUPLE	//  _16 _17
    invoke_method CALLDICT	//  _25 _26
    2DROP	// 
    TRUE	//  _21
  }>
  __test_alice_top_up_uninit_wants_too_much PROC:<{
    // 
    0 PUSHINT	//  _0=0
    DUP	//  _0=0 _1=0
    set_uninit_state CALLDICT	//  _21 _22 _23
    3 BLKDROP	// 
    5000000000 PUSHINT	//  contract_balance=5000000000
    1741148801 PUSHINT	//  contract_balance=5000000000 _6=1741148801
    NEWC	//  contract_balance=5000000000 _6=1741148801 _7
    32 STU	//  contract_balance=5000000000 _9
    OVER	//  contract_balance=5000000000 _9 contract_balance=5000000000
    STVARUINT16	//  contract_balance=5000000000 _10
    1322 PUSHINT	//  contract_balance=5000000000 _10 _11=1322
    STVARUINT16	//  contract_balance=5000000000 _12
    ENDC	//  contract_balance=5000000000 _13
    CTOS	//  contract_balance=5000000000 message_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  contract_balance=5000000000 message_body _15
    s1 s2 XCHG
    PUSHNULL
    PUSHNULL
    ROT
    s0 s4 XCHG	//  _15 contract_balance=5000000000 _17 _18 message_body
    4 TUPLE	//  _15 _16
    invoke_method_expect_fail CALLDICT	//  _19
    DROP	// 
    TRUE	//  _20
  }>
  __test_alice_init_state PROC:<{
    // 
    7 PUSHINT	//  _3=7
    11 PUSHINT	//  _3=7 _4=11
    set_uninit_state CALLDICT	//  _186 _187 _188
    3 BLKDROP	// 
    5000000000 PUSHINT	//  initial_contract_balance=5000000000
    1741148801 PUSHINT	//  initial_contract_balance=5000000000 _9=1741148801
    NEWC	//  initial_contract_balance=5000000000 _9=1741148801 _10
    32 STU	//  initial_contract_balance=5000000000 _12
    4940000000 PUSHINT	//  initial_contract_balance=5000000000 _12 _16
    STVARUINT16	//  initial_contract_balance=5000000000 _17
    1322 PUSHINT	//  initial_contract_balance=5000000000 _17 _18=1322
    STVARUINT16	//  initial_contract_balance=5000000000 _19
    ENDC	//  initial_contract_balance=5000000000 _20
    CTOS	//  initial_contract_balance=5000000000 top_up_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  initial_contract_balance=5000000000 top_up_body _22
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _22 _24
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _22 _24 _25
    s4 PUSH
    s0 s3 XCHG
    s0 s4 XCHG	//  initial_contract_balance=5000000000 _22 initial_contract_balance=5000000000 _24 _25 top_up_body
    4 TUPLE	//  initial_contract_balance=5000000000 _22 _23
    1 2 BLKDROP2	//  _22 _23
    invoke_method CALLDICT	//  _189 _190
    2DROP	// 
    931 PUSHINT	//  _30=931
    1768843636 PUSHINT	//  _30=931 _31=1768843636
    NEWC	//  _30=931 _31=1768843636 _32
    32 STU	//  _30=931 _34
    128 STU	//  _36
    7940000000 PUSHINT	//  _36 _41
    STVARUINT16	//  _42
    1322 PUSHINT	//  _42 _43=1322
    STVARUINT16	//  _44
    ENDC	//  _45
    CTOS	//  payload
    TRUE	//  payload _48
    235282626 PUSHINT	//  payload _48 _49=235282626
    NEWC	//  payload _48 _49=235282626 _50
    32 STU	//  payload _48 _52
    1 STI	//  payload _54
    OVER	//  payload _54 payload
    HASHSU	//  payload _54 _55
    777 PUSHINT	//  payload _54 _55 _56=777
    SIGN	//  payload _54 _57
    STSLICER	//  payload _58
    SWAP	//  _58 payload
    STSLICER	//  _59
    ENDC	//  _60
    CTOS	//  init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  init_body _62
    8000000000 PUSHINT	//  init_body _62 _64
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _62 _64 _65 _66 init_body
    4 TUPLE	//  _62 _63
    invoke_method CALLDICT	//  _191 _192
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _70
    0 TUPLE	//  _70 _71
    invoke_method CALLDICT	//  _193 _194
    NIP	//  stack
    9001 PUSHINT	//  stack _73=9001
    OVER	//  stack _73=9001 stack
    FIRST	//  stack _73=9001 _74
    1 EQINT	//  stack _73=9001 _76
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _80=1
    INDEXVAR	//  stack _81
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _83=9002
    s0 s2 XCHG
    7940000000 PUSHINT	//  stack _83=9002 r_bB r_bA _88
    EQUAL	//  stack _83=9002 r_bB _89
    s1 s2 XCHG	//  stack r_bB _83=9002 _89
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _91=9003
    SWAP
    1322 PUSHINT	//  stack _91=9003 r_bB _92=1322
    EQUAL	//  stack _91=9003 _93
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _97=2
    INDEXVAR	//  stack _98
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _100=9004
    777 PUSHINT	//  stack r_pkA r_pkB _100=9004 _101=777
    PRIVTOPUB	//  stack r_pkA r_pkB _100=9004 _102
    s1 s3 XCHG	//  stack _100=9004 r_pkB r_pkA _102
    EQUAL	//  stack _100=9004 r_pkB _103
    s1 s2 XCHG	//  stack r_pkB _100=9004 _103
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _105=9005
    3456 PUSHINT	//  stack r_pkB _105=9005 _106=3456
    PRIVTOPUB	//  stack r_pkB _105=9005 _107
    s1 s2 XCHG	//  stack _105=9005 r_pkB _107
    EQUAL	//  stack _105=9005 _108
    THROWANYIFNOT
    9006 PUSHINT	//  stack _110=9006
    OVER
    3 PUSHINT	//  stack _110=9006 stack _111=3
    INDEXVAR	//  stack _110=9006 _112
    931 PUSHINT	//  stack _110=9006 _112 _113=931
    EQUAL	//  stack _110=9006 _114
    THROWANYIFNOT
    9007 PUSHINT	//  stack _116=9007
    OVER
    4 PUSHINT	//  stack _116=9007 stack _117=4
    INDEXVAR	//  stack _116=9007 _118
    0 PUSHINT	//  stack _116=9007 _118 _119=0
    INDEXVAR	//  stack _116=9007 _120
    86400 PUSHINT	//  stack _116=9007 _120 _121=86400
    EQUAL	//  stack _116=9007 _122
    THROWANYIFNOT
    9007 PUSHINT	//  stack _124=9007
    OVER
    4 PUSHINT	//  stack _124=9007 stack _125=4
    INDEXVAR	//  stack _124=9007 _126
    1 PUSHINT	//  stack _124=9007 _126 _127=1
    INDEXVAR	//  stack _124=9007 _128
    30000000 PUSHINT	//  stack _124=9007 _128 _129=30000000
    EQUAL	//  stack _124=9007 _130
    THROWANYIFNOT
    9007 PUSHINT	//  stack _132=9007
    OVER
    4 PUSHINT	//  stack _132=9007 stack _133=4
    INDEXVAR	//  stack _132=9007 _134
    2 PUSHINT	//  stack _132=9007 _134 _135=2
    INDEXVAR	//  stack _132=9007 _136
    3600 PUSHINT	//  stack _132=9007 _136 _137=3600
    EQUAL	//  stack _132=9007 _138
    THROWANYIFNOT
    9008 PUSHINT	//  stack _140=9008
    OVER
    5 PUSHINT	//  stack _140=9008 stack _141=5
    INDEXVAR	//  stack _140=9008 _142
    0 PUSHINT	//  stack _140=9008 _142 _143=0
    INDEXVAR	//  stack _140=9008 _144
    7 EQINT	//  stack _140=9008 _146
    THROWANYIFNOT
    9008 PUSHINT	//  stack _148=9008
    OVER
    5 PUSHINT	//  stack _148=9008 stack _149=5
    INDEXVAR	//  stack _148=9008 _150
    1 PUSHINT	//  stack _148=9008 _150 _151=1
    INDEXVAR	//  stack _148=9008 _152
    11 EQINT	//  stack _148=9008 _154
    THROWANYIFNOT
    9009 PUSHINT	//  stack _156=9009
    OVER
    6 PUSHINT	//  stack _156=9009 stack _157=6
    INDEXVAR	//  stack _156=9009 _158
    ISNULL	//  stack _156=9009 _159
    THROWANYIFNOT
    9010 PUSHINT	//  stack _161=9010
    OVER
    7 PUSHINT	//  stack _161=9010 stack _162=7
    INDEXVAR	//  stack _161=9010 _163
    0 PUSHINT	//  stack _161=9010 _163 _164=0
    INDEXVAR	//  stack _161=9010 _165
    30000000 PUSHINT	//  stack _161=9010 _165 _166=30000000
    EQUAL	//  stack _161=9010 _167
    THROWANYIFNOT
    9010 PUSHINT	//  stack _169=9010
    OVER
    7 PUSHINT	//  stack _169=9010 stack _170=7
    INDEXVAR	//  stack _169=9010 _171
    1 PUSHINT	//  stack _169=9010 _171 _172=1
    INDEXVAR	//  stack _169=9010 _173
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _169=9010 _173 _174
    HASHSU SWAP HASHSU EQUAL	//  stack _169=9010 _175
    THROWANYIFNOT
    9010 PUSHINT	//  stack _177=9010
    SWAP
    7 PUSHINT	//  _177=9010 stack _178=7
    INDEXVAR	//  _177=9010 _179
    2 PUSHINT	//  _177=9010 _179 _180=2
    INDEXVAR	//  _177=9010 _181
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _177=9010 _181 _182
    HASHSU SWAP HASHSU EQUAL	//  _177=9010 _183
    THROWANYIFNOT
    TRUE	//  _185
  }>
  __test_bob_init_state PROC:<{
    // 
    0 PUSHINT	//  _3=0
    12 PUSHINT	//  _3=0 _4=12
    set_uninit_state CALLDICT	//  _182 _183 _184
    3 BLKDROP	// 
    5000000000 PUSHINT	//  initial_contract_balance=5000000000
    1741148801 PUSHINT	//  initial_contract_balance=5000000000 _9=1741148801
    NEWC	//  initial_contract_balance=5000000000 _9=1741148801 _10
    32 STU	//  initial_contract_balance=5000000000 _12
    0 PUSHINT	//  initial_contract_balance=5000000000 _12 _13=0
    STVARUINT16	//  initial_contract_balance=5000000000 _14
    OVER	//  initial_contract_balance=5000000000 _14 initial_contract_balance=5000000000
    STVARUINT16	//  initial_contract_balance=5000000000 _15
    ENDC	//  initial_contract_balance=5000000000 _16
    CTOS	//  initial_contract_balance=5000000000 top_up_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  initial_contract_balance=5000000000 top_up_body _18
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _18 _20
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _18 _20 _21
    s4 PUSH
    s0 s3 XCHG
    s0 s4 XCHG	//  initial_contract_balance=5000000000 _18 initial_contract_balance=5000000000 _20 _21 top_up_body
    4 TUPLE	//  initial_contract_balance=5000000000 _18 _19
    1 2 BLKDROP2	//  _18 _19
    invoke_method CALLDICT	//  _185 _186
    2DROP	// 
    931 PUSHINT	//  _26=931
    1768843636 PUSHINT	//  _26=931 _27=1768843636
    NEWC	//  _26=931 _27=1768843636 _28
    32 STU	//  _26=931 _30
    128 STU	//  _32
    0 PUSHINT	//  _32 _33=0
    STVARUINT16	//  _34
    7969999999 PUSHINT	//  _34 _39
    STVARUINT16	//  _40
    ENDC	//  _41
    CTOS	//  payload
    FALSE	//  payload _44
    235282626 PUSHINT	//  payload _44 _45=235282626
    NEWC	//  payload _44 _45=235282626 _46
    32 STU	//  payload _44 _48
    1 STI	//  payload _50
    OVER	//  payload _50 payload
    HASHSU	//  payload _50 _51
    3456 PUSHINT	//  payload _50 _51 _52=3456
    SIGN	//  payload _50 _53
    STSLICER	//  payload _54
    SWAP	//  _54 payload
    STSLICER	//  _55
    ENDC	//  _56
    CTOS	//  init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  init_body _58
    8000000000 PUSHINT	//  init_body _58 _60
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _58 _60 _61 _62 init_body
    4 TUPLE	//  _58 _59
    invoke_method CALLDICT	//  _187 _188
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _66
    0 TUPLE	//  _66 _67
    invoke_method CALLDICT	//  _189 _190
    NIP	//  stack
    9001 PUSHINT	//  stack _69=9001
    OVER	//  stack _69=9001 stack
    FIRST	//  stack _69=9001 _70
    1 EQINT	//  stack _69=9001 _72
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _76=1
    INDEXVAR	//  stack _77
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _79=9002
    s0 s2 XCHG	//  stack _79=9002 r_bB r_bA
    0 EQINT	//  stack _79=9002 r_bB _81
    s1 s2 XCHG	//  stack r_bB _79=9002 _81
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _83=9003
    SWAP
    7969999999 PUSHINT	//  stack _83=9003 r_bB _88
    EQUAL	//  stack _83=9003 _89
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _93=2
    INDEXVAR	//  stack _94
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _96=9004
    777 PUSHINT	//  stack r_pkA r_pkB _96=9004 _97=777
    PRIVTOPUB	//  stack r_pkA r_pkB _96=9004 _98
    s1 s3 XCHG	//  stack _96=9004 r_pkB r_pkA _98
    EQUAL	//  stack _96=9004 r_pkB _99
    s1 s2 XCHG	//  stack r_pkB _96=9004 _99
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _101=9005
    3456 PUSHINT	//  stack r_pkB _101=9005 _102=3456
    PRIVTOPUB	//  stack r_pkB _101=9005 _103
    s1 s2 XCHG	//  stack _101=9005 r_pkB _103
    EQUAL	//  stack _101=9005 _104
    THROWANYIFNOT
    9006 PUSHINT	//  stack _106=9006
    OVER
    3 PUSHINT	//  stack _106=9006 stack _107=3
    INDEXVAR	//  stack _106=9006 _108
    931 PUSHINT	//  stack _106=9006 _108 _109=931
    EQUAL	//  stack _106=9006 _110
    THROWANYIFNOT
    9007 PUSHINT	//  stack _112=9007
    OVER
    4 PUSHINT	//  stack _112=9007 stack _113=4
    INDEXVAR	//  stack _112=9007 _114
    0 PUSHINT	//  stack _112=9007 _114 _115=0
    INDEXVAR	//  stack _112=9007 _116
    86400 PUSHINT	//  stack _112=9007 _116 _117=86400
    EQUAL	//  stack _112=9007 _118
    THROWANYIFNOT
    9007 PUSHINT	//  stack _120=9007
    OVER
    4 PUSHINT	//  stack _120=9007 stack _121=4
    INDEXVAR	//  stack _120=9007 _122
    1 PUSHINT	//  stack _120=9007 _122 _123=1
    INDEXVAR	//  stack _120=9007 _124
    30000000 PUSHINT	//  stack _120=9007 _124 _125=30000000
    EQUAL	//  stack _120=9007 _126
    THROWANYIFNOT
    9007 PUSHINT	//  stack _128=9007
    OVER
    4 PUSHINT	//  stack _128=9007 stack _129=4
    INDEXVAR	//  stack _128=9007 _130
    2 PUSHINT	//  stack _128=9007 _130 _131=2
    INDEXVAR	//  stack _128=9007 _132
    3600 PUSHINT	//  stack _128=9007 _132 _133=3600
    EQUAL	//  stack _128=9007 _134
    THROWANYIFNOT
    9008 PUSHINT	//  stack _136=9008
    OVER
    5 PUSHINT	//  stack _136=9008 stack _137=5
    INDEXVAR	//  stack _136=9008 _138
    0 PUSHINT	//  stack _136=9008 _138 _139=0
    INDEXVAR	//  stack _136=9008 _140
    0 EQINT	//  stack _136=9008 _142
    THROWANYIFNOT
    9008 PUSHINT	//  stack _144=9008
    OVER
    5 PUSHINT	//  stack _144=9008 stack _145=5
    INDEXVAR	//  stack _144=9008 _146
    1 PUSHINT	//  stack _144=9008 _146 _147=1
    INDEXVAR	//  stack _144=9008 _148
    12 EQINT	//  stack _144=9008 _150
    THROWANYIFNOT
    9009 PUSHINT	//  stack _152=9009
    OVER
    6 PUSHINT	//  stack _152=9009 stack _153=6
    INDEXVAR	//  stack _152=9009 _154
    ISNULL	//  stack _152=9009 _155
    THROWANYIFNOT
    9010 PUSHINT	//  stack _157=9010
    OVER
    7 PUSHINT	//  stack _157=9010 stack _158=7
    INDEXVAR	//  stack _157=9010 _159
    0 PUSHINT	//  stack _157=9010 _159 _160=0
    INDEXVAR	//  stack _157=9010 _161
    30000000 PUSHINT	//  stack _157=9010 _161 _162=30000000
    EQUAL	//  stack _157=9010 _163
    THROWANYIFNOT
    9010 PUSHINT	//  stack _165=9010
    OVER
    7 PUSHINT	//  stack _165=9010 stack _166=7
    INDEXVAR	//  stack _165=9010 _167
    1 PUSHINT	//  stack _165=9010 _167 _168=1
    INDEXVAR	//  stack _165=9010 _169
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _165=9010 _169 _170
    HASHSU SWAP HASHSU EQUAL	//  stack _165=9010 _171
    THROWANYIFNOT
    9010 PUSHINT	//  stack _173=9010
    SWAP
    7 PUSHINT	//  _173=9010 stack _174=7
    INDEXVAR	//  _173=9010 _175
    2 PUSHINT	//  _173=9010 _175 _176=2
    INDEXVAR	//  _173=9010 _177
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _173=9010 _177 _178
    HASHSU SWAP HASHSU EQUAL	//  _173=9010 _179
    THROWANYIFNOT
    TRUE	//  _181
  }>
  __test_alice_init_state_wrong_channel_id PROC:<{
    // 
    0 PUSHINT	//  _3=0
    DUP	//  _3=0 _4=0
    set_uninit_state CALLDICT	//  _48 _49 _50
    3 BLKDROP	// 
    3000000000 PUSHINT	//  balance_addition=3000000000
    932 PUSHINT	//  balance_addition=3000000000 _11
    1768843636 PUSHINT	//  balance_addition=3000000000 _11 _12=1768843636
    NEWC	//  balance_addition=3000000000 _11 _12=1768843636 _13
    32 STU	//  balance_addition=3000000000 _11 _15
    128 STU	//  balance_addition=3000000000 _17
    2969999999 PUSHINT	//  balance_addition=3000000000 _17 _21
    STVARUINT16	//  balance_addition=3000000000 _22
    0 PUSHINT	//  balance_addition=3000000000 _22 _23=0
    STVARUINT16	//  balance_addition=3000000000 _24
    ENDC	//  balance_addition=3000000000 _25
    CTOS	//  balance_addition=3000000000 payload
    TRUE	//  balance_addition=3000000000 payload _28
    235282626 PUSHINT	//  balance_addition=3000000000 payload _28 _29=235282626
    NEWC	//  balance_addition=3000000000 payload _28 _29=235282626 _30
    32 STU	//  balance_addition=3000000000 payload _28 _32
    1 STI	//  balance_addition=3000000000 payload _34
    OVER	//  balance_addition=3000000000 payload _34 payload
    HASHSU	//  balance_addition=3000000000 payload _34 _35
    777 PUSHINT	//  balance_addition=3000000000 payload _34 _35 _36=777
    SIGN	//  balance_addition=3000000000 payload _34 _37
    STSLICER	//  balance_addition=3000000000 payload _38
    SWAP	//  balance_addition=3000000000 _38 payload
    STSLICER	//  balance_addition=3000000000 _39
    ENDC	//  balance_addition=3000000000 _40
    CTOS	//  balance_addition=3000000000 init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  balance_addition=3000000000 init_body _42
    s1 s2 XCHG
    PUSHNULL
    PUSHNULL
    ROT
    s0 s4 XCHG	//  _42 balance_addition=3000000000 _44 _45 init_body
    4 TUPLE	//  _42 _43
    invoke_method_expect_fail CALLDICT	//  _46
    DROP	// 
    TRUE	//  _47
  }>
  __test_alice_init_state_decrease_balances PROC:<{
    // 
    7 PUSHINT	//  _3=7
    11 PUSHINT	//  _3=7 _4=11
    set_uninit_state CALLDICT	//  _69 _70 _71
    3 BLKDROP	// 
    5000000000 PUSHINT	//  initial_contract_balance=5000000000
    1322 PUSHINT	//  initial_contract_balance=5000000000 Bob's_balance=1322
    1741148801 PUSHINT	//  initial_contract_balance=5000000000 Bob's_balance=1322 _11=1741148801
    NEWC	//  initial_contract_balance=5000000000 Bob's_balance=1322 _11=1741148801 _12
    32 STU	//  initial_contract_balance=5000000000 Bob's_balance=1322 _14
    4999998678 PUSHINT	//  initial_contract_balance=5000000000 Bob's_balance=1322 _14 _15
    STVARUINT16	//  initial_contract_balance=5000000000 Bob's_balance=1322 _16
    OVER	//  initial_contract_balance=5000000000 Bob's_balance=1322 _16 Bob's_balance=1322
    STVARUINT16	//  initial_contract_balance=5000000000 Bob's_balance=1322 _17
    NIP	//  initial_contract_balance=5000000000 _17
    ENDC	//  initial_contract_balance=5000000000 _18
    CTOS	//  initial_contract_balance=5000000000 top_up_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  initial_contract_balance=5000000000 top_up_body _20
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _20 _22
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _20 _22 _23
    s4 PUSH
    s0 s3 XCHG
    s0 s4 XCHG	//  initial_contract_balance=5000000000 _20 initial_contract_balance=5000000000 _22 _23 top_up_body
    4 TUPLE	//  initial_contract_balance=5000000000 _20 _21
    1 2 BLKDROP2	//  _20 _21
    invoke_method CALLDICT	//  _72 _73
    2DROP	// 
    931 PUSHINT	//  _28=931
    1768843636 PUSHINT	//  _28=931 _29=1768843636
    NEWC	//  _28=931 _29=1768843636 _30
    32 STU	//  _28=931 _32
    128 STU	//  _34
    7969998677 PUSHINT	//  _34 _40
    STVARUINT16	//  _41
    1321 PUSHINT	//  _41 _43
    STVARUINT16	//  _44
    ENDC	//  _45
    CTOS	//  payload
    TRUE	//  payload _48
    235282626 PUSHINT	//  payload _48 _49=235282626
    NEWC	//  payload _48 _49=235282626 _50
    32 STU	//  payload _48 _52
    1 STI	//  payload _54
    OVER	//  payload _54 payload
    HASHSU	//  payload _54 _55
    777 PUSHINT	//  payload _54 _55 _56=777
    SIGN	//  payload _54 _57
    STSLICER	//  payload _58
    SWAP	//  _58 payload
    STSLICER	//  _59
    ENDC	//  _60
    CTOS	//  init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  init_body _62
    8000000000 PUSHINT	//  init_body _62 _64
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _62 _64 _65 _66 init_body
    4 TUPLE	//  _62 _63
    invoke_method_expect_fail CALLDICT	//  _67
    DROP	// 
    TRUE	//  _68
  }>
  __test_alice_init_state_not_enough_balance PROC:<{
    // 
    7 PUSHINT	//  _3=7
    11 PUSHINT	//  _3=7 _4=11
    set_uninit_state CALLDICT	//  _67 _68 _69
    3 BLKDROP	// 
    5000000000 PUSHINT	//  initial_contract_balance=5000000000
    1322 PUSHINT	//  initial_contract_balance=5000000000 Bob's_balance=1322
    1741148801 PUSHINT	//  initial_contract_balance=5000000000 Bob's_balance=1322 _11=1741148801
    NEWC	//  initial_contract_balance=5000000000 Bob's_balance=1322 _11=1741148801 _12
    32 STU	//  initial_contract_balance=5000000000 Bob's_balance=1322 _14
    4999998678 PUSHINT	//  initial_contract_balance=5000000000 Bob's_balance=1322 _14 _15
    STVARUINT16	//  initial_contract_balance=5000000000 Bob's_balance=1322 _16
    OVER	//  initial_contract_balance=5000000000 Bob's_balance=1322 _16 Bob's_balance=1322
    STVARUINT16	//  initial_contract_balance=5000000000 Bob's_balance=1322 _17
    ENDC	//  initial_contract_balance=5000000000 Bob's_balance=1322 _18
    CTOS	//  initial_contract_balance=5000000000 Bob's_balance=1322 top_up_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  initial_contract_balance=5000000000 Bob's_balance=1322 top_up_body _20
    PUSHNULL	//  initial_contract_balance=5000000000 Bob's_balance=1322 top_up_body _20 _22
    PUSHNULL	//  initial_contract_balance=5000000000 Bob's_balance=1322 top_up_body _20 _22 _23
    s5 PUSH
    s0 s3 XCHG
    s0 s4 XCHG	//  initial_contract_balance=5000000000 Bob's_balance=1322 _20 initial_contract_balance=5000000000 _22 _23 top_up_body
    4 TUPLE	//  initial_contract_balance=5000000000 Bob's_balance=1322 _20 _21
    1 3 BLKDROP2	//  Bob's_balance=1322 _20 _21
    invoke_method CALLDICT	//  Bob's_balance=1322 _70 _71
    2DROP	//  Bob's_balance=1322
    931 PUSHINT	//  Bob's_balance=1322 _28=931
    1768843636 PUSHINT	//  Bob's_balance=1322 _28=931 _29=1768843636
    NEWC	//  Bob's_balance=1322 _28=931 _29=1768843636 _30
    32 STU	//  Bob's_balance=1322 _28=931 _32
    128 STU	//  Bob's_balance=1322 _34
    7969998679 PUSHINT	//  Bob's_balance=1322 _34 _40
    STVARUINT16	//  Bob's_balance=1322 _41
    SWAP	//  _41 Bob's_balance=1322
    STVARUINT16	//  _42
    ENDC	//  _43
    CTOS	//  payload
    TRUE	//  payload _46
    235282626 PUSHINT	//  payload _46 _47=235282626
    NEWC	//  payload _46 _47=235282626 _48
    32 STU	//  payload _46 _50
    1 STI	//  payload _52
    OVER	//  payload _52 payload
    HASHSU	//  payload _52 _53
    777 PUSHINT	//  payload _52 _53 _54=777
    SIGN	//  payload _52 _55
    STSLICER	//  payload _56
    SWAP	//  _56 payload
    STSLICER	//  _57
    ENDC	//  _58
    CTOS	//  init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  init_body _60
    8000000000 PUSHINT	//  init_body _60 _62
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _60 _62 _63 _64 init_body
    4 TUPLE	//  _60 _61
    invoke_method_expect_fail CALLDICT	//  _65
    DROP	// 
    TRUE	//  _66
  }>
  __test_unauthorized_init PROC:<{
    // 
    7 PUSHINT	//  _3=7
    11 PUSHINT	//  _3=7 _4=11
    set_uninit_state CALLDICT	//  _69 _70 _71
    3 BLKDROP	// 
    5000000000 PUSHINT	//  initial_contract_balance=5000000000
    1741148801 PUSHINT	//  initial_contract_balance=5000000000 _9=1741148801
    NEWC	//  initial_contract_balance=5000000000 _9=1741148801 _10
    32 STU	//  initial_contract_balance=5000000000 _12
    4940000000 PUSHINT	//  initial_contract_balance=5000000000 _12 _16
    STVARUINT16	//  initial_contract_balance=5000000000 _17
    1322 PUSHINT	//  initial_contract_balance=5000000000 _17 _18=1322
    STVARUINT16	//  initial_contract_balance=5000000000 _19
    ENDC	//  initial_contract_balance=5000000000 _20
    CTOS	//  initial_contract_balance=5000000000 top_up_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  initial_contract_balance=5000000000 top_up_body _22
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _22 _24
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _22 _24 _25
    s4 PUSH
    s0 s3 XCHG
    s0 s4 XCHG	//  initial_contract_balance=5000000000 _22 initial_contract_balance=5000000000 _24 _25 top_up_body
    4 TUPLE	//  initial_contract_balance=5000000000 _22 _23
    1 2 BLKDROP2	//  _22 _23
    invoke_method CALLDICT	//  _72 _73
    2DROP	// 
    931 PUSHINT	//  _30=931
    1768843636 PUSHINT	//  _30=931 _31=1768843636
    NEWC	//  _30=931 _31=1768843636 _32
    32 STU	//  _30=931 _34
    128 STU	//  _36
    7940000000 PUSHINT	//  _36 _41
    STVARUINT16	//  _42
    1322 PUSHINT	//  _42 _43=1322
    STVARUINT16	//  _44
    ENDC	//  _45
    CTOS	//  payload
    TRUE	//  payload _48
    235282626 PUSHINT	//  payload _48 _49=235282626
    NEWC	//  payload _48 _49=235282626 _50
    32 STU	//  payload _48 _52
    1 STI	//  payload _54
    OVER	//  payload _54 payload
    HASHSU	//  payload _54 _55
    12452 PUSHINT	//  payload _54 _55 _56=12452
    SIGN	//  payload _54 _57
    STSLICER	//  payload _58
    SWAP	//  _58 payload
    STSLICER	//  _59
    ENDC	//  _60
    CTOS	//  init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  init_body _62
    8000000000 PUSHINT	//  init_body _62 _64
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _62 _64 _65 _66 init_body
    4 TUPLE	//  _62 _63
    invoke_method_expect_fail CALLDICT	//  _67
    DROP	// 
    TRUE	//  _68
  }>
  init_channel_helper PROC:<{
    // 
    7 PUSHINT	//  _3=7
    11 PUSHINT	//  _3=7 _4=11
    set_uninit_state CALLDICT	//  _64 _65 _66
    3 BLKDROP	// 
    5000000000 PUSHINT	//  initial_contract_balance=5000000000
    1741148801 PUSHINT	//  initial_contract_balance=5000000000 _9=1741148801
    NEWC	//  initial_contract_balance=5000000000 _9=1741148801 _10
    32 STU	//  initial_contract_balance=5000000000 _12
    OVER	//  initial_contract_balance=5000000000 _12 initial_contract_balance=5000000000
    STVARUINT16	//  initial_contract_balance=5000000000 _13
    0 PUSHINT	//  initial_contract_balance=5000000000 _13 _14=0
    STVARUINT16	//  initial_contract_balance=5000000000 _15
    ENDC	//  initial_contract_balance=5000000000 _16
    CTOS	//  initial_contract_balance=5000000000 top_up_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  initial_contract_balance=5000000000 top_up_body _18
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _18 _20
    PUSHNULL	//  initial_contract_balance=5000000000 top_up_body _18 _20 _21
    s4 PUSH
    s0 s3 XCHG
    s0 s4 XCHG	//  initial_contract_balance=5000000000 _18 initial_contract_balance=5000000000 _20 _21 top_up_body
    4 TUPLE	//  initial_contract_balance=5000000000 _18 _19
    1 2 BLKDROP2	//  _18 _19
    invoke_method CALLDICT	//  _67 _68
    2DROP	// 
    931 PUSHINT	//  _26=931
    1768843636 PUSHINT	//  _26=931 _27=1768843636
    NEWC	//  _26=931 _27=1768843636 _28
    32 STU	//  _26=931 _30
    128 STU	//  _32
    7969999999 PUSHINT	//  _32 _37
    STVARUINT16	//  _38
    0 PUSHINT	//  _38 _39=0
    STVARUINT16	//  _40
    ENDC	//  _41
    CTOS	//  payload
    TRUE	//  payload _44
    235282626 PUSHINT	//  payload _44 _45=235282626
    NEWC	//  payload _44 _45=235282626 _46
    32 STU	//  payload _44 _48
    1 STI	//  payload _50
    OVER	//  payload _50 payload
    HASHSU	//  payload _50 _51
    777 PUSHINT	//  payload _50 _51 _52=777
    SIGN	//  payload _50 _53
    STSLICER	//  payload _54
    SWAP	//  _54 payload
    STSLICER	//  _55
    ENDC	//  _56
    CTOS	//  init_body
    CONT:<{
      recv_internal CALLDICT
    }>	//  init_body _58
    8000000000 PUSHINT	//  init_body _58 _60
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _58 _60 _61 _62 init_body
    4 TUPLE	//  _58 _59
    invoke_method CALLDICT	//  _69 _70
    2DROP	// 
  }>
  __test_cooperative_close PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _288 _289
    2DROP	// 
    20 PUSHINT	//  _7=20
    DUP	//  _7=20 _8=20
    931 PUSHINT	//  _7=20 _8=20 _9=931
    1131179891 PUSHINT	//  _7=20 _8=20 _9=931 _10=1131179891
    NEWC	//  _7=20 _8=20 _9=931 _10=1131179891 _11
    32 STU	//  _7=20 _8=20 _9=931 _13
    128 STU	//  _7=20 _8=20 _15
    3800000000 PUSHINT	//  _7=20 _8=20 _15 _16=3800000000
    STVARUINT16	//  _7=20 _8=20 _17
    4000000000 PUSHINT	//  _7=20 _8=20 _17 _18=4000000000
    STVARUINT16	//  _7=20 _8=20 _19
    64 STU	//  _7=20 _21
    64 STU	//  _23
    ENDC	//  _24
    CTOS	//  payload
    NEWC	//  payload _27
    OVER	//  payload _27 payload
    HASHSU	//  payload _27 _28
    3456 PUSHINT	//  payload _27 _28 _29=3456
    SIGN	//  payload _27 _30
    STSLICER	//  payload _31
    ENDC	//  payload _32
    NEWC	//  payload _32 _33
    s2 PUSH	//  payload _32 _33 payload
    HASHSU	//  payload _32 _33 _34
    777 PUSHINT	//  payload _32 _33 _34 _35=777
    SIGN	//  payload _32 _33 _36
    STSLICER	//  payload _32 _37
    ENDC	//  payload _32 _38
    1433884798 PUSHINT	//  payload _32 _38 _39=1433884798
    NEWC	//  payload _32 _38 _39=1433884798 _40
    32 STU	//  payload _32 _38 _42
    STREF	//  payload _32 _43
    STREF	//  payload _44
    SWAP	//  _44 payload
    STSLICER	//  _45
    ENDC	//  _46
    CTOS	//  body
    8000000000 PUSHINT	//  body _49=8000000000
    <b b> PUSHREF	//  body _49=8000000000 _50
    PAIR	//  body _48
    c7 PUSH DUP FIRST
    ROT
    7 SETINDEX
    0 SETINDEX
    c7 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _52
    8000000000 PUSHINT	//  body _52 _54=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _52 _54=8000000000 _55 _56 body
    4 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _290 _291
    2DROP	// 
    parse_c5 INLINECALLDICT	//  actions
    9011 PUSHINT	//  actions _60=9011
    OVER	//  actions _60=9011 actions
    TLEN	//  actions _60=9011 _61
    2 EQINT	//  actions _60=9011 _63
    THROWANYIFNOT
    9012 PUSHINT	//  actions _65=9012
    OVER
    0 PUSHINT	//  actions _65=9012 actions _66=0
    INDEXVAR	//  actions _65=9012 _67
    0 PUSHINT	//  actions _65=9012 _67 _68=0
    INDEXVAR	//  actions _65=9012 _69
    0 EQINT	//  actions _65=9012 _71
    THROWANYIFNOT
    9013 PUSHINT	//  actions _73=9013
    OVER
    0 PUSHINT	//  actions _73=9013 actions _74=0
    INDEXVAR	//  actions _73=9013 _75
    2 PUSHINT	//  actions _73=9013 _75 _76=2
    INDEXVAR	//  actions _73=9013 _77
    2 EQINT	//  actions _73=9013 _79
    THROWANYIFNOT
    DUP
    0 PUSHINT	//  actions actions _82=0
    INDEXVAR	//  actions _83
    1 PUSHINT	//  actions _83 _84=1
    INDEXVAR	//  actions _85
    parse_internal_message CALLDICT	//  actions msg_params
    9014 PUSHINT	//  actions msg_params _87=9014
    OVER
    1 PUSHINT	//  actions msg_params _87=9014 msg_params _88=1
    INDEXVAR	//  actions msg_params _87=9014 _89
    0 EQINT	//  actions msg_params _87=9014 _91
    THROWANYIFNOT
    9015 PUSHINT	//  actions msg_params _93=9015
    OVER
    4 PUSHINT	//  actions msg_params _93=9015 msg_params _94=4
    INDEXVAR	//  actions msg_params _93=9015 _95
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  actions msg_params _93=9015 _95 _96
    HASHSU SWAP HASHSU EQUAL	//  actions msg_params _93=9015 _97
    THROWANYIFNOT
    9016 PUSHINT	//  actions msg_params _99=9016
    OVER
    5 PUSHINT	//  actions msg_params _99=9016 msg_params _100=5
    INDEXVAR	//  actions msg_params _99=9016 _101
    4000000000 PUSHINT	//  actions msg_params _99=9016 _101 _102=4000000000
    EQUAL	//  actions msg_params _99=9016 _103
    THROWANYIFNOT
    9017 PUSHINT	//  actions msg_params _105=9017
    SWAP
    8 PUSHINT	//  actions _105=9017 msg_params _106=8
    INDEXVAR	//  actions _105=9017 _107
    931 PUSHINT	//  actions _105=9017 _107 _108=931
    3722217658 PUSHINT	//  actions _105=9017 _107 _108=931 _109=3722217658
    NEWC	//  actions _105=9017 _107 _108=931 _109=3722217658 _110
    32 STU	//  actions _105=9017 _107 _108=931 _112
    128 STU	//  actions _105=9017 _107 _114
    ENDC	//  actions _105=9017 _107 _115
    CTOS	//  actions _105=9017 _107 _116
    HASHSU SWAP HASHSU EQUAL	//  actions _105=9017 _117
    THROWANYIFNOT
    10012 PUSHINT	//  actions _119=10012
    OVER
    1 PUSHINT	//  actions _119=10012 actions _120=1
    INDEXVAR	//  actions _119=10012 _121
    0 PUSHINT	//  actions _119=10012 _121 _122=0
    INDEXVAR	//  actions _119=10012 _123
    0 EQINT	//  actions _119=10012 _125
    THROWANYIFNOT
    10013 PUSHINT	//  actions _127=10013
    OVER
    1 PUSHINT	//  actions _127=10013 actions _128=1
    INDEXVAR	//  actions _127=10013 _129
    2 PUSHINT	//  actions _127=10013 _129 _130=2
    INDEXVAR	//  actions _127=10013 _131
    130 PUSHINT	//  actions _127=10013 _131 _134
    EQUAL	//  actions _127=10013 _135
    THROWANYIFNOT
    1 PUSHINT	//  actions _137=1
    INDEXVAR	//  _138
    1 PUSHINT	//  _138 _139=1
    INDEXVAR	//  _140
    parse_internal_message CALLDICT	//  msg_params
    10014 PUSHINT	//  msg_params _142=10014
    OVER
    1 PUSHINT	//  msg_params _142=10014 msg_params _143=1
    INDEXVAR	//  msg_params _142=10014 _144
    0 EQINT	//  msg_params _142=10014 _146
    THROWANYIFNOT
    10015 PUSHINT	//  msg_params _148=10015
    OVER
    4 PUSHINT	//  msg_params _148=10015 msg_params _149=4
    INDEXVAR	//  msg_params _148=10015 _150
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  msg_params _148=10015 _150 _151
    HASHSU SWAP HASHSU EQUAL	//  msg_params _148=10015 _152
    THROWANYIFNOT
    10016 PUSHINT	//  msg_params _154=10016
    OVER
    5 PUSHINT	//  msg_params _154=10016 msg_params _155=5
    INDEXVAR	//  msg_params _154=10016 _156
    3800000000 PUSHINT	//  msg_params _154=10016 _156 _157=3800000000
    EQUAL	//  msg_params _154=10016 _158
    THROWANYIFNOT
    10017 PUSHINT	//  msg_params _160=10017
    SWAP
    8 PUSHINT	//  _160=10017 msg_params _161=8
    INDEXVAR	//  _160=10017 _162
    931 PUSHINT	//  _160=10017 _162 _163=931
    3722217658 PUSHINT	//  _160=10017 _162 _163=931 _164=3722217658
    NEWC	//  _160=10017 _162 _163=931 _164=3722217658 _165
    32 STU	//  _160=10017 _162 _163=931 _167
    128 STU	//  _160=10017 _162 _169
    ENDC	//  _160=10017 _162 _170
    CTOS	//  _160=10017 _162 _171
    HASHSU SWAP HASHSU EQUAL	//  _160=10017 _172
    THROWANYIFNOT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _176
    0 TUPLE	//  _176 _177
    invoke_method CALLDICT	//  _292 _293
    NIP	//  stack
    9001 PUSHINT	//  stack _179=9001
    OVER	//  stack _179=9001 stack
    FIRST	//  stack _179=9001 _180
    0 EQINT	//  stack _179=9001 _182
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _186=1
    INDEXVAR	//  stack _187
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _189=9002
    s0 s2 XCHG	//  stack _189=9002 r_bB r_bA
    0 EQINT	//  stack _189=9002 r_bB _191
    s1 s2 XCHG	//  stack r_bB _189=9002 _191
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _193=9003
    SWAP	//  stack _193=9003 r_bB
    0 EQINT	//  stack _193=9003 _195
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _199=2
    INDEXVAR	//  stack _200
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _202=9004
    777 PUSHINT	//  stack r_pkA r_pkB _202=9004 _203=777
    PRIVTOPUB	//  stack r_pkA r_pkB _202=9004 _204
    s1 s3 XCHG	//  stack _202=9004 r_pkB r_pkA _204
    EQUAL	//  stack _202=9004 r_pkB _205
    s1 s2 XCHG	//  stack r_pkB _202=9004 _205
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _207=9005
    3456 PUSHINT	//  stack r_pkB _207=9005 _208=3456
    PRIVTOPUB	//  stack r_pkB _207=9005 _209
    s1 s2 XCHG	//  stack _207=9005 r_pkB _209
    EQUAL	//  stack _207=9005 _210
    THROWANYIFNOT
    9006 PUSHINT	//  stack _212=9006
    OVER
    3 PUSHINT	//  stack _212=9006 stack _213=3
    INDEXVAR	//  stack _212=9006 _214
    931 PUSHINT	//  stack _212=9006 _214 _215=931
    EQUAL	//  stack _212=9006 _216
    THROWANYIFNOT
    9007 PUSHINT	//  stack _218=9007
    OVER
    4 PUSHINT	//  stack _218=9007 stack _219=4
    INDEXVAR	//  stack _218=9007 _220
    0 PUSHINT	//  stack _218=9007 _220 _221=0
    INDEXVAR	//  stack _218=9007 _222
    86400 PUSHINT	//  stack _218=9007 _222 _223=86400
    EQUAL	//  stack _218=9007 _224
    THROWANYIFNOT
    9007 PUSHINT	//  stack _226=9007
    OVER
    4 PUSHINT	//  stack _226=9007 stack _227=4
    INDEXVAR	//  stack _226=9007 _228
    1 PUSHINT	//  stack _226=9007 _228 _229=1
    INDEXVAR	//  stack _226=9007 _230
    30000000 PUSHINT	//  stack _226=9007 _230 _231=30000000
    EQUAL	//  stack _226=9007 _232
    THROWANYIFNOT
    9007 PUSHINT	//  stack _234=9007
    OVER
    4 PUSHINT	//  stack _234=9007 stack _235=4
    INDEXVAR	//  stack _234=9007 _236
    2 PUSHINT	//  stack _234=9007 _236 _237=2
    INDEXVAR	//  stack _234=9007 _238
    3600 PUSHINT	//  stack _234=9007 _238 _239=3600
    EQUAL	//  stack _234=9007 _240
    THROWANYIFNOT
    9008 PUSHINT	//  stack _242=9008
    OVER
    5 PUSHINT	//  stack _242=9008 stack _243=5
    INDEXVAR	//  stack _242=9008 _244
    0 PUSHINT	//  stack _242=9008 _244 _245=0
    INDEXVAR	//  stack _242=9008 _246
    20 EQINT	//  stack _242=9008 _248
    THROWANYIFNOT
    9008 PUSHINT	//  stack _250=9008
    OVER
    5 PUSHINT	//  stack _250=9008 stack _251=5
    INDEXVAR	//  stack _250=9008 _252
    1 PUSHINT	//  stack _250=9008 _252 _253=1
    INDEXVAR	//  stack _250=9008 _254
    20 EQINT	//  stack _250=9008 _256
    THROWANYIFNOT
    9009 PUSHINT	//  stack _258=9009
    OVER
    6 PUSHINT	//  stack _258=9009 stack _259=6
    INDEXVAR	//  stack _258=9009 _260
    ISNULL	//  stack _258=9009 _261
    THROWANYIFNOT
    9010 PUSHINT	//  stack _263=9010
    OVER
    7 PUSHINT	//  stack _263=9010 stack _264=7
    INDEXVAR	//  stack _263=9010 _265
    0 PUSHINT	//  stack _263=9010 _265 _266=0
    INDEXVAR	//  stack _263=9010 _267
    30000000 PUSHINT	//  stack _263=9010 _267 _268=30000000
    EQUAL	//  stack _263=9010 _269
    THROWANYIFNOT
    9010 PUSHINT	//  stack _271=9010
    OVER
    7 PUSHINT	//  stack _271=9010 stack _272=7
    INDEXVAR	//  stack _271=9010 _273
    1 PUSHINT	//  stack _271=9010 _273 _274=1
    INDEXVAR	//  stack _271=9010 _275
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _271=9010 _275 _276
    HASHSU SWAP HASHSU EQUAL	//  stack _271=9010 _277
    THROWANYIFNOT
    9010 PUSHINT	//  stack _279=9010
    SWAP
    7 PUSHINT	//  _279=9010 stack _280=7
    INDEXVAR	//  _279=9010 _281
    2 PUSHINT	//  _279=9010 _281 _282=2
    INDEXVAR	//  _279=9010 _283
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _279=9010 _283 _284
    HASHSU SWAP HASHSU EQUAL	//  _279=9010 _285
    THROWANYIFNOT
    TRUE	//  _287
  }>
  __test_unauthorized_cooperative_close PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _163 _164
    2DROP	// 
    20 PUSHINT	//  _7=20
    DUP	//  _7=20 _8=20
    931 PUSHINT	//  _7=20 _8=20 _9=931
    1131179891 PUSHINT	//  _7=20 _8=20 _9=931 _10=1131179891
    NEWC	//  _7=20 _8=20 _9=931 _10=1131179891 _11
    32 STU	//  _7=20 _8=20 _9=931 _13
    128 STU	//  _7=20 _8=20 _15
    3800000000 PUSHINT	//  _7=20 _8=20 _15 _16=3800000000
    STVARUINT16	//  _7=20 _8=20 _17
    4000000000 PUSHINT	//  _7=20 _8=20 _17 _18=4000000000
    STVARUINT16	//  _7=20 _8=20 _19
    64 STU	//  _7=20 _21
    64 STU	//  _23
    ENDC	//  _24
    CTOS	//  payload
    NEWC	//  payload _27
    OVER	//  payload _27 payload
    HASHSU	//  payload _27 _28
    3456 PUSHINT	//  payload _27 _28 _29=3456
    SIGN	//  payload _27 _30
    STSLICER	//  payload _31
    ENDC	//  payload _32
    NEWC	//  payload _32 _33
    s2 PUSH	//  payload _32 _33 payload
    HASHSU	//  payload _32 _33 _34
    12452 PUSHINT	//  payload _32 _33 _34 _35=12452
    SIGN	//  payload _32 _33 _36
    STSLICER	//  payload _32 _37
    ENDC	//  payload _32 _38
    1433884798 PUSHINT	//  payload _32 _38 _39=1433884798
    NEWC	//  payload _32 _38 _39=1433884798 _40
    32 STU	//  payload _32 _38 _42
    STREF	//  payload _32 _43
    STREF	//  payload _44
    SWAP	//  _44 payload
    STSLICER	//  _45
    ENDC	//  _46
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _48
    8000000000 PUSHINT	//  body _48 _50=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _48 _50=8000000000 _51 _52 body
    4 TUPLE	//  _48 _49
    invoke_method_expect_fail CALLDICT	//  _53
    DROP	// 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _57
    0 TUPLE	//  _57 _58
    invoke_method CALLDICT	//  _165 _166
    2DROP	// 
    20 PUSHINT	//  _61=20
    DUP	//  _61=20 _62=20
    931 PUSHINT	//  _61=20 _62=20 _63=931
    1131179891 PUSHINT	//  _61=20 _62=20 _63=931 _64=1131179891
    NEWC	//  _61=20 _62=20 _63=931 _64=1131179891 _65
    32 STU	//  _61=20 _62=20 _63=931 _67
    128 STU	//  _61=20 _62=20 _69
    3800000000 PUSHINT	//  _61=20 _62=20 _69 _70=3800000000
    STVARUINT16	//  _61=20 _62=20 _71
    4000000000 PUSHINT	//  _61=20 _62=20 _71 _72=4000000000
    STVARUINT16	//  _61=20 _62=20 _73
    64 STU	//  _61=20 _75
    64 STU	//  _77
    ENDC	//  _78
    CTOS	//  payload
    NEWC	//  payload _81
    OVER	//  payload _81 payload
    HASHSU	//  payload _81 _82
    777 PUSHINT	//  payload _81 _82 _83=777
    SIGN	//  payload _81 _84
    STSLICER	//  payload _85
    ENDC	//  payload _86
    NEWC	//  payload _86 _87
    s2 PUSH	//  payload _86 _87 payload
    HASHSU	//  payload _86 _87 _88
    777 PUSHINT	//  payload _86 _87 _88 _89=777
    SIGN	//  payload _86 _87 _90
    STSLICER	//  payload _86 _91
    ENDC	//  payload _86 _92
    1433884798 PUSHINT	//  payload _86 _92 _93=1433884798
    NEWC	//  payload _86 _92 _93=1433884798 _94
    32 STU	//  payload _86 _92 _96
    STREF	//  payload _86 _97
    STREF	//  payload _98
    SWAP	//  _98 payload
    STSLICER	//  _99
    ENDC	//  _100
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _102
    8000000000 PUSHINT	//  body _102 _104=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _102 _104=8000000000 _105 _106 body
    4 TUPLE	//  _102 _103
    invoke_method_expect_fail CALLDICT	//  _107
    DROP	// 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _111
    0 TUPLE	//  _111 _112
    invoke_method CALLDICT	//  _167 _168
    2DROP	// 
    20 PUSHINT	//  _115=20
    DUP	//  _115=20 _116=20
    931 PUSHINT	//  _115=20 _116=20 _117=931
    1131179891 PUSHINT	//  _115=20 _116=20 _117=931 _118=1131179891
    NEWC	//  _115=20 _116=20 _117=931 _118=1131179891 _119
    32 STU	//  _115=20 _116=20 _117=931 _121
    128 STU	//  _115=20 _116=20 _123
    3800000000 PUSHINT	//  _115=20 _116=20 _123 _124=3800000000
    STVARUINT16	//  _115=20 _116=20 _125
    4000000000 PUSHINT	//  _115=20 _116=20 _125 _126=4000000000
    STVARUINT16	//  _115=20 _116=20 _127
    64 STU	//  _115=20 _129
    64 STU	//  _131
    ENDC	//  _132
    CTOS	//  payload
    NEWC	//  payload _135
    OVER	//  payload _135 payload
    HASHSU	//  payload _135 _136
    777 PUSHINT	//  payload _135 _136 _137=777
    SIGN	//  payload _135 _138
    STSLICER	//  payload _139
    ENDC	//  payload _140
    NEWC	//  payload _140 _141
    s2 PUSH	//  payload _140 _141 payload
    HASHSU	//  payload _140 _141 _142
    3456 PUSHINT	//  payload _140 _141 _142 _143=3456
    SIGN	//  payload _140 _141 _144
    STSLICER	//  payload _140 _145
    ENDC	//  payload _140 _146
    1433884798 PUSHINT	//  payload _140 _146 _147=1433884798
    NEWC	//  payload _140 _146 _147=1433884798 _148
    32 STU	//  payload _140 _146 _150
    STREF	//  payload _140 _151
    STREF	//  payload _152
    SWAP	//  _152 payload
    STSLICER	//  _153
    ENDC	//  _154
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _156
    8000000000 PUSHINT	//  body _156 _158=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _156 _158=8000000000 _159 _160 body
    4 TUPLE	//  _156 _157
    invoke_method_expect_fail CALLDICT	//  _161
    DROP	// 
    TRUE	//  _162
  }>
  __test_cooperative_close_decrease_seqnos PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _163 _164
    2DROP	// 
    11 PUSHINT	//  _7=11
    7 PUSHINT	//  _7=11 _8=7
    931 PUSHINT	//  _7=11 _8=7 _9=931
    1131179891 PUSHINT	//  _7=11 _8=7 _9=931 _10=1131179891
    NEWC	//  _7=11 _8=7 _9=931 _10=1131179891 _11
    32 STU	//  _7=11 _8=7 _9=931 _13
    128 STU	//  _7=11 _8=7 _15
    3800000000 PUSHINT	//  _7=11 _8=7 _15 _16=3800000000
    STVARUINT16	//  _7=11 _8=7 _17
    4000000000 PUSHINT	//  _7=11 _8=7 _17 _18=4000000000
    STVARUINT16	//  _7=11 _8=7 _19
    64 STU	//  _7=11 _21
    64 STU	//  _23
    ENDC	//  _24
    CTOS	//  payload
    NEWC	//  payload _27
    OVER	//  payload _27 payload
    HASHSU	//  payload _27 _28
    777 PUSHINT	//  payload _27 _28 _29=777
    SIGN	//  payload _27 _30
    STSLICER	//  payload _31
    ENDC	//  payload _32
    NEWC	//  payload _32 _33
    s2 PUSH	//  payload _32 _33 payload
    HASHSU	//  payload _32 _33 _34
    3456 PUSHINT	//  payload _32 _33 _34 _35=3456
    SIGN	//  payload _32 _33 _36
    STSLICER	//  payload _32 _37
    ENDC	//  payload _32 _38
    1433884798 PUSHINT	//  payload _32 _38 _39=1433884798
    NEWC	//  payload _32 _38 _39=1433884798 _40
    32 STU	//  payload _32 _38 _42
    STREF	//  payload _32 _43
    STREF	//  payload _44
    SWAP	//  _44 payload
    STSLICER	//  _45
    ENDC	//  _46
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _48
    8000000000 PUSHINT	//  body _48 _50=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _48 _50=8000000000 _51 _52 body
    4 TUPLE	//  _48 _49
    invoke_method_expect_fail CALLDICT	//  _53
    DROP	// 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _57
    0 TUPLE	//  _57 _58
    invoke_method CALLDICT	//  _165 _166
    2DROP	// 
    12 PUSHINT	//  _61=12
    6 PUSHINT	//  _61=12 _62=6
    931 PUSHINT	//  _61=12 _62=6 _63=931
    1131179891 PUSHINT	//  _61=12 _62=6 _63=931 _64=1131179891
    NEWC	//  _61=12 _62=6 _63=931 _64=1131179891 _65
    32 STU	//  _61=12 _62=6 _63=931 _67
    128 STU	//  _61=12 _62=6 _69
    3800000000 PUSHINT	//  _61=12 _62=6 _69 _70=3800000000
    STVARUINT16	//  _61=12 _62=6 _71
    4000000000 PUSHINT	//  _61=12 _62=6 _71 _72=4000000000
    STVARUINT16	//  _61=12 _62=6 _73
    64 STU	//  _61=12 _75
    64 STU	//  _77
    ENDC	//  _78
    CTOS	//  payload
    NEWC	//  payload _81
    OVER	//  payload _81 payload
    HASHSU	//  payload _81 _82
    777 PUSHINT	//  payload _81 _82 _83=777
    SIGN	//  payload _81 _84
    STSLICER	//  payload _85
    ENDC	//  payload _86
    NEWC	//  payload _86 _87
    s2 PUSH	//  payload _86 _87 payload
    HASHSU	//  payload _86 _87 _88
    3456 PUSHINT	//  payload _86 _87 _88 _89=3456
    SIGN	//  payload _86 _87 _90
    STSLICER	//  payload _86 _91
    ENDC	//  payload _86 _92
    1433884798 PUSHINT	//  payload _86 _92 _93=1433884798
    NEWC	//  payload _86 _92 _93=1433884798 _94
    32 STU	//  payload _86 _92 _96
    STREF	//  payload _86 _97
    STREF	//  payload _98
    SWAP	//  _98 payload
    STSLICER	//  _99
    ENDC	//  _100
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _102
    8000000000 PUSHINT	//  body _102 _104=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _102 _104=8000000000 _105 _106 body
    4 TUPLE	//  _102 _103
    invoke_method_expect_fail CALLDICT	//  _107
    DROP	// 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _111
    0 TUPLE	//  _111 _112
    invoke_method CALLDICT	//  _167 _168
    2DROP	// 
    10 PUSHINT	//  _115=10
    8 PUSHINT	//  _115=10 _116=8
    931 PUSHINT	//  _115=10 _116=8 _117=931
    1131179891 PUSHINT	//  _115=10 _116=8 _117=931 _118=1131179891
    NEWC	//  _115=10 _116=8 _117=931 _118=1131179891 _119
    32 STU	//  _115=10 _116=8 _117=931 _121
    128 STU	//  _115=10 _116=8 _123
    3800000000 PUSHINT	//  _115=10 _116=8 _123 _124=3800000000
    STVARUINT16	//  _115=10 _116=8 _125
    4000000000 PUSHINT	//  _115=10 _116=8 _125 _126=4000000000
    STVARUINT16	//  _115=10 _116=8 _127
    64 STU	//  _115=10 _129
    64 STU	//  _131
    ENDC	//  _132
    CTOS	//  payload
    NEWC	//  payload _135
    OVER	//  payload _135 payload
    HASHSU	//  payload _135 _136
    777 PUSHINT	//  payload _135 _136 _137=777
    SIGN	//  payload _135 _138
    STSLICER	//  payload _139
    ENDC	//  payload _140
    NEWC	//  payload _140 _141
    s2 PUSH	//  payload _140 _141 payload
    HASHSU	//  payload _140 _141 _142
    3456 PUSHINT	//  payload _140 _141 _142 _143=3456
    SIGN	//  payload _140 _141 _144
    STSLICER	//  payload _140 _145
    ENDC	//  payload _140 _146
    1433884798 PUSHINT	//  payload _140 _146 _147=1433884798
    NEWC	//  payload _140 _146 _147=1433884798 _148
    32 STU	//  payload _140 _146 _150
    STREF	//  payload _140 _151
    STREF	//  payload _152
    SWAP	//  _152 payload
    STSLICER	//  _153
    ENDC	//  _154
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _156
    8000000000 PUSHINT	//  body _156 _158=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _156 _158=8000000000 _159 _160 body
    4 TUPLE	//  _156 _157
    invoke_method_expect_fail CALLDICT	//  _161
    DROP	// 
    TRUE	//  _162
  }>
  __test_cooperative_close_B_too_high PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _175 _176
    2DROP	// 
    20 PUSHINT	//  _7=20
    DUP	//  _7=20 _8=20
    931 PUSHINT	//  _7=20 _8=20 _9=931
    1131179891 PUSHINT	//  _7=20 _8=20 _9=931 _10=1131179891
    NEWC	//  _7=20 _8=20 _9=931 _10=1131179891 _11
    32 STU	//  _7=20 _8=20 _9=931 _13
    128 STU	//  _7=20 _8=20 _15
    1 PUSHINT	//  _7=20 _8=20 _15 _16=1
    STVARUINT16	//  _7=20 _8=20 _17
    9000000000 PUSHINT	//  _7=20 _8=20 _17 _18=9000000000
    STVARUINT16	//  _7=20 _8=20 _19
    64 STU	//  _7=20 _21
    64 STU	//  _23
    ENDC	//  _24
    CTOS	//  payload
    NEWC	//  payload _27
    OVER	//  payload _27 payload
    HASHSU	//  payload _27 _28
    3456 PUSHINT	//  payload _27 _28 _29=3456
    SIGN	//  payload _27 _30
    STSLICER	//  payload _31
    ENDC	//  payload _32
    NEWC	//  payload _32 _33
    s2 PUSH	//  payload _32 _33 payload
    HASHSU	//  payload _32 _33 _34
    777 PUSHINT	//  payload _32 _33 _34 _35=777
    SIGN	//  payload _32 _33 _36
    STSLICER	//  payload _32 _37
    ENDC	//  payload _32 _38
    1433884798 PUSHINT	//  payload _32 _38 _39=1433884798
    NEWC	//  payload _32 _38 _39=1433884798 _40
    32 STU	//  payload _32 _38 _42
    STREF	//  payload _32 _43
    STREF	//  payload _44
    SWAP	//  _44 payload
    STSLICER	//  _45
    ENDC	//  _46
    CTOS	//  body
    8000000000 PUSHINT	//  body _49=8000000000
    <b b> PUSHREF	//  body _49=8000000000 _50
    PAIR	//  body _48
    c7 PUSH DUP FIRST
    ROT
    7 SETINDEX
    0 SETINDEX
    c7 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _52
    8000000000 PUSHINT	//  body _52 _54=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _52 _54=8000000000 _55 _56 body
    4 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _177 _178
    2DROP	// 
    parse_c5 INLINECALLDICT	//  actions
    9011 PUSHINT	//  actions _60=9011
    OVER	//  actions _60=9011 actions
    TLEN	//  actions _60=9011 _61
    2 EQINT	//  actions _60=9011 _63
    THROWANYIFNOT
    9012 PUSHINT	//  actions _65=9012
    OVER
    0 PUSHINT	//  actions _65=9012 actions _66=0
    INDEXVAR	//  actions _65=9012 _67
    0 PUSHINT	//  actions _65=9012 _67 _68=0
    INDEXVAR	//  actions _65=9012 _69
    0 EQINT	//  actions _65=9012 _71
    THROWANYIFNOT
    9013 PUSHINT	//  actions _73=9013
    OVER
    0 PUSHINT	//  actions _73=9013 actions _74=0
    INDEXVAR	//  actions _73=9013 _75
    2 PUSHINT	//  actions _73=9013 _75 _76=2
    INDEXVAR	//  actions _73=9013 _77
    7 PUSHPOW2	//  actions _73=9013 _77 _78=128
    EQUAL	//  actions _73=9013 _79
    THROWANYIFNOT
    DUP
    0 PUSHINT	//  actions actions _82=0
    INDEXVAR	//  actions _83
    1 PUSHINT	//  actions _83 _84=1
    INDEXVAR	//  actions _85
    parse_internal_message CALLDICT	//  actions msg_params
    9014 PUSHINT	//  actions msg_params _87=9014
    OVER
    1 PUSHINT	//  actions msg_params _87=9014 msg_params _88=1
    INDEXVAR	//  actions msg_params _87=9014 _89
    0 EQINT	//  actions msg_params _87=9014 _91
    THROWANYIFNOT
    9015 PUSHINT	//  actions msg_params _93=9015
    OVER
    4 PUSHINT	//  actions msg_params _93=9015 msg_params _94=4
    INDEXVAR	//  actions msg_params _93=9015 _95
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  actions msg_params _93=9015 _95 _96
    HASHSU SWAP HASHSU EQUAL	//  actions msg_params _93=9015 _97
    THROWANYIFNOT
    9016 PUSHINT	//  actions msg_params _99=9016
    OVER
    5 PUSHINT	//  actions msg_params _99=9016 msg_params _100=5
    INDEXVAR	//  actions msg_params _99=9016 _101
    9000000000 PUSHINT	//  actions msg_params _99=9016 _101 _102=9000000000
    EQUAL	//  actions msg_params _99=9016 _103
    THROWANYIFNOT
    9017 PUSHINT	//  actions msg_params _105=9017
    SWAP
    8 PUSHINT	//  actions _105=9017 msg_params _106=8
    INDEXVAR	//  actions _105=9017 _107
    931 PUSHINT	//  actions _105=9017 _107 _108=931
    3722217658 PUSHINT	//  actions _105=9017 _107 _108=931 _109=3722217658
    NEWC	//  actions _105=9017 _107 _108=931 _109=3722217658 _110
    32 STU	//  actions _105=9017 _107 _108=931 _112
    128 STU	//  actions _105=9017 _107 _114
    ENDC	//  actions _105=9017 _107 _115
    CTOS	//  actions _105=9017 _107 _116
    HASHSU SWAP HASHSU EQUAL	//  actions _105=9017 _117
    THROWANYIFNOT
    10012 PUSHINT	//  actions _119=10012
    OVER
    1 PUSHINT	//  actions _119=10012 actions _120=1
    INDEXVAR	//  actions _119=10012 _121
    0 PUSHINT	//  actions _119=10012 _121 _122=0
    INDEXVAR	//  actions _119=10012 _123
    0 EQINT	//  actions _119=10012 _125
    THROWANYIFNOT
    10013 PUSHINT	//  actions _127=10013
    OVER
    1 PUSHINT	//  actions _127=10013 actions _128=1
    INDEXVAR	//  actions _127=10013 _129
    2 PUSHINT	//  actions _127=10013 _129 _130=2
    INDEXVAR	//  actions _127=10013 _131
    130 PUSHINT	//  actions _127=10013 _131 _134
    EQUAL	//  actions _127=10013 _135
    THROWANYIFNOT
    1 PUSHINT	//  actions _137=1
    INDEXVAR	//  _138
    1 PUSHINT	//  _138 _139=1
    INDEXVAR	//  _140
    parse_internal_message CALLDICT	//  msg_params
    10014 PUSHINT	//  msg_params _142=10014
    OVER
    1 PUSHINT	//  msg_params _142=10014 msg_params _143=1
    INDEXVAR	//  msg_params _142=10014 _144
    0 EQINT	//  msg_params _142=10014 _146
    THROWANYIFNOT
    10015 PUSHINT	//  msg_params _148=10015
    OVER
    4 PUSHINT	//  msg_params _148=10015 msg_params _149=4
    INDEXVAR	//  msg_params _148=10015 _150
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  msg_params _148=10015 _150 _151
    HASHSU SWAP HASHSU EQUAL	//  msg_params _148=10015 _152
    THROWANYIFNOT
    10016 PUSHINT	//  msg_params _154=10016
    OVER
    5 PUSHINT	//  msg_params _154=10016 msg_params _155=5
    INDEXVAR	//  msg_params _154=10016 _156
    1 EQINT	//  msg_params _154=10016 _158
    THROWANYIFNOT
    10017 PUSHINT	//  msg_params _160=10017
    SWAP
    8 PUSHINT	//  _160=10017 msg_params _161=8
    INDEXVAR	//  _160=10017 _162
    931 PUSHINT	//  _160=10017 _162 _163=931
    3722217658 PUSHINT	//  _160=10017 _162 _163=931 _164=3722217658
    NEWC	//  _160=10017 _162 _163=931 _164=3722217658 _165
    32 STU	//  _160=10017 _162 _163=931 _167
    128 STU	//  _160=10017 _162 _169
    ENDC	//  _160=10017 _162 _170
    CTOS	//  _160=10017 _162 _171
    HASHSU SWAP HASHSU EQUAL	//  _160=10017 _172
    THROWANYIFNOT
    TRUE	//  _174
  }>
  __test_cooperative_close_wrong_channel_id PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _55 _56
    2DROP	// 
    20 PUSHINT	//  _7=20
    DUP	//  _7=20 _8=20
    777 PUSHINT	//  _7=20 _8=20 _9=777
    1131179891 PUSHINT	//  _7=20 _8=20 _9=777 _10=1131179891
    NEWC	//  _7=20 _8=20 _9=777 _10=1131179891 _11
    32 STU	//  _7=20 _8=20 _9=777 _13
    128 STU	//  _7=20 _8=20 _15
    3800000000 PUSHINT	//  _7=20 _8=20 _15 _16=3800000000
    STVARUINT16	//  _7=20 _8=20 _17
    4000000000 PUSHINT	//  _7=20 _8=20 _17 _18=4000000000
    STVARUINT16	//  _7=20 _8=20 _19
    64 STU	//  _7=20 _21
    64 STU	//  _23
    ENDC	//  _24
    CTOS	//  payload
    NEWC	//  payload _27
    OVER	//  payload _27 payload
    HASHSU	//  payload _27 _28
    3456 PUSHINT	//  payload _27 _28 _29=3456
    SIGN	//  payload _27 _30
    STSLICER	//  payload _31
    ENDC	//  payload _32
    NEWC	//  payload _32 _33
    s2 PUSH	//  payload _32 _33 payload
    HASHSU	//  payload _32 _33 _34
    777 PUSHINT	//  payload _32 _33 _34 _35=777
    SIGN	//  payload _32 _33 _36
    STSLICER	//  payload _32 _37
    ENDC	//  payload _32 _38
    1433884798 PUSHINT	//  payload _32 _38 _39=1433884798
    NEWC	//  payload _32 _38 _39=1433884798 _40
    32 STU	//  payload _32 _38 _42
    STREF	//  payload _32 _43
    STREF	//  payload _44
    SWAP	//  _44 payload
    STSLICER	//  _45
    ENDC	//  _46
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _48
    8000000000 PUSHINT	//  body _48 _50=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _48 _50=8000000000 _51 _52 body
    4 TUPLE	//  _48 _49
    invoke_method_expect_fail CALLDICT	//  _53
    DROP	// 
    TRUE	//  _54
  }>
  __test_cooperative_commit PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _168 _169
    2DROP	// 
    29 PUSHINT	//  _7=29
    26 PUSHINT	//  _7=29 _8=26
    931 PUSHINT	//  _7=29 _8=26 _9=931
    1128492404 PUSHINT	//  _7=29 _8=26 _9=931 _10=1128492404
    NEWC	//  _7=29 _8=26 _9=931 _10=1128492404 _11
    32 STU	//  _7=29 _8=26 _9=931 _13
    128 STU	//  _7=29 _8=26 _15
    64 STU	//  _7=29 _17
    64 STU	//  _19
    ENDC	//  _20
    CTOS	//  payload
    NEWC	//  payload _23
    OVER	//  payload _23 payload
    HASHSU	//  payload _23 _24
    3456 PUSHINT	//  payload _23 _24 _25=3456
    SIGN	//  payload _23 _26
    STSLICER	//  payload _27
    ENDC	//  payload _28
    NEWC	//  payload _28 _29
    s2 PUSH	//  payload _28 _29 payload
    HASHSU	//  payload _28 _29 _30
    777 PUSHINT	//  payload _28 _29 _30 _31=777
    SIGN	//  payload _28 _29 _32
    STSLICER	//  payload _28 _33
    ENDC	//  payload _28 _34
    2040604399 PUSHINT	//  payload _28 _34 _35=2040604399
    NEWC	//  payload _28 _34 _35=2040604399 _36
    32 STU	//  payload _28 _34 _38
    STREF	//  payload _28 _39
    STREF	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method CALLDICT	//  _170 _171
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _52
    0 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _172 _173
    NIP	//  stack
    9001 PUSHINT	//  stack _55=9001
    OVER	//  stack _55=9001 stack
    FIRST	//  stack _55=9001 _56
    1 EQINT	//  stack _55=9001 _58
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _62=1
    INDEXVAR	//  stack _63
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _65=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _65=9002 r_bB r_bA _70
    EQUAL	//  stack _65=9002 r_bB _71
    s1 s2 XCHG	//  stack r_bB _65=9002 _71
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _73=9003
    SWAP	//  stack _73=9003 r_bB
    0 EQINT	//  stack _73=9003 _75
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _79=2
    INDEXVAR	//  stack _80
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _82=9004
    777 PUSHINT	//  stack r_pkA r_pkB _82=9004 _83=777
    PRIVTOPUB	//  stack r_pkA r_pkB _82=9004 _84
    s1 s3 XCHG	//  stack _82=9004 r_pkB r_pkA _84
    EQUAL	//  stack _82=9004 r_pkB _85
    s1 s2 XCHG	//  stack r_pkB _82=9004 _85
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _87=9005
    3456 PUSHINT	//  stack r_pkB _87=9005 _88=3456
    PRIVTOPUB	//  stack r_pkB _87=9005 _89
    s1 s2 XCHG	//  stack _87=9005 r_pkB _89
    EQUAL	//  stack _87=9005 _90
    THROWANYIFNOT
    9006 PUSHINT	//  stack _92=9006
    OVER
    3 PUSHINT	//  stack _92=9006 stack _93=3
    INDEXVAR	//  stack _92=9006 _94
    931 PUSHINT	//  stack _92=9006 _94 _95=931
    EQUAL	//  stack _92=9006 _96
    THROWANYIFNOT
    9007 PUSHINT	//  stack _98=9007
    OVER
    4 PUSHINT	//  stack _98=9007 stack _99=4
    INDEXVAR	//  stack _98=9007 _100
    0 PUSHINT	//  stack _98=9007 _100 _101=0
    INDEXVAR	//  stack _98=9007 _102
    86400 PUSHINT	//  stack _98=9007 _102 _103=86400
    EQUAL	//  stack _98=9007 _104
    THROWANYIFNOT
    9007 PUSHINT	//  stack _106=9007
    OVER
    4 PUSHINT	//  stack _106=9007 stack _107=4
    INDEXVAR	//  stack _106=9007 _108
    1 PUSHINT	//  stack _106=9007 _108 _109=1
    INDEXVAR	//  stack _106=9007 _110
    30000000 PUSHINT	//  stack _106=9007 _110 _111=30000000
    EQUAL	//  stack _106=9007 _112
    THROWANYIFNOT
    9007 PUSHINT	//  stack _114=9007
    OVER
    4 PUSHINT	//  stack _114=9007 stack _115=4
    INDEXVAR	//  stack _114=9007 _116
    2 PUSHINT	//  stack _114=9007 _116 _117=2
    INDEXVAR	//  stack _114=9007 _118
    3600 PUSHINT	//  stack _114=9007 _118 _119=3600
    EQUAL	//  stack _114=9007 _120
    THROWANYIFNOT
    9008 PUSHINT	//  stack _122=9008
    OVER
    5 PUSHINT	//  stack _122=9008 stack _123=5
    INDEXVAR	//  stack _122=9008 _124
    0 PUSHINT	//  stack _122=9008 _124 _125=0
    INDEXVAR	//  stack _122=9008 _126
    26 EQINT	//  stack _122=9008 _128
    THROWANYIFNOT
    9008 PUSHINT	//  stack _130=9008
    OVER
    5 PUSHINT	//  stack _130=9008 stack _131=5
    INDEXVAR	//  stack _130=9008 _132
    1 PUSHINT	//  stack _130=9008 _132 _133=1
    INDEXVAR	//  stack _130=9008 _134
    29 EQINT	//  stack _130=9008 _136
    THROWANYIFNOT
    9009 PUSHINT	//  stack _138=9009
    OVER
    6 PUSHINT	//  stack _138=9009 stack _139=6
    INDEXVAR	//  stack _138=9009 _140
    ISNULL	//  stack _138=9009 _141
    THROWANYIFNOT
    9010 PUSHINT	//  stack _143=9010
    OVER
    7 PUSHINT	//  stack _143=9010 stack _144=7
    INDEXVAR	//  stack _143=9010 _145
    0 PUSHINT	//  stack _143=9010 _145 _146=0
    INDEXVAR	//  stack _143=9010 _147
    30000000 PUSHINT	//  stack _143=9010 _147 _148=30000000
    EQUAL	//  stack _143=9010 _149
    THROWANYIFNOT
    9010 PUSHINT	//  stack _151=9010
    OVER
    7 PUSHINT	//  stack _151=9010 stack _152=7
    INDEXVAR	//  stack _151=9010 _153
    1 PUSHINT	//  stack _151=9010 _153 _154=1
    INDEXVAR	//  stack _151=9010 _155
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _151=9010 _155 _156
    HASHSU SWAP HASHSU EQUAL	//  stack _151=9010 _157
    THROWANYIFNOT
    9010 PUSHINT	//  stack _159=9010
    SWAP
    7 PUSHINT	//  _159=9010 stack _160=7
    INDEXVAR	//  _159=9010 _161
    2 PUSHINT	//  _159=9010 _161 _162=2
    INDEXVAR	//  _159=9010 _163
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _159=9010 _163 _164
    HASHSU SWAP HASHSU EQUAL	//  _159=9010 _165
    THROWANYIFNOT
    TRUE	//  _167
  }>
  __test_cooperative_commit_unauthorized PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _107 _108
    2DROP	// 
    29 PUSHINT	//  _7=29
    26 PUSHINT	//  _7=29 _8=26
    931 PUSHINT	//  _7=29 _8=26 _9=931
    1128492404 PUSHINT	//  _7=29 _8=26 _9=931 _10=1128492404
    NEWC	//  _7=29 _8=26 _9=931 _10=1128492404 _11
    32 STU	//  _7=29 _8=26 _9=931 _13
    128 STU	//  _7=29 _8=26 _15
    64 STU	//  _7=29 _17
    64 STU	//  _19
    ENDC	//  _20
    CTOS	//  payload
    NEWC	//  payload _23
    OVER	//  payload _23 payload
    HASHSU	//  payload _23 _24
    777 PUSHINT	//  payload _23 _24 _25=777
    SIGN	//  payload _23 _26
    STSLICER	//  payload _27
    ENDC	//  payload _28
    NEWC	//  payload _28 _29
    s2 PUSH	//  payload _28 _29 payload
    HASHSU	//  payload _28 _29 _30
    777 PUSHINT	//  payload _28 _29 _30 _31=777
    SIGN	//  payload _28 _29 _32
    STSLICER	//  payload _28 _33
    ENDC	//  payload _28 _34
    2040604399 PUSHINT	//  payload _28 _34 _35=2040604399
    NEWC	//  payload _28 _34 _35=2040604399 _36
    32 STU	//  payload _28 _34 _38
    STREF	//  payload _28 _39
    STREF	//  payload _40
    OVER	//  payload _40 payload
    STSLICER	//  payload _41
    ENDC	//  payload _42
    CTOS	//  payload body
    CONT:<{
      recv_internal CALLDICT
    }>	//  payload body _44
    8000000000 PUSHINT	//  payload body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  payload _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  payload _44 _45
    invoke_method_expect_fail CALLDICT	//  payload _49
    DROP	//  payload
    NEWC	//  payload _51
    OVER	//  payload _51 payload
    HASHSU	//  payload _51 _52
    3456 PUSHINT	//  payload _51 _52 _53=3456
    SIGN	//  payload _51 _54
    STSLICER	//  payload _55
    ENDC	//  payload _56
    NEWC	//  payload _56 _57
    s2 PUSH	//  payload _56 _57 payload
    HASHSU	//  payload _56 _57 _58
    12452 PUSHINT	//  payload _56 _57 _58 _59=12452
    SIGN	//  payload _56 _57 _60
    STSLICER	//  payload _56 _61
    ENDC	//  payload _56 _62
    2040604399 PUSHINT	//  payload _56 _62 _63=2040604399
    NEWC	//  payload _56 _62 _63=2040604399 _64
    32 STU	//  payload _56 _62 _66
    STREF	//  payload _56 _67
    STREF	//  payload _68
    OVER	//  payload _68 payload
    STSLICER	//  payload _69
    ENDC	//  payload _70
    CTOS	//  payload body
    CONT:<{
      recv_internal CALLDICT
    }>	//  payload body _72
    8000000000 PUSHINT	//  payload body _72 _74=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  payload _72 _74=8000000000 _75 _76 body
    4 TUPLE	//  payload _72 _73
    invoke_method_expect_fail CALLDICT	//  payload _77
    DROP	//  payload
    NEWC	//  payload _79
    OVER	//  payload _79 payload
    HASHSU	//  payload _79 _80
    777 PUSHINT	//  payload _79 _80 _81=777
    SIGN	//  payload _79 _82
    STSLICER	//  payload _83
    ENDC	//  payload _84
    NEWC	//  payload _84 _85
    s2 PUSH	//  payload _84 _85 payload
    HASHSU	//  payload _84 _85 _86
    3456 PUSHINT	//  payload _84 _85 _86 _87=3456
    SIGN	//  payload _84 _85 _88
    STSLICER	//  payload _84 _89
    ENDC	//  payload _84 _90
    2040604399 PUSHINT	//  payload _84 _90 _91=2040604399
    NEWC	//  payload _84 _90 _91=2040604399 _92
    32 STU	//  payload _84 _90 _94
    STREF	//  payload _84 _95
    STREF	//  payload _96
    SWAP	//  _96 payload
    STSLICER	//  _97
    ENDC	//  _98
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _100
    8000000000 PUSHINT	//  body _100 _102=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _100 _102=8000000000 _103 _104 body
    4 TUPLE	//  _100 _101
    invoke_method_expect_fail CALLDICT	//  _105
    DROP	// 
    TRUE	//  _106
  }>
  __test_cooperative_commit_seqnos_decrease PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _95 _96
    2DROP	// 
    10 PUSHINT	//  _7=10
    6 PUSHINT	//  _7=10 _8=6
    931 PUSHINT	//  _7=10 _8=6 _9=931
    1128492404 PUSHINT	//  _7=10 _8=6 _9=931 _10=1128492404
    NEWC	//  _7=10 _8=6 _9=931 _10=1128492404 _11
    32 STU	//  _7=10 _8=6 _9=931 _13
    128 STU	//  _7=10 _8=6 _15
    64 STU	//  _7=10 _17
    64 STU	//  _19
    ENDC	//  _20
    CTOS	//  payload
    NEWC	//  payload _23
    OVER	//  payload _23 payload
    HASHSU	//  payload _23 _24
    777 PUSHINT	//  payload _23 _24 _25=777
    SIGN	//  payload _23 _26
    STSLICER	//  payload _27
    ENDC	//  payload _28
    NEWC	//  payload _28 _29
    s2 PUSH	//  payload _28 _29 payload
    HASHSU	//  payload _28 _29 _30
    777 PUSHINT	//  payload _28 _29 _30 _31=777
    SIGN	//  payload _28 _29 _32
    STSLICER	//  payload _28 _33
    ENDC	//  payload _28 _34
    2040604399 PUSHINT	//  payload _28 _34 _35=2040604399
    NEWC	//  payload _28 _34 _35=2040604399 _36
    32 STU	//  payload _28 _34 _38
    STREF	//  payload _28 _39
    STREF	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method_expect_fail CALLDICT	//  _49
    DROP	// 
    11 PUSHINT	//  _51=11
    7 PUSHINT	//  _51=11 _52=7
    931 PUSHINT	//  _51=11 _52=7 _53=931
    1128492404 PUSHINT	//  _51=11 _52=7 _53=931 _54=1128492404
    NEWC	//  _51=11 _52=7 _53=931 _54=1128492404 _55
    32 STU	//  _51=11 _52=7 _53=931 _57
    128 STU	//  _51=11 _52=7 _59
    64 STU	//  _51=11 _61
    64 STU	//  _63
    ENDC	//  _64
    CTOS	//  payload
    NEWC	//  payload _67
    OVER	//  payload _67 payload
    HASHSU	//  payload _67 _68
    777 PUSHINT	//  payload _67 _68 _69=777
    SIGN	//  payload _67 _70
    STSLICER	//  payload _71
    ENDC	//  payload _72
    NEWC	//  payload _72 _73
    s2 PUSH	//  payload _72 _73 payload
    HASHSU	//  payload _72 _73 _74
    777 PUSHINT	//  payload _72 _73 _74 _75=777
    SIGN	//  payload _72 _73 _76
    STSLICER	//  payload _72 _77
    ENDC	//  payload _72 _78
    2040604399 PUSHINT	//  payload _72 _78 _79=2040604399
    NEWC	//  payload _72 _78 _79=2040604399 _80
    32 STU	//  payload _72 _78 _82
    STREF	//  payload _72 _83
    STREF	//  payload _84
    SWAP	//  _84 payload
    STSLICER	//  _85
    ENDC	//  _86
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _88
    8000000000 PUSHINT	//  body _88 _90=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _88 _90=8000000000 _91 _92 body
    4 TUPLE	//  _88 _89
    invoke_method_expect_fail CALLDICT	//  _93
    DROP	// 
    TRUE	//  _94
  }>
  __test_cooperative_commit_wrong_channel_id PROC:<{
    // 
    init_channel_helper CALLDICT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method CALLDICT	//  _51 _52
    2DROP	// 
    29 PUSHINT	//  _7=29
    26 PUSHINT	//  _7=29 _8=26
    9887 PUSHINT	//  _7=29 _8=26 _9=9887
    1128492404 PUSHINT	//  _7=29 _8=26 _9=9887 _10=1128492404
    NEWC	//  _7=29 _8=26 _9=9887 _10=1128492404 _11
    32 STU	//  _7=29 _8=26 _9=9887 _13
    128 STU	//  _7=29 _8=26 _15
    64 STU	//  _7=29 _17
    64 STU	//  _19
    ENDC	//  _20
    CTOS	//  payload
    NEWC	//  payload _23
    OVER	//  payload _23 payload
    HASHSU	//  payload _23 _24
    3456 PUSHINT	//  payload _23 _24 _25=3456
    SIGN	//  payload _23 _26
    STSLICER	//  payload _27
    ENDC	//  payload _28
    NEWC	//  payload _28 _29
    s2 PUSH	//  payload _28 _29 payload
    HASHSU	//  payload _28 _29 _30
    777 PUSHINT	//  payload _28 _29 _30 _31=777
    SIGN	//  payload _28 _29 _32
    STSLICER	//  payload _28 _33
    ENDC	//  payload _28 _34
    2040604399 PUSHINT	//  payload _28 _34 _35=2040604399
    NEWC	//  payload _28 _34 _35=2040604399 _36
    32 STU	//  payload _28 _34 _38
    STREF	//  payload _28 _39
    STREF	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method_expect_fail CALLDICT	//  _49
    DROP	// 
    TRUE	//  _50
  }>
  build_semichannel_state PROC:<{
    //  seqno sent cp counterparty_state
    931 PUSHINT	//  seqno sent cp counterparty_state _4=931
    1130910580 PUSHINT	//  seqno sent cp counterparty_state _4=931 _5=1130910580
    NEWC	//  seqno sent cp counterparty_state _4=931 _5=1130910580 _6
    32 STU	//  seqno sent cp counterparty_state _4=931 _8
    128 STU	//  seqno sent cp counterparty_state _10
    s1 s4 XCHG	//  counterparty_state sent cp seqno _10
    64 STU	//  counterparty_state sent cp _12
    ROT	//  counterparty_state cp _12 sent
    STVARUINT16	//  counterparty_state cp _13
    STOPTREF	//  counterparty_state _14
    STOPTREF	//  _15
    ENDC	//  _16
    CTOS	//  _17
  }>
  build_signed_semichannel PROC:<{
    //  privkey seqno sent cp counterparty_state
    build_semichannel_state CALLDICT	//  privkey state
    NEWC	//  privkey state _7
    OVER	//  privkey state _7 state
    HASHSU	//  privkey state _7 _8
    s0 s3 XCHG2	//  _7 state _8 privkey
    SIGN	//  _7 state _9
    s1 s2 XCHG	//  state _7 _9
    STSLICER	//  state _10
    SWAP	//  _10 state
    STSLICER	//  _11
    ENDC	//  _12
  }>
  build_semichannel_state_wrong_channel_id PROC:<{
    //  seqno sent cp counterparty_state
    932 PUSHINT	//  seqno sent cp counterparty_state _6
    1130910580 PUSHINT	//  seqno sent cp counterparty_state _6 _7=1130910580
    NEWC	//  seqno sent cp counterparty_state _6 _7=1130910580 _8
    32 STU	//  seqno sent cp counterparty_state _6 _10
    128 STU	//  seqno sent cp counterparty_state _12
    s1 s4 XCHG	//  counterparty_state sent cp seqno _12
    64 STU	//  counterparty_state sent cp _14
    ROT	//  counterparty_state cp _14 sent
    STVARUINT16	//  counterparty_state cp _15
    STOPTREF	//  counterparty_state _16
    STOPTREF	//  _17
    ENDC	//  _18
    CTOS	//  _19
  }>
  build_signed_semichannel_wrong_channel_id PROC:<{
    //  privkey seqno sent cp counterparty_state
    build_semichannel_state_wrong_channel_id CALLDICT	//  privkey state
    NEWC	//  privkey state _7
    OVER	//  privkey state _7 state
    HASHSU	//  privkey state _7 _8
    s0 s3 XCHG2	//  _7 state _8 privkey
    SIGN	//  _7 state _9
    s1 s2 XCHG	//  state _7 _9
    STSLICER	//  state _10
    SWAP	//  _10 state
    STSLICER	//  _11
    ENDC	//  _12
  }>
  __test_start_uncooperative_close_null_state_Alice PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    7 PUSHINT	//  _2=777 _3=7
    0 PUSHINT	//  _2=777 _3=7 _4=0
    PUSHNULL	//  _2=777 _3=7 _4=0 _5
    PUSHNULL	//  _2=777 _3=7 _4=0 _5 _6
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _9=3456
    11 PUSHINT	//  alice_zerostate _9=3456 _10=11
    0 PUSHINT	//  alice_zerostate _9=3456 _10=11 _11=0
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12 _13
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _18=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _18=931 _19=1433289580
    NEWC	//  alice_zerostate bob_zerostate _18=931 _19=1433289580 _20
    32 STU	//  alice_zerostate bob_zerostate _18=931 _22
    128 STU	//  alice_zerostate bob_zerostate _24
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _24
    STREF	//  bob_zerostate _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    TRUE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    777 PUSHINT	//  payload _36 _37 _38=777
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method CALLDICT	//  _194 _195
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _52
    0 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _196 _197
    NIP	//  stack
    9001 PUSHINT	//  stack _55=9001
    OVER	//  stack _55=9001 stack
    FIRST	//  stack _55=9001 _56
    2 EQINT	//  stack _55=9001 _58
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _62=1
    INDEXVAR	//  stack _63
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _65=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _65=9002 r_bB r_bA _70
    EQUAL	//  stack _65=9002 r_bB _71
    s1 s2 XCHG	//  stack r_bB _65=9002 _71
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _73=9003
    SWAP	//  stack _73=9003 r_bB
    0 EQINT	//  stack _73=9003 _75
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _79=2
    INDEXVAR	//  stack _80
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _82=9004
    777 PUSHINT	//  stack r_pkA r_pkB _82=9004 _83=777
    PRIVTOPUB	//  stack r_pkA r_pkB _82=9004 _84
    s1 s3 XCHG	//  stack _82=9004 r_pkB r_pkA _84
    EQUAL	//  stack _82=9004 r_pkB _85
    s1 s2 XCHG	//  stack r_pkB _82=9004 _85
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _87=9005
    3456 PUSHINT	//  stack r_pkB _87=9005 _88=3456
    PRIVTOPUB	//  stack r_pkB _87=9005 _89
    s1 s2 XCHG	//  stack _87=9005 r_pkB _89
    EQUAL	//  stack _87=9005 _90
    THROWANYIFNOT
    9006 PUSHINT	//  stack _92=9006
    OVER
    3 PUSHINT	//  stack _92=9006 stack _93=3
    INDEXVAR	//  stack _92=9006 _94
    931 PUSHINT	//  stack _92=9006 _94 _95=931
    EQUAL	//  stack _92=9006 _96
    THROWANYIFNOT
    9007 PUSHINT	//  stack _98=9007
    OVER
    4 PUSHINT	//  stack _98=9007 stack _99=4
    INDEXVAR	//  stack _98=9007 _100
    0 PUSHINT	//  stack _98=9007 _100 _101=0
    INDEXVAR	//  stack _98=9007 _102
    86400 PUSHINT	//  stack _98=9007 _102 _103=86400
    EQUAL	//  stack _98=9007 _104
    THROWANYIFNOT
    9007 PUSHINT	//  stack _106=9007
    OVER
    4 PUSHINT	//  stack _106=9007 stack _107=4
    INDEXVAR	//  stack _106=9007 _108
    1 PUSHINT	//  stack _106=9007 _108 _109=1
    INDEXVAR	//  stack _106=9007 _110
    30000000 PUSHINT	//  stack _106=9007 _110 _111=30000000
    EQUAL	//  stack _106=9007 _112
    THROWANYIFNOT
    9007 PUSHINT	//  stack _114=9007
    OVER
    4 PUSHINT	//  stack _114=9007 stack _115=4
    INDEXVAR	//  stack _114=9007 _116
    2 PUSHINT	//  stack _114=9007 _116 _117=2
    INDEXVAR	//  stack _114=9007 _118
    3600 PUSHINT	//  stack _114=9007 _118 _119=3600
    EQUAL	//  stack _114=9007 _120
    THROWANYIFNOT
    9008 PUSHINT	//  stack _122=9008
    OVER
    5 PUSHINT	//  stack _122=9008 stack _123=5
    INDEXVAR	//  stack _122=9008 _124
    0 PUSHINT	//  stack _122=9008 _124 _125=0
    INDEXVAR	//  stack _122=9008 _126
    7 EQINT	//  stack _122=9008 _128
    THROWANYIFNOT
    9008 PUSHINT	//  stack _130=9008
    OVER
    5 PUSHINT	//  stack _130=9008 stack _131=5
    INDEXVAR	//  stack _130=9008 _132
    1 PUSHINT	//  stack _130=9008 _132 _133=1
    INDEXVAR	//  stack _130=9008 _134
    11 EQINT	//  stack _130=9008 _136
    THROWANYIFNOT
    FALSE	//  stack _139
    TRUE	//  stack _139 _140
    1777 PUSHINT	//  stack _139 _140 _141=1777
    PUSHNULL	//  stack _139 _140 _141=1777 _142
    11 PUSHINT	//  stack _139 _140 _141=1777 _142 _143=11
    PUSHNULL	//  stack _139 _140 _141=1777 _142 _143=11 _144
    7 PUSHINT	//  stack _139 _140 _141=1777 _142 _143=11 _144 _145=7
    NEWC	//  stack _139 _140 _141=1777 _142 _143=11 _144 _145=7 _146
    64 STU	//  stack _139 _140 _141=1777 _142 _143=11 _144 _148
    0 PUSHINT	//  stack _139 _140 _141=1777 _142 _143=11 _144 _148 _149=0
    STVARUINT16	//  stack _139 _140 _141=1777 _142 _143=11 _144 _150
    STDICT	//  stack _139 _140 _141=1777 _142 _143=11 _151
    64 STU	//  stack _139 _140 _141=1777 _142 _153
    0 PUSHINT	//  stack _139 _140 _141=1777 _142 _153 _154=0
    STVARUINT16	//  stack _139 _140 _141=1777 _142 _155
    STDICT	//  stack _139 _140 _141=1777 _156
    32 STU	//  stack _139 _140 _158
    1 STI	//  stack _139 _160
    1 STI	//  stack _162
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _164=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _164=9009 stack _165=6
    INDEXVAR	//  stack quarantined_state _164=9009 _166
    ROT	//  stack _164=9009 _166 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _164=9009 _167
    THROWANYIFNOT
    9010 PUSHINT	//  stack _169=9010
    OVER
    7 PUSHINT	//  stack _169=9010 stack _170=7
    INDEXVAR	//  stack _169=9010 _171
    0 PUSHINT	//  stack _169=9010 _171 _172=0
    INDEXVAR	//  stack _169=9010 _173
    30000000 PUSHINT	//  stack _169=9010 _173 _174=30000000
    EQUAL	//  stack _169=9010 _175
    THROWANYIFNOT
    9010 PUSHINT	//  stack _177=9010
    OVER
    7 PUSHINT	//  stack _177=9010 stack _178=7
    INDEXVAR	//  stack _177=9010 _179
    1 PUSHINT	//  stack _177=9010 _179 _180=1
    INDEXVAR	//  stack _177=9010 _181
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _177=9010 _181 _182
    HASHSU SWAP HASHSU EQUAL	//  stack _177=9010 _183
    THROWANYIFNOT
    9010 PUSHINT	//  stack _185=9010
    SWAP
    7 PUSHINT	//  _185=9010 stack _186=7
    INDEXVAR	//  _185=9010 _187
    2 PUSHINT	//  _185=9010 _187 _188=2
    INDEXVAR	//  _185=9010 _189
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _185=9010 _189 _190
    HASHSU SWAP HASHSU EQUAL	//  _185=9010 _191
    THROWANYIFNOT
    TRUE	//  _193
  }>
  __test_start_uncooperative_close_null_state_Bob PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    7 PUSHINT	//  _2=777 _3=7
    0 PUSHINT	//  _2=777 _3=7 _4=0
    PUSHNULL	//  _2=777 _3=7 _4=0 _5
    PUSHNULL	//  _2=777 _3=7 _4=0 _5 _6
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _9=3456
    11 PUSHINT	//  alice_zerostate _9=3456 _10=11
    0 PUSHINT	//  alice_zerostate _9=3456 _10=11 _11=0
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12 _13
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _18=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _18=931 _19=1433289580
    NEWC	//  alice_zerostate bob_zerostate _18=931 _19=1433289580 _20
    32 STU	//  alice_zerostate bob_zerostate _18=931 _22
    128 STU	//  alice_zerostate bob_zerostate _24
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _24
    STREF	//  bob_zerostate _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method CALLDICT	//  _194 _195
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _52
    0 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _196 _197
    NIP	//  stack
    9001 PUSHINT	//  stack _55=9001
    OVER	//  stack _55=9001 stack
    FIRST	//  stack _55=9001 _56
    2 EQINT	//  stack _55=9001 _58
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _62=1
    INDEXVAR	//  stack _63
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _65=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _65=9002 r_bB r_bA _70
    EQUAL	//  stack _65=9002 r_bB _71
    s1 s2 XCHG	//  stack r_bB _65=9002 _71
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _73=9003
    SWAP	//  stack _73=9003 r_bB
    0 EQINT	//  stack _73=9003 _75
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _79=2
    INDEXVAR	//  stack _80
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _82=9004
    777 PUSHINT	//  stack r_pkA r_pkB _82=9004 _83=777
    PRIVTOPUB	//  stack r_pkA r_pkB _82=9004 _84
    s1 s3 XCHG	//  stack _82=9004 r_pkB r_pkA _84
    EQUAL	//  stack _82=9004 r_pkB _85
    s1 s2 XCHG	//  stack r_pkB _82=9004 _85
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _87=9005
    3456 PUSHINT	//  stack r_pkB _87=9005 _88=3456
    PRIVTOPUB	//  stack r_pkB _87=9005 _89
    s1 s2 XCHG	//  stack _87=9005 r_pkB _89
    EQUAL	//  stack _87=9005 _90
    THROWANYIFNOT
    9006 PUSHINT	//  stack _92=9006
    OVER
    3 PUSHINT	//  stack _92=9006 stack _93=3
    INDEXVAR	//  stack _92=9006 _94
    931 PUSHINT	//  stack _92=9006 _94 _95=931
    EQUAL	//  stack _92=9006 _96
    THROWANYIFNOT
    9007 PUSHINT	//  stack _98=9007
    OVER
    4 PUSHINT	//  stack _98=9007 stack _99=4
    INDEXVAR	//  stack _98=9007 _100
    0 PUSHINT	//  stack _98=9007 _100 _101=0
    INDEXVAR	//  stack _98=9007 _102
    86400 PUSHINT	//  stack _98=9007 _102 _103=86400
    EQUAL	//  stack _98=9007 _104
    THROWANYIFNOT
    9007 PUSHINT	//  stack _106=9007
    OVER
    4 PUSHINT	//  stack _106=9007 stack _107=4
    INDEXVAR	//  stack _106=9007 _108
    1 PUSHINT	//  stack _106=9007 _108 _109=1
    INDEXVAR	//  stack _106=9007 _110
    30000000 PUSHINT	//  stack _106=9007 _110 _111=30000000
    EQUAL	//  stack _106=9007 _112
    THROWANYIFNOT
    9007 PUSHINT	//  stack _114=9007
    OVER
    4 PUSHINT	//  stack _114=9007 stack _115=4
    INDEXVAR	//  stack _114=9007 _116
    2 PUSHINT	//  stack _114=9007 _116 _117=2
    INDEXVAR	//  stack _114=9007 _118
    3600 PUSHINT	//  stack _114=9007 _118 _119=3600
    EQUAL	//  stack _114=9007 _120
    THROWANYIFNOT
    9008 PUSHINT	//  stack _122=9008
    OVER
    5 PUSHINT	//  stack _122=9008 stack _123=5
    INDEXVAR	//  stack _122=9008 _124
    0 PUSHINT	//  stack _122=9008 _124 _125=0
    INDEXVAR	//  stack _122=9008 _126
    7 EQINT	//  stack _122=9008 _128
    THROWANYIFNOT
    9008 PUSHINT	//  stack _130=9008
    OVER
    5 PUSHINT	//  stack _130=9008 stack _131=5
    INDEXVAR	//  stack _130=9008 _132
    1 PUSHINT	//  stack _130=9008 _132 _133=1
    INDEXVAR	//  stack _130=9008 _134
    11 EQINT	//  stack _130=9008 _136
    THROWANYIFNOT
    FALSE	//  stack _139
    FALSE	//  stack _139 _140
    1777 PUSHINT	//  stack _139 _140 _141=1777
    PUSHNULL	//  stack _139 _140 _141=1777 _142
    11 PUSHINT	//  stack _139 _140 _141=1777 _142 _143=11
    PUSHNULL	//  stack _139 _140 _141=1777 _142 _143=11 _144
    7 PUSHINT	//  stack _139 _140 _141=1777 _142 _143=11 _144 _145=7
    NEWC	//  stack _139 _140 _141=1777 _142 _143=11 _144 _145=7 _146
    64 STU	//  stack _139 _140 _141=1777 _142 _143=11 _144 _148
    0 PUSHINT	//  stack _139 _140 _141=1777 _142 _143=11 _144 _148 _149=0
    STVARUINT16	//  stack _139 _140 _141=1777 _142 _143=11 _144 _150
    STDICT	//  stack _139 _140 _141=1777 _142 _143=11 _151
    64 STU	//  stack _139 _140 _141=1777 _142 _153
    0 PUSHINT	//  stack _139 _140 _141=1777 _142 _153 _154=0
    STVARUINT16	//  stack _139 _140 _141=1777 _142 _155
    STDICT	//  stack _139 _140 _141=1777 _156
    32 STU	//  stack _139 _140 _158
    1 STI	//  stack _139 _160
    1 STI	//  stack _162
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _164=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _164=9009 stack _165=6
    INDEXVAR	//  stack quarantined_state _164=9009 _166
    ROT	//  stack _164=9009 _166 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _164=9009 _167
    THROWANYIFNOT
    9010 PUSHINT	//  stack _169=9010
    OVER
    7 PUSHINT	//  stack _169=9010 stack _170=7
    INDEXVAR	//  stack _169=9010 _171
    0 PUSHINT	//  stack _169=9010 _171 _172=0
    INDEXVAR	//  stack _169=9010 _173
    30000000 PUSHINT	//  stack _169=9010 _173 _174=30000000
    EQUAL	//  stack _169=9010 _175
    THROWANYIFNOT
    9010 PUSHINT	//  stack _177=9010
    OVER
    7 PUSHINT	//  stack _177=9010 stack _178=7
    INDEXVAR	//  stack _177=9010 _179
    1 PUSHINT	//  stack _177=9010 _179 _180=1
    INDEXVAR	//  stack _177=9010 _181
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _177=9010 _181 _182
    HASHSU SWAP HASHSU EQUAL	//  stack _177=9010 _183
    THROWANYIFNOT
    9010 PUSHINT	//  stack _185=9010
    SWAP
    7 PUSHINT	//  _185=9010 stack _186=7
    INDEXVAR	//  _185=9010 _187
    2 PUSHINT	//  _185=9010 _187 _188=2
    INDEXVAR	//  _185=9010 _189
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _185=9010 _189 _190
    HASHSU SWAP HASHSU EQUAL	//  _185=9010 _191
    THROWANYIFNOT
    TRUE	//  _193
  }>
  __test_start_uncooperative_close_not_null_with_refs PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    8 PUSHINT	//  _2=777 _3=8
    1 PUSHINT	//  _2=777 _3=8 _4=1
    PUSHNULL	//  _2=777 _3=8 _4=1 _5
    PUSHNULL	//  _2=777 _3=8 _4=1 _5 _6
    11 PUSHINT	//  _2=777 _3=8 _4=1 _5 _6 _7=11
    NEWC	//  _2=777 _3=8 _4=1 _5 _6 _7=11 _8
    64 STU	//  _2=777 _3=8 _4=1 _5 _6 _10
    0 PUSHINT	//  _2=777 _3=8 _4=1 _5 _6 _10 _11=0
    STVARUINT16	//  _2=777 _3=8 _4=1 _5 _6 _12
    STOPTREF	//  _2=777 _3=8 _4=1 _5 _13
    ENDC	//  _2=777 _3=8 _4=1 _5 _14
    build_signed_semichannel CALLDICT	//  alice_nextstate
    3456 PUSHINT	//  alice_nextstate _17=3456
    12 PUSHINT	//  alice_nextstate _17=3456 _18=12
    2 PUSHINT	//  alice_nextstate _17=3456 _18=12 _19=2
    PUSHNULL	//  alice_nextstate _17=3456 _18=12 _19=2 _20
    PUSHNULL	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _21
    7 PUSHINT	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _21 _22=7
    NEWC	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _21 _22=7 _23
    64 STU	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _21 _25
    0 PUSHINT	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _21 _25 _26=0
    STVARUINT16	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _21 _27
    STOPTREF	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _28
    ENDC	//  alice_nextstate _17=3456 _18=12 _19=2 _20 _29
    build_signed_semichannel CALLDICT	//  alice_nextstate bob_nextstate
    1777 PUSHINT	//  alice_nextstate bob_nextstate _31=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_nextstate bob_nextstate _34=931
    1433289580 PUSHINT	//  alice_nextstate bob_nextstate _34=931 _35=1433289580
    NEWC	//  alice_nextstate bob_nextstate _34=931 _35=1433289580 _36
    32 STU	//  alice_nextstate bob_nextstate _34=931 _38
    128 STU	//  alice_nextstate bob_nextstate _40
    s1 s2 XCHG	//  bob_nextstate alice_nextstate _40
    STREF	//  bob_nextstate _41
    STREF	//  _42
    ENDC	//  _43
    CTOS	//  payload
    TRUE	//  payload _46
    521476815 PUSHINT	//  payload _46 _47=521476815
    NEWC	//  payload _46 _47=521476815 _48
    32 STU	//  payload _46 _50
    1 STI	//  payload _52
    OVER	//  payload _52 payload
    HASHSU	//  payload _52 _53
    777 PUSHINT	//  payload _52 _53 _54=777
    SIGN	//  payload _52 _55
    STSLICER	//  payload _56
    SWAP	//  _56 payload
    STSLICER	//  _57
    ENDC	//  _58
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _60
    8000000000 PUSHINT	//  body _60 _62=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _60 _62=8000000000 _63 _64 body
    4 TUPLE	//  _60 _61
    invoke_method CALLDICT	//  _210 _211
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _68
    0 TUPLE	//  _68 _69
    invoke_method CALLDICT	//  _212 _213
    NIP	//  stack
    9001 PUSHINT	//  stack _71=9001
    OVER	//  stack _71=9001 stack
    FIRST	//  stack _71=9001 _72
    2 EQINT	//  stack _71=9001 _74
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _78=1
    INDEXVAR	//  stack _79
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _81=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _81=9002 r_bB r_bA _86
    EQUAL	//  stack _81=9002 r_bB _87
    s1 s2 XCHG	//  stack r_bB _81=9002 _87
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _89=9003
    SWAP	//  stack _89=9003 r_bB
    0 EQINT	//  stack _89=9003 _91
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _95=2
    INDEXVAR	//  stack _96
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _98=9004
    777 PUSHINT	//  stack r_pkA r_pkB _98=9004 _99=777
    PRIVTOPUB	//  stack r_pkA r_pkB _98=9004 _100
    s1 s3 XCHG	//  stack _98=9004 r_pkB r_pkA _100
    EQUAL	//  stack _98=9004 r_pkB _101
    s1 s2 XCHG	//  stack r_pkB _98=9004 _101
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _103=9005
    3456 PUSHINT	//  stack r_pkB _103=9005 _104=3456
    PRIVTOPUB	//  stack r_pkB _103=9005 _105
    s1 s2 XCHG	//  stack _103=9005 r_pkB _105
    EQUAL	//  stack _103=9005 _106
    THROWANYIFNOT
    9006 PUSHINT	//  stack _108=9006
    OVER
    3 PUSHINT	//  stack _108=9006 stack _109=3
    INDEXVAR	//  stack _108=9006 _110
    931 PUSHINT	//  stack _108=9006 _110 _111=931
    EQUAL	//  stack _108=9006 _112
    THROWANYIFNOT
    9007 PUSHINT	//  stack _114=9007
    OVER
    4 PUSHINT	//  stack _114=9007 stack _115=4
    INDEXVAR	//  stack _114=9007 _116
    0 PUSHINT	//  stack _114=9007 _116 _117=0
    INDEXVAR	//  stack _114=9007 _118
    86400 PUSHINT	//  stack _114=9007 _118 _119=86400
    EQUAL	//  stack _114=9007 _120
    THROWANYIFNOT
    9007 PUSHINT	//  stack _122=9007
    OVER
    4 PUSHINT	//  stack _122=9007 stack _123=4
    INDEXVAR	//  stack _122=9007 _124
    1 PUSHINT	//  stack _122=9007 _124 _125=1
    INDEXVAR	//  stack _122=9007 _126
    30000000 PUSHINT	//  stack _122=9007 _126 _127=30000000
    EQUAL	//  stack _122=9007 _128
    THROWANYIFNOT
    9007 PUSHINT	//  stack _130=9007
    OVER
    4 PUSHINT	//  stack _130=9007 stack _131=4
    INDEXVAR	//  stack _130=9007 _132
    2 PUSHINT	//  stack _130=9007 _132 _133=2
    INDEXVAR	//  stack _130=9007 _134
    3600 PUSHINT	//  stack _130=9007 _134 _135=3600
    EQUAL	//  stack _130=9007 _136
    THROWANYIFNOT
    9008 PUSHINT	//  stack _138=9008
    OVER
    5 PUSHINT	//  stack _138=9008 stack _139=5
    INDEXVAR	//  stack _138=9008 _140
    0 PUSHINT	//  stack _138=9008 _140 _141=0
    INDEXVAR	//  stack _138=9008 _142
    7 EQINT	//  stack _138=9008 _144
    THROWANYIFNOT
    9008 PUSHINT	//  stack _146=9008
    OVER
    5 PUSHINT	//  stack _146=9008 stack _147=5
    INDEXVAR	//  stack _146=9008 _148
    1 PUSHINT	//  stack _146=9008 _148 _149=1
    INDEXVAR	//  stack _146=9008 _150
    11 EQINT	//  stack _146=9008 _152
    THROWANYIFNOT
    FALSE	//  stack _155
    TRUE	//  stack _155 _156
    1777 PUSHINT	//  stack _155 _156 _157=1777
    PUSHNULL	//  stack _155 _156 _157=1777 _158
    12 PUSHINT	//  stack _155 _156 _157=1777 _158 _159=12
    PUSHNULL	//  stack _155 _156 _157=1777 _158 _159=12 _160
    8 PUSHINT	//  stack _155 _156 _157=1777 _158 _159=12 _160 _161=8
    NEWC	//  stack _155 _156 _157=1777 _158 _159=12 _160 _161=8 _162
    64 STU	//  stack _155 _156 _157=1777 _158 _159=12 _160 _164
    1 PUSHINT	//  stack _155 _156 _157=1777 _158 _159=12 _160 _164 _165=1
    STVARUINT16	//  stack _155 _156 _157=1777 _158 _159=12 _160 _166
    STDICT	//  stack _155 _156 _157=1777 _158 _159=12 _167
    64 STU	//  stack _155 _156 _157=1777 _158 _169
    2 PUSHINT	//  stack _155 _156 _157=1777 _158 _169 _170=2
    STVARUINT16	//  stack _155 _156 _157=1777 _158 _171
    STDICT	//  stack _155 _156 _157=1777 _172
    32 STU	//  stack _155 _156 _174
    1 STI	//  stack _155 _176
    1 STI	//  stack _178
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _180=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _180=9009 stack _181=6
    INDEXVAR	//  stack quarantined_state _180=9009 _182
    ROT	//  stack _180=9009 _182 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _180=9009 _183
    THROWANYIFNOT
    9010 PUSHINT	//  stack _185=9010
    OVER
    7 PUSHINT	//  stack _185=9010 stack _186=7
    INDEXVAR	//  stack _185=9010 _187
    0 PUSHINT	//  stack _185=9010 _187 _188=0
    INDEXVAR	//  stack _185=9010 _189
    30000000 PUSHINT	//  stack _185=9010 _189 _190=30000000
    EQUAL	//  stack _185=9010 _191
    THROWANYIFNOT
    9010 PUSHINT	//  stack _193=9010
    OVER
    7 PUSHINT	//  stack _193=9010 stack _194=7
    INDEXVAR	//  stack _193=9010 _195
    1 PUSHINT	//  stack _193=9010 _195 _196=1
    INDEXVAR	//  stack _193=9010 _197
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _193=9010 _197 _198
    HASHSU SWAP HASHSU EQUAL	//  stack _193=9010 _199
    THROWANYIFNOT
    9010 PUSHINT	//  stack _201=9010
    SWAP
    7 PUSHINT	//  _201=9010 stack _202=7
    INDEXVAR	//  _201=9010 _203
    2 PUSHINT	//  _201=9010 _203 _204=2
    INDEXVAR	//  _201=9010 _205
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _201=9010 _205 _206
    HASHSU SWAP HASHSU EQUAL	//  _201=9010 _207
    THROWANYIFNOT
    TRUE	//  _209
  }>
  __test_start_uncooperative_close_unauthorized PROC:<{
    // 
    init_channel_helper CALLDICT
    12452 PUSHINT	//  _2=12452
    7 PUSHINT	//  _2=12452 _3=7
    0 PUSHINT	//  _2=12452 _3=7 _4=0
    PUSHNULL	//  _2=12452 _3=7 _4=0 _5
    PUSHNULL	//  _2=12452 _3=7 _4=0 _5 _6
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _9=3456
    11 PUSHINT	//  alice_zerostate _9=3456 _10=11
    0 PUSHINT	//  alice_zerostate _9=3456 _10=11 _11=0
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12 _13
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _18=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _18=931 _19=1433289580
    NEWC	//  alice_zerostate bob_zerostate _18=931 _19=1433289580 _20
    32 STU	//  alice_zerostate bob_zerostate _18=931 _22
    128 STU	//  alice_zerostate bob_zerostate _24
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _24
    STREF	//  bob_zerostate _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method_expect_fail CALLDICT	//  _49
    DROP	// 
    777 PUSHINT	//  _51=777
    7 PUSHINT	//  _51=777 _52=7
    0 PUSHINT	//  _51=777 _52=7 _53=0
    PUSHNULL	//  _51=777 _52=7 _53=0 _54
    PUSHNULL	//  _51=777 _52=7 _53=0 _54 _55
    build_signed_semichannel CALLDICT	//  alice_zerostate
    12452 PUSHINT	//  alice_zerostate _58=12452
    11 PUSHINT	//  alice_zerostate _58=12452 _59=11
    0 PUSHINT	//  alice_zerostate _58=12452 _59=11 _60=0
    PUSHNULL	//  alice_zerostate _58=12452 _59=11 _60=0 _61
    PUSHNULL	//  alice_zerostate _58=12452 _59=11 _60=0 _61 _62
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _64=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _67=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _67=931 _68=1433289580
    NEWC	//  alice_zerostate bob_zerostate _67=931 _68=1433289580 _69
    32 STU	//  alice_zerostate bob_zerostate _67=931 _71
    128 STU	//  alice_zerostate bob_zerostate _73
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _73
    STREF	//  bob_zerostate _74
    STREF	//  _75
    ENDC	//  _76
    CTOS	//  payload
    FALSE	//  payload _79
    521476815 PUSHINT	//  payload _79 _80=521476815
    NEWC	//  payload _79 _80=521476815 _81
    32 STU	//  payload _79 _83
    1 STI	//  payload _85
    OVER	//  payload _85 payload
    HASHSU	//  payload _85 _86
    3456 PUSHINT	//  payload _85 _86 _87=3456
    SIGN	//  payload _85 _88
    STSLICER	//  payload _89
    SWAP	//  _89 payload
    STSLICER	//  _90
    ENDC	//  _91
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _93
    8000000000 PUSHINT	//  body _93 _95=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _93 _95=8000000000 _96 _97 body
    4 TUPLE	//  _93 _94
    invoke_method_expect_fail CALLDICT	//  _98
    DROP	// 
    777 PUSHINT	//  _100=777
    7 PUSHINT	//  _100=777 _101=7
    0 PUSHINT	//  _100=777 _101=7 _102=0
    PUSHNULL	//  _100=777 _101=7 _102=0 _103
    PUSHNULL	//  _100=777 _101=7 _102=0 _103 _104
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _107=3456
    11 PUSHINT	//  alice_zerostate _107=3456 _108=11
    0 PUSHINT	//  alice_zerostate _107=3456 _108=11 _109=0
    PUSHNULL	//  alice_zerostate _107=3456 _108=11 _109=0 _110
    PUSHNULL	//  alice_zerostate _107=3456 _108=11 _109=0 _110 _111
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _113=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _116=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _116=931 _117=1433289580
    NEWC	//  alice_zerostate bob_zerostate _116=931 _117=1433289580 _118
    32 STU	//  alice_zerostate bob_zerostate _116=931 _120
    128 STU	//  alice_zerostate bob_zerostate _122
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _122
    STREF	//  bob_zerostate _123
    STREF	//  _124
    ENDC	//  _125
    CTOS	//  payload
    FALSE	//  payload _128
    521476815 PUSHINT	//  payload _128 _129=521476815
    NEWC	//  payload _128 _129=521476815 _130
    32 STU	//  payload _128 _132
    1 STI	//  payload _134
    OVER	//  payload _134 payload
    HASHSU	//  payload _134 _135
    12452 PUSHINT	//  payload _134 _135 _136=12452
    SIGN	//  payload _134 _137
    STSLICER	//  payload _138
    SWAP	//  _138 payload
    STSLICER	//  _139
    ENDC	//  _140
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _142
    8000000000 PUSHINT	//  body _142 _144=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _142 _144=8000000000 _145 _146 body
    4 TUPLE	//  _142 _143
    invoke_method_expect_fail CALLDICT	//  _147
    DROP	// 
    TRUE	//  _148
  }>
  __test_start_uncooperative_close_wrong_channel_id PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    7 PUSHINT	//  _2=777 _3=7
    0 PUSHINT	//  _2=777 _3=7 _4=0
    PUSHNULL	//  _2=777 _3=7 _4=0 _5
    PUSHNULL	//  _2=777 _3=7 _4=0 _5 _6
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _9=3456
    11 PUSHINT	//  alice_zerostate _9=3456 _10=11
    0 PUSHINT	//  alice_zerostate _9=3456 _10=11 _11=0
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12 _13
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    987 PUSHINT	//  alice_zerostate bob_zerostate _18=987
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _18=987 _19=1433289580
    NEWC	//  alice_zerostate bob_zerostate _18=987 _19=1433289580 _20
    32 STU	//  alice_zerostate bob_zerostate _18=987 _22
    128 STU	//  alice_zerostate bob_zerostate _24
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _24
    STREF	//  bob_zerostate _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method_expect_fail CALLDICT	//  _49
    DROP	// 
    777 PUSHINT	//  _51=777
    7 PUSHINT	//  _51=777 _52=7
    0 PUSHINT	//  _51=777 _52=7 _53=0
    PUSHNULL	//  _51=777 _52=7 _53=0 _54
    PUSHNULL	//  _51=777 _52=7 _53=0 _54 _55
    build_signed_semichannel_wrong_channel_id CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _58=3456
    11 PUSHINT	//  alice_zerostate _58=3456 _59=11
    0 PUSHINT	//  alice_zerostate _58=3456 _59=11 _60=0
    PUSHNULL	//  alice_zerostate _58=3456 _59=11 _60=0 _61
    PUSHNULL	//  alice_zerostate _58=3456 _59=11 _60=0 _61 _62
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _64=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _67=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _67=931 _68=1433289580
    NEWC	//  alice_zerostate bob_zerostate _67=931 _68=1433289580 _69
    32 STU	//  alice_zerostate bob_zerostate _67=931 _71
    128 STU	//  alice_zerostate bob_zerostate _73
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _73
    STREF	//  bob_zerostate _74
    STREF	//  _75
    ENDC	//  _76
    CTOS	//  payload
    FALSE	//  payload _79
    521476815 PUSHINT	//  payload _79 _80=521476815
    NEWC	//  payload _79 _80=521476815 _81
    32 STU	//  payload _79 _83
    1 STI	//  payload _85
    OVER	//  payload _85 payload
    HASHSU	//  payload _85 _86
    3456 PUSHINT	//  payload _85 _86 _87=3456
    SIGN	//  payload _85 _88
    STSLICER	//  payload _89
    SWAP	//  _89 payload
    STSLICER	//  _90
    ENDC	//  _91
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _93
    8000000000 PUSHINT	//  body _93 _95=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _93 _95=8000000000 _96 _97 body
    4 TUPLE	//  _93 _94
    invoke_method_expect_fail CALLDICT	//  _98
    DROP	// 
    777 PUSHINT	//  _100=777
    7 PUSHINT	//  _100=777 _101=7
    0 PUSHINT	//  _100=777 _101=7 _102=0
    PUSHNULL	//  _100=777 _101=7 _102=0 _103
    PUSHNULL	//  _100=777 _101=7 _102=0 _103 _104
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _107=3456
    11 PUSHINT	//  alice_zerostate _107=3456 _108=11
    0 PUSHINT	//  alice_zerostate _107=3456 _108=11 _109=0
    PUSHNULL	//  alice_zerostate _107=3456 _108=11 _109=0 _110
    PUSHNULL	//  alice_zerostate _107=3456 _108=11 _109=0 _110 _111
    build_signed_semichannel_wrong_channel_id CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _113=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _116=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _116=931 _117=1433289580
    NEWC	//  alice_zerostate bob_zerostate _116=931 _117=1433289580 _118
    32 STU	//  alice_zerostate bob_zerostate _116=931 _120
    128 STU	//  alice_zerostate bob_zerostate _122
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _122
    STREF	//  bob_zerostate _123
    STREF	//  _124
    ENDC	//  _125
    CTOS	//  payload
    FALSE	//  payload _128
    521476815 PUSHINT	//  payload _128 _129=521476815
    NEWC	//  payload _128 _129=521476815 _130
    32 STU	//  payload _128 _132
    1 STI	//  payload _134
    OVER	//  payload _134 payload
    HASHSU	//  payload _134 _135
    3456 PUSHINT	//  payload _134 _135 _136=3456
    SIGN	//  payload _134 _137
    STSLICER	//  payload _138
    SWAP	//  _138 payload
    STSLICER	//  _139
    ENDC	//  _140
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _142
    8000000000 PUSHINT	//  body _142 _144=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _142 _144=8000000000 _145 _146 body
    4 TUPLE	//  _142 _143
    invoke_method_expect_fail CALLDICT	//  _147
    DROP	// 
    777 PUSHINT	//  _149=777
    7 PUSHINT	//  _149=777 _150=7
    0 PUSHINT	//  _149=777 _150=7 _151=0
    PUSHNULL	//  _149=777 _150=7 _151=0 _152
    PUSHNULL	//  _149=777 _150=7 _151=0 _152 _153
    build_signed_semichannel_wrong_channel_id CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _156=3456
    11 PUSHINT	//  alice_zerostate _156=3456 _157=11
    0 PUSHINT	//  alice_zerostate _156=3456 _157=11 _158=0
    PUSHNULL	//  alice_zerostate _156=3456 _157=11 _158=0 _159
    PUSHNULL	//  alice_zerostate _156=3456 _157=11 _158=0 _159 _160
    build_signed_semichannel_wrong_channel_id CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _162=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _165=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _165=931 _166=1433289580
    NEWC	//  alice_zerostate bob_zerostate _165=931 _166=1433289580 _167
    32 STU	//  alice_zerostate bob_zerostate _165=931 _169
    128 STU	//  alice_zerostate bob_zerostate _171
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _171
    STREF	//  bob_zerostate _172
    STREF	//  _173
    ENDC	//  _174
    CTOS	//  payload
    FALSE	//  payload _177
    521476815 PUSHINT	//  payload _177 _178=521476815
    NEWC	//  payload _177 _178=521476815 _179
    32 STU	//  payload _177 _181
    1 STI	//  payload _183
    OVER	//  payload _183 payload
    HASHSU	//  payload _183 _184
    3456 PUSHINT	//  payload _183 _184 _185=3456
    SIGN	//  payload _183 _186
    STSLICER	//  payload _187
    SWAP	//  _187 payload
    STSLICER	//  _188
    ENDC	//  _189
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _191
    8000000000 PUSHINT	//  body _191 _193=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _191 _193=8000000000 _194 _195 body
    4 TUPLE	//  _191 _192
    invoke_method_expect_fail CALLDICT	//  _196
    DROP	// 
    TRUE	//  _197
  }>
  __test_start_uncooperative_close_outdated_semichannels PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    6 PUSHINT	//  _2=777 _3=6
    0 PUSHINT	//  _2=777 _3=6 _4=0
    PUSHNULL	//  _2=777 _3=6 _4=0 _5
    PUSHNULL	//  _2=777 _3=6 _4=0 _5 _6
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _9=3456
    11 PUSHINT	//  alice_zerostate _9=3456 _10=11
    0 PUSHINT	//  alice_zerostate _9=3456 _10=11 _11=0
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12 _13
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _18=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _18=931 _19=1433289580
    NEWC	//  alice_zerostate bob_zerostate _18=931 _19=1433289580 _20
    32 STU	//  alice_zerostate bob_zerostate _18=931 _22
    128 STU	//  alice_zerostate bob_zerostate _24
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _24
    STREF	//  bob_zerostate _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method_expect_fail CALLDICT	//  _49
    DROP	// 
    TRUE	//  _50
  }>
  __test_start_uncooperative_close_contradicting_semichannels PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    8 PUSHINT	//  _2=777 _3=8
    1 PUSHINT	//  _2=777 _3=8 _4=1
    PUSHNULL	//  _2=777 _3=8 _4=1 _5
    PUSHNULL	//  _2=777 _3=8 _4=1 _5 _6
    11 PUSHINT	//  _2=777 _3=8 _4=1 _5 _6 _7=11
    NEWC	//  _2=777 _3=8 _4=1 _5 _6 _7=11 _8
    64 STU	//  _2=777 _3=8 _4=1 _5 _6 _10
    0 PUSHINT	//  _2=777 _3=8 _4=1 _5 _6 _10 _11=0
    STVARUINT16	//  _2=777 _3=8 _4=1 _5 _6 _12
    STOPTREF	//  _2=777 _3=8 _4=1 _5 _13
    ENDC	//  _2=777 _3=8 _4=1 _5 _14
    build_signed_semichannel CALLDICT	//  alice_nextstate
    3456 PUSHINT	//  alice_nextstate _17=3456
    13 PUSHINT	//  alice_nextstate _17=3456 _18=13
    2 PUSHINT	//  alice_nextstate _17=3456 _18=13 _19=2
    PUSHNULL	//  alice_nextstate _17=3456 _18=13 _19=2 _20
    PUSHNULL	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _21
    9 PUSHINT	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _21 _22=9
    NEWC	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _21 _22=9 _23
    64 STU	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _21 _25
    0 PUSHINT	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _21 _25 _26=0
    STVARUINT16	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _21 _27
    STOPTREF	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _28
    ENDC	//  alice_nextstate _17=3456 _18=13 _19=2 _20 _29
    build_signed_semichannel CALLDICT	//  alice_nextstate bob_nextstate
    1777 PUSHINT	//  alice_nextstate bob_nextstate _31=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_nextstate bob_nextstate _34=931
    1433289580 PUSHINT	//  alice_nextstate bob_nextstate _34=931 _35=1433289580
    NEWC	//  alice_nextstate bob_nextstate _34=931 _35=1433289580 _36
    32 STU	//  alice_nextstate bob_nextstate _34=931 _38
    128 STU	//  alice_nextstate bob_nextstate _40
    s1 s2 XCHG	//  bob_nextstate alice_nextstate _40
    STREF	//  bob_nextstate _41
    STREF	//  _42
    ENDC	//  _43
    CTOS	//  payload
    TRUE	//  payload _46
    521476815 PUSHINT	//  payload _46 _47=521476815
    NEWC	//  payload _46 _47=521476815 _48
    32 STU	//  payload _46 _50
    1 STI	//  payload _52
    OVER	//  payload _52 payload
    HASHSU	//  payload _52 _53
    777 PUSHINT	//  payload _52 _53 _54=777
    SIGN	//  payload _52 _55
    STSLICER	//  payload _56
    SWAP	//  _56 payload
    STSLICER	//  _57
    ENDC	//  _58
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _60
    8000000000 PUSHINT	//  body _60 _62=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _60 _62=8000000000 _63 _64 body
    4 TUPLE	//  _60 _61
    invoke_method_expect_fail CALLDICT	//  _65
    DROP	// 
    TRUE	//  _66
  }>
  __test_start_uncooperative_close_then_cooperative_close PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    7 PUSHINT	//  _2=777 _3=7
    0 PUSHINT	//  _2=777 _3=7 _4=0
    PUSHNULL	//  _2=777 _3=7 _4=0 _5
    PUSHNULL	//  _2=777 _3=7 _4=0 _5 _6
    build_signed_semichannel CALLDICT	//  alice_zerostate
    3456 PUSHINT	//  alice_zerostate _9=3456
    11 PUSHINT	//  alice_zerostate _9=3456 _10=11
    0 PUSHINT	//  alice_zerostate _9=3456 _10=11 _11=0
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12
    PUSHNULL	//  alice_zerostate _9=3456 _10=11 _11=0 _12 _13
    build_signed_semichannel CALLDICT	//  alice_zerostate bob_zerostate
    1777 PUSHINT	//  alice_zerostate bob_zerostate _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_zerostate bob_zerostate _18=931
    1433289580 PUSHINT	//  alice_zerostate bob_zerostate _18=931 _19=1433289580
    NEWC	//  alice_zerostate bob_zerostate _18=931 _19=1433289580 _20
    32 STU	//  alice_zerostate bob_zerostate _18=931 _22
    128 STU	//  alice_zerostate bob_zerostate _24
    s1 s2 XCHG	//  bob_zerostate alice_zerostate _24
    STREF	//  bob_zerostate _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method CALLDICT	//  _342 _343
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _52
    0 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _344 _345
    9001 PUSHINT
    s2 POP	//  _55=9001 stack
    FIRST	//  _55=9001 _56
    2 EQINT	//  _55=9001 _58
    THROWANYIFNOT
    20 PUSHINT	//  _61=20
    DUP	//  _61=20 _62=20
    931 PUSHINT	//  _61=20 _62=20 _63=931
    1131179891 PUSHINT	//  _61=20 _62=20 _63=931 _64=1131179891
    NEWC	//  _61=20 _62=20 _63=931 _64=1131179891 _65
    32 STU	//  _61=20 _62=20 _63=931 _67
    128 STU	//  _61=20 _62=20 _69
    3800000000 PUSHINT	//  _61=20 _62=20 _69 _70=3800000000
    STVARUINT16	//  _61=20 _62=20 _71
    4000000000 PUSHINT	//  _61=20 _62=20 _71 _72=4000000000
    STVARUINT16	//  _61=20 _62=20 _73
    64 STU	//  _61=20 _75
    64 STU	//  _77
    ENDC	//  _78
    CTOS	//  payload
    NEWC	//  payload _81
    OVER	//  payload _81 payload
    HASHSU	//  payload _81 _82
    3456 PUSHINT	//  payload _81 _82 _83=3456
    SIGN	//  payload _81 _84
    STSLICER	//  payload _85
    ENDC	//  payload _86
    NEWC	//  payload _86 _87
    s2 PUSH	//  payload _86 _87 payload
    HASHSU	//  payload _86 _87 _88
    777 PUSHINT	//  payload _86 _87 _88 _89=777
    SIGN	//  payload _86 _87 _90
    STSLICER	//  payload _86 _91
    ENDC	//  payload _86 _92
    1433884798 PUSHINT	//  payload _86 _92 _93=1433884798
    NEWC	//  payload _86 _92 _93=1433884798 _94
    32 STU	//  payload _86 _92 _96
    STREF	//  payload _86 _97
    STREF	//  payload _98
    SWAP	//  _98 payload
    STSLICER	//  _99
    ENDC	//  _100
    CTOS	//  body
    8000000000 PUSHINT	//  body _103=8000000000
    <b b> PUSHREF	//  body _103=8000000000 _104
    PAIR	//  body _102
    c7 PUSH DUP FIRST
    ROT
    7 SETINDEX
    0 SETINDEX
    c7 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _106
    8000000000 PUSHINT	//  body _106 _108=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _106 _108=8000000000 _109 _110 body
    4 TUPLE	//  _106 _107
    invoke_method CALLDICT	//  _346 _347
    2DROP	// 
    parse_c5 INLINECALLDICT	//  actions
    9011 PUSHINT	//  actions _114=9011
    OVER	//  actions _114=9011 actions
    TLEN	//  actions _114=9011 _115
    2 EQINT	//  actions _114=9011 _117
    THROWANYIFNOT
    9012 PUSHINT	//  actions _119=9012
    OVER
    0 PUSHINT	//  actions _119=9012 actions _120=0
    INDEXVAR	//  actions _119=9012 _121
    0 PUSHINT	//  actions _119=9012 _121 _122=0
    INDEXVAR	//  actions _119=9012 _123
    0 EQINT	//  actions _119=9012 _125
    THROWANYIFNOT
    9013 PUSHINT	//  actions _127=9013
    OVER
    0 PUSHINT	//  actions _127=9013 actions _128=0
    INDEXVAR	//  actions _127=9013 _129
    2 PUSHINT	//  actions _127=9013 _129 _130=2
    INDEXVAR	//  actions _127=9013 _131
    2 EQINT	//  actions _127=9013 _133
    THROWANYIFNOT
    DUP
    0 PUSHINT	//  actions actions _136=0
    INDEXVAR	//  actions _137
    1 PUSHINT	//  actions _137 _138=1
    INDEXVAR	//  actions _139
    parse_internal_message CALLDICT	//  actions msg_params
    9014 PUSHINT	//  actions msg_params _141=9014
    OVER
    1 PUSHINT	//  actions msg_params _141=9014 msg_params _142=1
    INDEXVAR	//  actions msg_params _141=9014 _143
    0 EQINT	//  actions msg_params _141=9014 _145
    THROWANYIFNOT
    9015 PUSHINT	//  actions msg_params _147=9015
    OVER
    4 PUSHINT	//  actions msg_params _147=9015 msg_params _148=4
    INDEXVAR	//  actions msg_params _147=9015 _149
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  actions msg_params _147=9015 _149 _150
    HASHSU SWAP HASHSU EQUAL	//  actions msg_params _147=9015 _151
    THROWANYIFNOT
    9016 PUSHINT	//  actions msg_params _153=9016
    OVER
    5 PUSHINT	//  actions msg_params _153=9016 msg_params _154=5
    INDEXVAR	//  actions msg_params _153=9016 _155
    4000000000 PUSHINT	//  actions msg_params _153=9016 _155 _156=4000000000
    EQUAL	//  actions msg_params _153=9016 _157
    THROWANYIFNOT
    9017 PUSHINT	//  actions msg_params _159=9017
    SWAP
    8 PUSHINT	//  actions _159=9017 msg_params _160=8
    INDEXVAR	//  actions _159=9017 _161
    931 PUSHINT	//  actions _159=9017 _161 _162=931
    3722217658 PUSHINT	//  actions _159=9017 _161 _162=931 _163=3722217658
    NEWC	//  actions _159=9017 _161 _162=931 _163=3722217658 _164
    32 STU	//  actions _159=9017 _161 _162=931 _166
    128 STU	//  actions _159=9017 _161 _168
    ENDC	//  actions _159=9017 _161 _169
    CTOS	//  actions _159=9017 _161 _170
    HASHSU SWAP HASHSU EQUAL	//  actions _159=9017 _171
    THROWANYIFNOT
    10012 PUSHINT	//  actions _173=10012
    OVER
    1 PUSHINT	//  actions _173=10012 actions _174=1
    INDEXVAR	//  actions _173=10012 _175
    0 PUSHINT	//  actions _173=10012 _175 _176=0
    INDEXVAR	//  actions _173=10012 _177
    0 EQINT	//  actions _173=10012 _179
    THROWANYIFNOT
    10013 PUSHINT	//  actions _181=10013
    OVER
    1 PUSHINT	//  actions _181=10013 actions _182=1
    INDEXVAR	//  actions _181=10013 _183
    2 PUSHINT	//  actions _181=10013 _183 _184=2
    INDEXVAR	//  actions _181=10013 _185
    130 PUSHINT	//  actions _181=10013 _185 _188
    EQUAL	//  actions _181=10013 _189
    THROWANYIFNOT
    1 PUSHINT	//  actions _191=1
    INDEXVAR	//  _192
    1 PUSHINT	//  _192 _193=1
    INDEXVAR	//  _194
    parse_internal_message CALLDICT	//  msg_params
    10014 PUSHINT	//  msg_params _196=10014
    OVER
    1 PUSHINT	//  msg_params _196=10014 msg_params _197=1
    INDEXVAR	//  msg_params _196=10014 _198
    0 EQINT	//  msg_params _196=10014 _200
    THROWANYIFNOT
    10015 PUSHINT	//  msg_params _202=10015
    OVER
    4 PUSHINT	//  msg_params _202=10015 msg_params _203=4
    INDEXVAR	//  msg_params _202=10015 _204
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  msg_params _202=10015 _204 _205
    HASHSU SWAP HASHSU EQUAL	//  msg_params _202=10015 _206
    THROWANYIFNOT
    10016 PUSHINT	//  msg_params _208=10016
    OVER
    5 PUSHINT	//  msg_params _208=10016 msg_params _209=5
    INDEXVAR	//  msg_params _208=10016 _210
    3800000000 PUSHINT	//  msg_params _208=10016 _210 _211=3800000000
    EQUAL	//  msg_params _208=10016 _212
    THROWANYIFNOT
    10017 PUSHINT	//  msg_params _214=10017
    SWAP
    8 PUSHINT	//  _214=10017 msg_params _215=8
    INDEXVAR	//  _214=10017 _216
    931 PUSHINT	//  _214=10017 _216 _217=931
    3722217658 PUSHINT	//  _214=10017 _216 _217=931 _218=3722217658
    NEWC	//  _214=10017 _216 _217=931 _218=3722217658 _219
    32 STU	//  _214=10017 _216 _217=931 _221
    128 STU	//  _214=10017 _216 _223
    ENDC	//  _214=10017 _216 _224
    CTOS	//  _214=10017 _216 _225
    HASHSU SWAP HASHSU EQUAL	//  _214=10017 _226
    THROWANYIFNOT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _230
    0 TUPLE	//  _230 _231
    invoke_method CALLDICT	//  _348 _349
    NIP	//  stack
    9001 PUSHINT	//  stack _233=9001
    OVER	//  stack _233=9001 stack
    FIRST	//  stack _233=9001 _234
    0 EQINT	//  stack _233=9001 _236
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _240=1
    INDEXVAR	//  stack _241
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _243=9002
    s0 s2 XCHG	//  stack _243=9002 r_bB r_bA
    0 EQINT	//  stack _243=9002 r_bB _245
    s1 s2 XCHG	//  stack r_bB _243=9002 _245
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _247=9003
    SWAP	//  stack _247=9003 r_bB
    0 EQINT	//  stack _247=9003 _249
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _253=2
    INDEXVAR	//  stack _254
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _256=9004
    777 PUSHINT	//  stack r_pkA r_pkB _256=9004 _257=777
    PRIVTOPUB	//  stack r_pkA r_pkB _256=9004 _258
    s1 s3 XCHG	//  stack _256=9004 r_pkB r_pkA _258
    EQUAL	//  stack _256=9004 r_pkB _259
    s1 s2 XCHG	//  stack r_pkB _256=9004 _259
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _261=9005
    3456 PUSHINT	//  stack r_pkB _261=9005 _262=3456
    PRIVTOPUB	//  stack r_pkB _261=9005 _263
    s1 s2 XCHG	//  stack _261=9005 r_pkB _263
    EQUAL	//  stack _261=9005 _264
    THROWANYIFNOT
    9006 PUSHINT	//  stack _266=9006
    OVER
    3 PUSHINT	//  stack _266=9006 stack _267=3
    INDEXVAR	//  stack _266=9006 _268
    931 PUSHINT	//  stack _266=9006 _268 _269=931
    EQUAL	//  stack _266=9006 _270
    THROWANYIFNOT
    9007 PUSHINT	//  stack _272=9007
    OVER
    4 PUSHINT	//  stack _272=9007 stack _273=4
    INDEXVAR	//  stack _272=9007 _274
    0 PUSHINT	//  stack _272=9007 _274 _275=0
    INDEXVAR	//  stack _272=9007 _276
    86400 PUSHINT	//  stack _272=9007 _276 _277=86400
    EQUAL	//  stack _272=9007 _278
    THROWANYIFNOT
    9007 PUSHINT	//  stack _280=9007
    OVER
    4 PUSHINT	//  stack _280=9007 stack _281=4
    INDEXVAR	//  stack _280=9007 _282
    1 PUSHINT	//  stack _280=9007 _282 _283=1
    INDEXVAR	//  stack _280=9007 _284
    30000000 PUSHINT	//  stack _280=9007 _284 _285=30000000
    EQUAL	//  stack _280=9007 _286
    THROWANYIFNOT
    9007 PUSHINT	//  stack _288=9007
    OVER
    4 PUSHINT	//  stack _288=9007 stack _289=4
    INDEXVAR	//  stack _288=9007 _290
    2 PUSHINT	//  stack _288=9007 _290 _291=2
    INDEXVAR	//  stack _288=9007 _292
    3600 PUSHINT	//  stack _288=9007 _292 _293=3600
    EQUAL	//  stack _288=9007 _294
    THROWANYIFNOT
    9008 PUSHINT	//  stack _296=9008
    OVER
    5 PUSHINT	//  stack _296=9008 stack _297=5
    INDEXVAR	//  stack _296=9008 _298
    0 PUSHINT	//  stack _296=9008 _298 _299=0
    INDEXVAR	//  stack _296=9008 _300
    20 EQINT	//  stack _296=9008 _302
    THROWANYIFNOT
    9008 PUSHINT	//  stack _304=9008
    OVER
    5 PUSHINT	//  stack _304=9008 stack _305=5
    INDEXVAR	//  stack _304=9008 _306
    1 PUSHINT	//  stack _304=9008 _306 _307=1
    INDEXVAR	//  stack _304=9008 _308
    20 EQINT	//  stack _304=9008 _310
    THROWANYIFNOT
    9009 PUSHINT	//  stack _312=9009
    OVER
    6 PUSHINT	//  stack _312=9009 stack _313=6
    INDEXVAR	//  stack _312=9009 _314
    ISNULL	//  stack _312=9009 _315
    THROWANYIFNOT
    9010 PUSHINT	//  stack _317=9010
    OVER
    7 PUSHINT	//  stack _317=9010 stack _318=7
    INDEXVAR	//  stack _317=9010 _319
    0 PUSHINT	//  stack _317=9010 _319 _320=0
    INDEXVAR	//  stack _317=9010 _321
    30000000 PUSHINT	//  stack _317=9010 _321 _322=30000000
    EQUAL	//  stack _317=9010 _323
    THROWANYIFNOT
    9010 PUSHINT	//  stack _325=9010
    OVER
    7 PUSHINT	//  stack _325=9010 stack _326=7
    INDEXVAR	//  stack _325=9010 _327
    1 PUSHINT	//  stack _325=9010 _327 _328=1
    INDEXVAR	//  stack _325=9010 _329
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _325=9010 _329 _330
    HASHSU SWAP HASHSU EQUAL	//  stack _325=9010 _331
    THROWANYIFNOT
    9010 PUSHINT	//  stack _333=9010
    SWAP
    7 PUSHINT	//  _333=9010 stack _334=7
    INDEXVAR	//  _333=9010 _335
    2 PUSHINT	//  _333=9010 _335 _336=2
    INDEXVAR	//  _333=9010 _337
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _333=9010 _337 _338
    HASHSU SWAP HASHSU EQUAL	//  _333=9010 _339
    THROWANYIFNOT
    TRUE	//  _341
  }>
  __test_start_uncooperative_close_cooperative_commit_old_state PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    9 PUSHINT	//  _2=777 _3=9
    10 PUSHINT	//  _2=777 _3=9 _4=10
    PUSHNULL	//  _2=777 _3=9 _4=10 _5
    PUSHNULL	//  _2=777 _3=9 _4=10 _5 _6
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _9=3456
    15 PUSHINT	//  alice_state _9=3456 _10=15
    10 PUSHINT	//  alice_state _9=3456 _10=15 _11=10
    PUSHNULL	//  alice_state _9=3456 _10=15 _11=10 _12
    PUSHNULL	//  alice_state _9=3456 _10=15 _11=10 _12 _13
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1777 PUSHINT	//  alice_state bob_state _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _18=931
    1433289580 PUSHINT	//  alice_state bob_state _18=931 _19=1433289580
    NEWC	//  alice_state bob_state _18=931 _19=1433289580 _20
    32 STU	//  alice_state bob_state _18=931 _22
    128 STU	//  alice_state bob_state _24
    s1 s2 XCHG	//  bob_state alice_state _24
    STREF	//  bob_state _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method CALLDICT	//  _248 _249
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _52
    0 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _250 _251
    9001 PUSHINT
    s2 POP	//  _55=9001 stack
    FIRST	//  _55=9001 _56
    2 EQINT	//  _55=9001 _58
    THROWANYIFNOT
    13 PUSHINT	//  _61=13
    8 PUSHINT	//  _61=13 _62=8
    931 PUSHINT	//  _61=13 _62=8 _63=931
    1128492404 PUSHINT	//  _61=13 _62=8 _63=931 _64=1128492404
    NEWC	//  _61=13 _62=8 _63=931 _64=1128492404 _65
    32 STU	//  _61=13 _62=8 _63=931 _67
    128 STU	//  _61=13 _62=8 _69
    64 STU	//  _61=13 _71
    64 STU	//  _73
    ENDC	//  _74
    CTOS	//  payload
    NEWC	//  payload _77
    OVER	//  payload _77 payload
    HASHSU	//  payload _77 _78
    3456 PUSHINT	//  payload _77 _78 _79=3456
    SIGN	//  payload _77 _80
    STSLICER	//  payload _81
    ENDC	//  payload _82
    NEWC	//  payload _82 _83
    s2 PUSH	//  payload _82 _83 payload
    HASHSU	//  payload _82 _83 _84
    777 PUSHINT	//  payload _82 _83 _84 _85=777
    SIGN	//  payload _82 _83 _86
    STSLICER	//  payload _82 _87
    ENDC	//  payload _82 _88
    2040604399 PUSHINT	//  payload _82 _88 _89=2040604399
    NEWC	//  payload _82 _88 _89=2040604399 _90
    32 STU	//  payload _82 _88 _92
    STREF	//  payload _82 _93
    STREF	//  payload _94
    SWAP	//  _94 payload
    STSLICER	//  _95
    ENDC	//  _96
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _98
    8000000000 PUSHINT	//  body _98 _100=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _98 _100=8000000000 _101 _102 body
    4 TUPLE	//  _98 _99
    invoke_method CALLDICT	//  _252 _253
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _106
    0 TUPLE	//  _106 _107
    invoke_method CALLDICT	//  _254 _255
    NIP	//  stack
    9001 PUSHINT	//  stack _109=9001
    OVER	//  stack _109=9001 stack
    FIRST	//  stack _109=9001 _110
    2 EQINT	//  stack _109=9001 _112
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _116=1
    INDEXVAR	//  stack _117
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _119=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _119=9002 r_bB r_bA _124
    EQUAL	//  stack _119=9002 r_bB _125
    s1 s2 XCHG	//  stack r_bB _119=9002 _125
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _127=9003
    SWAP	//  stack _127=9003 r_bB
    0 EQINT	//  stack _127=9003 _129
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _133=2
    INDEXVAR	//  stack _134
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _136=9004
    777 PUSHINT	//  stack r_pkA r_pkB _136=9004 _137=777
    PRIVTOPUB	//  stack r_pkA r_pkB _136=9004 _138
    s1 s3 XCHG	//  stack _136=9004 r_pkB r_pkA _138
    EQUAL	//  stack _136=9004 r_pkB _139
    s1 s2 XCHG	//  stack r_pkB _136=9004 _139
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _141=9005
    3456 PUSHINT	//  stack r_pkB _141=9005 _142=3456
    PRIVTOPUB	//  stack r_pkB _141=9005 _143
    s1 s2 XCHG	//  stack _141=9005 r_pkB _143
    EQUAL	//  stack _141=9005 _144
    THROWANYIFNOT
    9006 PUSHINT	//  stack _146=9006
    OVER
    3 PUSHINT	//  stack _146=9006 stack _147=3
    INDEXVAR	//  stack _146=9006 _148
    931 PUSHINT	//  stack _146=9006 _148 _149=931
    EQUAL	//  stack _146=9006 _150
    THROWANYIFNOT
    9007 PUSHINT	//  stack _152=9007
    OVER
    4 PUSHINT	//  stack _152=9007 stack _153=4
    INDEXVAR	//  stack _152=9007 _154
    0 PUSHINT	//  stack _152=9007 _154 _155=0
    INDEXVAR	//  stack _152=9007 _156
    86400 PUSHINT	//  stack _152=9007 _156 _157=86400
    EQUAL	//  stack _152=9007 _158
    THROWANYIFNOT
    9007 PUSHINT	//  stack _160=9007
    OVER
    4 PUSHINT	//  stack _160=9007 stack _161=4
    INDEXVAR	//  stack _160=9007 _162
    1 PUSHINT	//  stack _160=9007 _162 _163=1
    INDEXVAR	//  stack _160=9007 _164
    30000000 PUSHINT	//  stack _160=9007 _164 _165=30000000
    EQUAL	//  stack _160=9007 _166
    THROWANYIFNOT
    9007 PUSHINT	//  stack _168=9007
    OVER
    4 PUSHINT	//  stack _168=9007 stack _169=4
    INDEXVAR	//  stack _168=9007 _170
    2 PUSHINT	//  stack _168=9007 _170 _171=2
    INDEXVAR	//  stack _168=9007 _172
    3600 PUSHINT	//  stack _168=9007 _172 _173=3600
    EQUAL	//  stack _168=9007 _174
    THROWANYIFNOT
    9008 PUSHINT	//  stack _176=9008
    OVER
    5 PUSHINT	//  stack _176=9008 stack _177=5
    INDEXVAR	//  stack _176=9008 _178
    0 PUSHINT	//  stack _176=9008 _178 _179=0
    INDEXVAR	//  stack _176=9008 _180
    8 EQINT	//  stack _176=9008 _182
    THROWANYIFNOT
    9008 PUSHINT	//  stack _184=9008
    OVER
    5 PUSHINT	//  stack _184=9008 stack _185=5
    INDEXVAR	//  stack _184=9008 _186
    1 PUSHINT	//  stack _184=9008 _186 _187=1
    INDEXVAR	//  stack _184=9008 _188
    13 EQINT	//  stack _184=9008 _190
    THROWANYIFNOT
    FALSE	//  stack _193
    FALSE	//  stack _193 _194
    1777 PUSHINT	//  stack _193 _194 _195=1777
    PUSHNULL	//  stack _193 _194 _195=1777 _196
    15 PUSHINT	//  stack _193 _194 _195=1777 _196 _197=15
    PUSHNULL	//  stack _193 _194 _195=1777 _196 _197=15 _198
    9 PUSHINT	//  stack _193 _194 _195=1777 _196 _197=15 _198 _199=9
    NEWC	//  stack _193 _194 _195=1777 _196 _197=15 _198 _199=9 _200
    64 STU	//  stack _193 _194 _195=1777 _196 _197=15 _198 _202
    10 PUSHINT	//  stack _193 _194 _195=1777 _196 _197=15 _198 _202 _203=10
    STVARUINT16	//  stack _193 _194 _195=1777 _196 _197=15 _198 _204
    STDICT	//  stack _193 _194 _195=1777 _196 _197=15 _205
    64 STU	//  stack _193 _194 _195=1777 _196 _207
    10 PUSHINT	//  stack _193 _194 _195=1777 _196 _207 _208=10
    STVARUINT16	//  stack _193 _194 _195=1777 _196 _209
    STDICT	//  stack _193 _194 _195=1777 _210
    32 STU	//  stack _193 _194 _212
    1 STI	//  stack _193 _214
    1 STI	//  stack _216
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _218=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _218=9009 stack _219=6
    INDEXVAR	//  stack quarantined_state _218=9009 _220
    ROT	//  stack _218=9009 _220 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _218=9009 _221
    THROWANYIFNOT
    9010 PUSHINT	//  stack _223=9010
    OVER
    7 PUSHINT	//  stack _223=9010 stack _224=7
    INDEXVAR	//  stack _223=9010 _225
    0 PUSHINT	//  stack _223=9010 _225 _226=0
    INDEXVAR	//  stack _223=9010 _227
    30000000 PUSHINT	//  stack _223=9010 _227 _228=30000000
    EQUAL	//  stack _223=9010 _229
    THROWANYIFNOT
    9010 PUSHINT	//  stack _231=9010
    OVER
    7 PUSHINT	//  stack _231=9010 stack _232=7
    INDEXVAR	//  stack _231=9010 _233
    1 PUSHINT	//  stack _231=9010 _233 _234=1
    INDEXVAR	//  stack _231=9010 _235
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _231=9010 _235 _236
    HASHSU SWAP HASHSU EQUAL	//  stack _231=9010 _237
    THROWANYIFNOT
    9010 PUSHINT	//  stack _239=9010
    SWAP
    7 PUSHINT	//  _239=9010 stack _240=7
    INDEXVAR	//  _239=9010 _241
    2 PUSHINT	//  _239=9010 _241 _242=2
    INDEXVAR	//  _239=9010 _243
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _239=9010 _243 _244
    HASHSU SWAP HASHSU EQUAL	//  _239=9010 _245
    THROWANYIFNOT
    TRUE	//  _247
  }>
  __test_start_uncooperative_close_cooperative_commit_fresher_state PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    9 PUSHINT	//  _2=777 _3=9
    10 PUSHINT	//  _2=777 _3=9 _4=10
    PUSHNULL	//  _2=777 _3=9 _4=10 _5
    PUSHNULL	//  _2=777 _3=9 _4=10 _5 _6
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _9=3456
    15 PUSHINT	//  alice_state _9=3456 _10=15
    10 PUSHINT	//  alice_state _9=3456 _10=15 _11=10
    PUSHNULL	//  alice_state _9=3456 _10=15 _11=10 _12
    PUSHNULL	//  alice_state _9=3456 _10=15 _11=10 _12 _13
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1777 PUSHINT	//  alice_state bob_state _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _18=931
    1433289580 PUSHINT	//  alice_state bob_state _18=931 _19=1433289580
    NEWC	//  alice_state bob_state _18=931 _19=1433289580 _20
    32 STU	//  alice_state bob_state _18=931 _22
    128 STU	//  alice_state bob_state _24
    s1 s2 XCHG	//  bob_state alice_state _24
    STREF	//  bob_state _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    521476815 PUSHINT	//  payload _30 _31=521476815
    NEWC	//  payload _30 _31=521476815 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method CALLDICT	//  _222 _223
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _52
    0 TUPLE	//  _52 _53
    invoke_method CALLDICT	//  _224 _225
    9001 PUSHINT
    s2 POP	//  _55=9001 stack
    FIRST	//  _55=9001 _56
    2 EQINT	//  _55=9001 _58
    THROWANYIFNOT
    22 PUSHINT	//  _61=22
    DUP	//  _61=22 _62=22
    931 PUSHINT	//  _61=22 _62=22 _63=931
    1128492404 PUSHINT	//  _61=22 _62=22 _63=931 _64=1128492404
    NEWC	//  _61=22 _62=22 _63=931 _64=1128492404 _65
    32 STU	//  _61=22 _62=22 _63=931 _67
    128 STU	//  _61=22 _62=22 _69
    64 STU	//  _61=22 _71
    64 STU	//  _73
    ENDC	//  _74
    CTOS	//  payload
    NEWC	//  payload _77
    OVER	//  payload _77 payload
    HASHSU	//  payload _77 _78
    3456 PUSHINT	//  payload _77 _78 _79=3456
    SIGN	//  payload _77 _80
    STSLICER	//  payload _81
    ENDC	//  payload _82
    NEWC	//  payload _82 _83
    s2 PUSH	//  payload _82 _83 payload
    HASHSU	//  payload _82 _83 _84
    777 PUSHINT	//  payload _82 _83 _84 _85=777
    SIGN	//  payload _82 _83 _86
    STSLICER	//  payload _82 _87
    ENDC	//  payload _82 _88
    2040604399 PUSHINT	//  payload _82 _88 _89=2040604399
    NEWC	//  payload _82 _88 _89=2040604399 _90
    32 STU	//  payload _82 _88 _92
    STREF	//  payload _82 _93
    STREF	//  payload _94
    SWAP	//  _94 payload
    STSLICER	//  _95
    ENDC	//  _96
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _98
    8000000000 PUSHINT	//  body _98 _100=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _98 _100=8000000000 _101 _102 body
    4 TUPLE	//  _98 _99
    invoke_method CALLDICT	//  _226 _227
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _106
    0 TUPLE	//  _106 _107
    invoke_method CALLDICT	//  _228 _229
    NIP	//  stack
    9001 PUSHINT	//  stack _109=9001
    OVER	//  stack _109=9001 stack
    FIRST	//  stack _109=9001 _110
    1 EQINT	//  stack _109=9001 _112
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _116=1
    INDEXVAR	//  stack _117
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _119=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _119=9002 r_bB r_bA _124
    EQUAL	//  stack _119=9002 r_bB _125
    s1 s2 XCHG	//  stack r_bB _119=9002 _125
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _127=9003
    SWAP	//  stack _127=9003 r_bB
    0 EQINT	//  stack _127=9003 _129
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _133=2
    INDEXVAR	//  stack _134
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _136=9004
    777 PUSHINT	//  stack r_pkA r_pkB _136=9004 _137=777
    PRIVTOPUB	//  stack r_pkA r_pkB _136=9004 _138
    s1 s3 XCHG	//  stack _136=9004 r_pkB r_pkA _138
    EQUAL	//  stack _136=9004 r_pkB _139
    s1 s2 XCHG	//  stack r_pkB _136=9004 _139
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _141=9005
    3456 PUSHINT	//  stack r_pkB _141=9005 _142=3456
    PRIVTOPUB	//  stack r_pkB _141=9005 _143
    s1 s2 XCHG	//  stack _141=9005 r_pkB _143
    EQUAL	//  stack _141=9005 _144
    THROWANYIFNOT
    9006 PUSHINT	//  stack _146=9006
    OVER
    3 PUSHINT	//  stack _146=9006 stack _147=3
    INDEXVAR	//  stack _146=9006 _148
    931 PUSHINT	//  stack _146=9006 _148 _149=931
    EQUAL	//  stack _146=9006 _150
    THROWANYIFNOT
    9007 PUSHINT	//  stack _152=9007
    OVER
    4 PUSHINT	//  stack _152=9007 stack _153=4
    INDEXVAR	//  stack _152=9007 _154
    0 PUSHINT	//  stack _152=9007 _154 _155=0
    INDEXVAR	//  stack _152=9007 _156
    86400 PUSHINT	//  stack _152=9007 _156 _157=86400
    EQUAL	//  stack _152=9007 _158
    THROWANYIFNOT
    9007 PUSHINT	//  stack _160=9007
    OVER
    4 PUSHINT	//  stack _160=9007 stack _161=4
    INDEXVAR	//  stack _160=9007 _162
    1 PUSHINT	//  stack _160=9007 _162 _163=1
    INDEXVAR	//  stack _160=9007 _164
    30000000 PUSHINT	//  stack _160=9007 _164 _165=30000000
    EQUAL	//  stack _160=9007 _166
    THROWANYIFNOT
    9007 PUSHINT	//  stack _168=9007
    OVER
    4 PUSHINT	//  stack _168=9007 stack _169=4
    INDEXVAR	//  stack _168=9007 _170
    2 PUSHINT	//  stack _168=9007 _170 _171=2
    INDEXVAR	//  stack _168=9007 _172
    3600 PUSHINT	//  stack _168=9007 _172 _173=3600
    EQUAL	//  stack _168=9007 _174
    THROWANYIFNOT
    9008 PUSHINT	//  stack _176=9008
    OVER
    5 PUSHINT	//  stack _176=9008 stack _177=5
    INDEXVAR	//  stack _176=9008 _178
    0 PUSHINT	//  stack _176=9008 _178 _179=0
    INDEXVAR	//  stack _176=9008 _180
    22 EQINT	//  stack _176=9008 _182
    THROWANYIFNOT
    9008 PUSHINT	//  stack _184=9008
    OVER
    5 PUSHINT	//  stack _184=9008 stack _185=5
    INDEXVAR	//  stack _184=9008 _186
    1 PUSHINT	//  stack _184=9008 _186 _187=1
    INDEXVAR	//  stack _184=9008 _188
    22 EQINT	//  stack _184=9008 _190
    THROWANYIFNOT
    9009 PUSHINT	//  stack _192=9009
    OVER
    6 PUSHINT	//  stack _192=9009 stack _193=6
    INDEXVAR	//  stack _192=9009 _194
    ISNULL	//  stack _192=9009 _195
    THROWANYIFNOT
    9010 PUSHINT	//  stack _197=9010
    OVER
    7 PUSHINT	//  stack _197=9010 stack _198=7
    INDEXVAR	//  stack _197=9010 _199
    0 PUSHINT	//  stack _197=9010 _199 _200=0
    INDEXVAR	//  stack _197=9010 _201
    30000000 PUSHINT	//  stack _197=9010 _201 _202=30000000
    EQUAL	//  stack _197=9010 _203
    THROWANYIFNOT
    9010 PUSHINT	//  stack _205=9010
    OVER
    7 PUSHINT	//  stack _205=9010 stack _206=7
    INDEXVAR	//  stack _205=9010 _207
    1 PUSHINT	//  stack _205=9010 _207 _208=1
    INDEXVAR	//  stack _205=9010 _209
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _205=9010 _209 _210
    HASHSU SWAP HASHSU EQUAL	//  stack _205=9010 _211
    THROWANYIFNOT
    9010 PUSHINT	//  stack _213=9010
    SWAP
    7 PUSHINT	//  _213=9010 stack _214=7
    INDEXVAR	//  _213=9010 _215
    2 PUSHINT	//  _213=9010 _215 _216=2
    INDEXVAR	//  _213=9010 _217
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _213=9010 _217 _218
    HASHSU SWAP HASHSU EQUAL	//  _213=9010 _219
    THROWANYIFNOT
    TRUE	//  _221
  }>
  create_quatantine_helper PROC:<{
    //  alice?
    init_channel_helper CALLDICT
    777 PUSHINT	//  alice? _3=777
    9 PUSHINT	//  alice? _3=777 _4=9
    10 PUSHINT	//  alice? _3=777 _4=9 _5=10
    PUSHNULL	//  alice? _3=777 _4=9 _5=10 _6
    PUSHNULL	//  alice? _3=777 _4=9 _5=10 _6 _7
    build_signed_semichannel CALLDICT	//  alice? alice_state
    3456 PUSHINT	//  alice? alice_state _10=3456
    15 PUSHINT	//  alice? alice_state _10=3456 _11=15
    10 PUSHINT	//  alice? alice_state _10=3456 _11=15 _12=10
    PUSHNULL	//  alice? alice_state _10=3456 _11=15 _12=10 _13
    PUSHNULL	//  alice? alice_state _10=3456 _11=15 _12=10 _13 _14
    build_signed_semichannel CALLDICT	//  alice? alice_state bob_state
    1777 PUSHINT	//  alice? alice_state bob_state _16=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice? alice_state bob_state _19=931
    1433289580 PUSHINT	//  alice? alice_state bob_state _19=931 _20=1433289580
    NEWC	//  alice? alice_state bob_state _19=931 _20=1433289580 _21
    32 STU	//  alice? alice_state bob_state _19=931 _23
    128 STU	//  alice? alice_state bob_state _25
    s1 s2 XCHG	//  alice? bob_state alice_state _25
    STREF	//  alice? bob_state _26
    STREF	//  alice? _27
    ENDC	//  alice? _28
    CTOS	//  alice? payload
    OVER	//  alice? payload alice?
    IF:<{	//  alice? payload
      777 PUSHINT	//  alice? payload _31=777
    }>ELSE<{	//  alice? payload
      3456 PUSHINT	//  alice? payload _31=3456
    }>	//  alice? payload target_key
    521476815 PUSHINT	//  alice? payload target_key _35=521476815
    NEWC	//  alice? payload target_key _35=521476815 _36
    32 STU	//  alice? payload target_key _38
    s1 s3 XCHG	//  target_key payload alice? _38
    1 STI	//  target_key payload _40
    OVER	//  target_key payload _40 payload
    HASHSU	//  target_key payload _40 _41
    s0 s3 XCHG2	//  _40 payload _41 target_key
    SIGN	//  _40 payload _42
    s1 s2 XCHG	//  payload _40 _42
    STSLICER	//  payload _43
    SWAP	//  _43 payload
    STSLICER	//  _44
    ENDC	//  _45
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _47
    8000000000 PUSHINT	//  body _47 _49=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _47 _49=8000000000 _50 _51 body
    4 TUPLE	//  _47 _48
    invoke_method CALLDICT	//  _53 _54
    2DROP	// 
  }>
  __test_challenge_quarantined_state_alice PROC:<{
    // 
    FALSE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    10 PUSHINT	//  _3=777 _4=10
    11 PUSHINT	//  _3=777 _4=10 _5=11
    PUSHNULL	//  _3=777 _4=10 _5=11 _6
    PUSHNULL	//  _3=777 _4=10 _5=11 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    16 PUSHINT	//  alice_state _10=3456 _11=16
    113 PUSHINT	//  alice_state _10=3456 _11=16 _12=113
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=113 _13
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=113 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1778 PUSHINT	//  alice_state bob_state _16=1778
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _19=931
    1130915665 PUSHINT	//  alice_state bob_state _19=931 _20=1130915665
    NEWC	//  alice_state bob_state _19=931 _20=1130915665 _21
    32 STU	//  alice_state bob_state _19=931 _23
    128 STU	//  alice_state bob_state _25
    s1 s2 XCHG	//  bob_state alice_state _25
    STREF	//  bob_state _26
    STREF	//  _27
    ENDC	//  _28
    CTOS	//  payload
    TRUE	//  payload _31
    143567410 PUSHINT	//  payload _31 _32=143567410
    NEWC	//  payload _31 _32=143567410 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    777 PUSHINT	//  payload _37 _38 _39=777
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  _45 _46
    invoke_method CALLDICT	//  _260 _261
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _53
    0 TUPLE	//  _53 _54
    invoke_method CALLDICT	//  _262 _263
    NIP	//  stack
    9001 PUSHINT	//  stack _56=9001
    OVER	//  stack _56=9001 stack
    FIRST	//  stack _56=9001 _57
    2 EQINT	//  stack _56=9001 _59
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _63=1
    INDEXVAR	//  stack _64
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _66=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _66=9002 r_bB r_bA _71
    EQUAL	//  stack _66=9002 r_bB _72
    s1 s2 XCHG	//  stack r_bB _66=9002 _72
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _74=9003
    SWAP	//  stack _74=9003 r_bB
    0 EQINT	//  stack _74=9003 _76
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _80=2
    INDEXVAR	//  stack _81
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _83=9004
    777 PUSHINT	//  stack r_pkA r_pkB _83=9004 _84=777
    PRIVTOPUB	//  stack r_pkA r_pkB _83=9004 _85
    s1 s3 XCHG	//  stack _83=9004 r_pkB r_pkA _85
    EQUAL	//  stack _83=9004 r_pkB _86
    s1 s2 XCHG	//  stack r_pkB _83=9004 _86
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _88=9005
    3456 PUSHINT	//  stack r_pkB _88=9005 _89=3456
    PRIVTOPUB	//  stack r_pkB _88=9005 _90
    s1 s2 XCHG	//  stack _88=9005 r_pkB _90
    EQUAL	//  stack _88=9005 _91
    THROWANYIFNOT
    9006 PUSHINT	//  stack _93=9006
    OVER
    3 PUSHINT	//  stack _93=9006 stack _94=3
    INDEXVAR	//  stack _93=9006 _95
    931 PUSHINT	//  stack _93=9006 _95 _96=931
    EQUAL	//  stack _93=9006 _97
    THROWANYIFNOT
    9007 PUSHINT	//  stack _99=9007
    OVER
    4 PUSHINT	//  stack _99=9007 stack _100=4
    INDEXVAR	//  stack _99=9007 _101
    0 PUSHINT	//  stack _99=9007 _101 _102=0
    INDEXVAR	//  stack _99=9007 _103
    86400 PUSHINT	//  stack _99=9007 _103 _104=86400
    EQUAL	//  stack _99=9007 _105
    THROWANYIFNOT
    9007 PUSHINT	//  stack _107=9007
    OVER
    4 PUSHINT	//  stack _107=9007 stack _108=4
    INDEXVAR	//  stack _107=9007 _109
    1 PUSHINT	//  stack _107=9007 _109 _110=1
    INDEXVAR	//  stack _107=9007 _111
    30000000 PUSHINT	//  stack _107=9007 _111 _112=30000000
    EQUAL	//  stack _107=9007 _113
    THROWANYIFNOT
    9007 PUSHINT	//  stack _115=9007
    OVER
    4 PUSHINT	//  stack _115=9007 stack _116=4
    INDEXVAR	//  stack _115=9007 _117
    2 PUSHINT	//  stack _115=9007 _117 _118=2
    INDEXVAR	//  stack _115=9007 _119
    3600 PUSHINT	//  stack _115=9007 _119 _120=3600
    EQUAL	//  stack _115=9007 _121
    THROWANYIFNOT
    9008 PUSHINT	//  stack _123=9008
    OVER
    5 PUSHINT	//  stack _123=9008 stack _124=5
    INDEXVAR	//  stack _123=9008 _125
    0 PUSHINT	//  stack _123=9008 _125 _126=0
    INDEXVAR	//  stack _123=9008 _127
    7 EQINT	//  stack _123=9008 _129
    THROWANYIFNOT
    9008 PUSHINT	//  stack _131=9008
    OVER
    5 PUSHINT	//  stack _131=9008 stack _132=5
    INDEXVAR	//  stack _131=9008 _133
    1 PUSHINT	//  stack _131=9008 _133 _134=1
    INDEXVAR	//  stack _131=9008 _135
    11 EQINT	//  stack _131=9008 _137
    THROWANYIFNOT
    TRUE	//  stack _140
    TRUE	//  stack _140 _141
    1777 PUSHINT	//  stack _140 _141 _142=1777
    PUSHNULL	//  stack _140 _141 _142=1777 _143
    16 PUSHINT	//  stack _140 _141 _142=1777 _143 _144=16
    PUSHNULL	//  stack _140 _141 _142=1777 _143 _144=16 _145
    9 PUSHINT	//  stack _140 _141 _142=1777 _143 _144=16 _145 _146=9
    NEWC	//  stack _140 _141 _142=1777 _143 _144=16 _145 _146=9 _147
    64 STU	//  stack _140 _141 _142=1777 _143 _144=16 _145 _149
    10 PUSHINT	//  stack _140 _141 _142=1777 _143 _144=16 _145 _149 _150=10
    STVARUINT16	//  stack _140 _141 _142=1777 _143 _144=16 _145 _151
    STDICT	//  stack _140 _141 _142=1777 _143 _144=16 _152
    64 STU	//  stack _140 _141 _142=1777 _143 _154
    30000113 PUSHINT	//  stack _140 _141 _142=1777 _143 _154 _157
    STVARUINT16	//  stack _140 _141 _142=1777 _143 _158
    STDICT	//  stack _140 _141 _142=1777 _159
    32 STU	//  stack _140 _141 _161
    1 STI	//  stack _140 _163
    1 STI	//  stack _165
    ENDC	//  stack quarantined_state
    OVER
    6 PUSHINT	//  stack quarantined_state stack _168=6
    INDEXVAR	//  stack quarantined_state _169
    CTOS	//  stack quarantined_state qs
    11001 PUSHINT	//  stack quarantined_state qs _171=11001
    SWAP	//  stack quarantined_state _171=11001 qs
    64 LDU	//  stack quarantined_state _171=11001 _172 qs
    SWAP	//  stack quarantined_state _171=11001 qs _172
    9 EQINT	//  stack quarantined_state _171=11001 qs _176
    s1 s2 XCHG	//  stack quarantined_state qs _171=11001 _176
    THROWANYIFNOT
    11002 PUSHINT	//  stack quarantined_state qs _178=11002
    SWAP	//  stack quarantined_state _178=11002 qs
    LDVARUINT16	//  stack quarantined_state _178=11002 _179 qs
    SWAP	//  stack quarantined_state _178=11002 qs _179
    10 EQINT	//  stack quarantined_state _178=11002 qs _182
    s1 s2 XCHG	//  stack quarantined_state qs _178=11002 _182
    THROWANYIFNOT
    11003 PUSHINT	//  stack quarantined_state qs _184=11003
    SWAP	//  stack quarantined_state _184=11003 qs
    LDDICT	//  stack quarantined_state _184=11003 _185 qs
    SWAP	//  stack quarantined_state _184=11003 qs _185
    ISNULL	//  stack quarantined_state _184=11003 qs _187
    s1 s2 XCHG	//  stack quarantined_state qs _184=11003 _187
    THROWANYIFNOT
    11004 PUSHINT	//  stack quarantined_state qs _189=11004
    SWAP	//  stack quarantined_state _189=11004 qs
    64 LDU	//  stack quarantined_state _189=11004 _190 qs
    SWAP	//  stack quarantined_state _189=11004 qs _190
    16 EQINT	//  stack quarantined_state _189=11004 qs _194
    s1 s2 XCHG	//  stack quarantined_state qs _189=11004 _194
    THROWANYIFNOT
    11005 PUSHINT	//  stack quarantined_state qs _196=11005
    SWAP	//  stack quarantined_state _196=11005 qs
    LDVARUINT16	//  stack quarantined_state _196=11005 _197 qs
    SWAP
    30000113 PUSHINT	//  stack quarantined_state _196=11005 qs _197 _201
    EQUAL	//  stack quarantined_state _196=11005 qs _202
    s1 s2 XCHG	//  stack quarantined_state qs _196=11005 _202
    THROWANYIFNOT
    11006 PUSHINT	//  stack quarantined_state qs _204=11006
    SWAP	//  stack quarantined_state _204=11006 qs
    LDDICT	//  stack quarantined_state _204=11006 _205 qs
    SWAP	//  stack quarantined_state _204=11006 qs _205
    ISNULL	//  stack quarantined_state _204=11006 qs _207
    s1 s2 XCHG	//  stack quarantined_state qs _204=11006 _207
    THROWANYIFNOT
    11007 PUSHINT	//  stack quarantined_state qs _209=11007
    SWAP	//  stack quarantined_state _209=11007 qs
    32 LDU	//  stack quarantined_state _209=11007 _210 qs
    SWAP
    1777 PUSHINT	//  stack quarantined_state _209=11007 qs _210 _213=1777
    EQUAL	//  stack quarantined_state _209=11007 qs _214
    s1 s2 XCHG	//  stack quarantined_state qs _209=11007 _214
    THROWANYIFNOT
    11008 PUSHINT	//  stack quarantined_state qs _216=11008
    SWAP	//  stack quarantined_state _216=11008 qs
    1 LDI	//  stack quarantined_state _216=11008 _217 qs
    SWAP	//  stack quarantined_state _216=11008 qs _217
    -1 EQINT	//  stack quarantined_state _216=11008 qs _221
    s1 s2 XCHG	//  stack quarantined_state qs _216=11008 _221
    THROWANYIFNOT
    11009 PUSHINT	//  stack quarantined_state qs _223=11009
    SWAP	//  stack quarantined_state _223=11009 qs
    1 LDI	//  stack quarantined_state _223=11009 _285 _284
    DROP	//  stack quarantined_state _223=11009 _224
    -1 EQINT	//  stack quarantined_state _223=11009 _228
    THROWANYIFNOT
    9009 PUSHINT	//  stack quarantined_state _230=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _230=9009 stack _231=6
    INDEXVAR	//  stack quarantined_state _230=9009 _232
    ROT	//  stack _230=9009 _232 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _230=9009 _233
    THROWANYIFNOT
    9010 PUSHINT	//  stack _235=9010
    OVER
    7 PUSHINT	//  stack _235=9010 stack _236=7
    INDEXVAR	//  stack _235=9010 _237
    0 PUSHINT	//  stack _235=9010 _237 _238=0
    INDEXVAR	//  stack _235=9010 _239
    30000000 PUSHINT	//  stack _235=9010 _239 _240=30000000
    EQUAL	//  stack _235=9010 _241
    THROWANYIFNOT
    9010 PUSHINT	//  stack _243=9010
    OVER
    7 PUSHINT	//  stack _243=9010 stack _244=7
    INDEXVAR	//  stack _243=9010 _245
    1 PUSHINT	//  stack _243=9010 _245 _246=1
    INDEXVAR	//  stack _243=9010 _247
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _243=9010 _247 _248
    HASHSU SWAP HASHSU EQUAL	//  stack _243=9010 _249
    THROWANYIFNOT
    9010 PUSHINT	//  stack _251=9010
    SWAP
    7 PUSHINT	//  _251=9010 stack _252=7
    INDEXVAR	//  _251=9010 _253
    2 PUSHINT	//  _251=9010 _253 _254=2
    INDEXVAR	//  _251=9010 _255
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _251=9010 _255 _256
    HASHSU SWAP HASHSU EQUAL	//  _251=9010 _257
    THROWANYIFNOT
    TRUE	//  _259
  }>
  __test_challenge_quarantined_state_bob PROC:<{
    // 
    TRUE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    10 PUSHINT	//  _3=777 _4=10
    11 PUSHINT	//  _3=777 _4=10 _5=11
    PUSHNULL	//  _3=777 _4=10 _5=11 _6
    PUSHNULL	//  _3=777 _4=10 _5=11 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    16 PUSHINT	//  alice_state _10=3456 _11=16
    11 PUSHINT	//  alice_state _10=3456 _11=16 _12=11
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=11 _13
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=11 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1779 PUSHINT	//  alice_state bob_state _16=1779
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _19=931
    1130915665 PUSHINT	//  alice_state bob_state _19=931 _20=1130915665
    NEWC	//  alice_state bob_state _19=931 _20=1130915665 _21
    32 STU	//  alice_state bob_state _19=931 _23
    128 STU	//  alice_state bob_state _25
    s1 s2 XCHG	//  bob_state alice_state _25
    STREF	//  bob_state _26
    STREF	//  _27
    ENDC	//  _28
    CTOS	//  payload
    FALSE	//  payload _31
    143567410 PUSHINT	//  payload _31 _32=143567410
    NEWC	//  payload _31 _32=143567410 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    3456 PUSHINT	//  payload _37 _38 _39=3456
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  _45 _46
    invoke_method CALLDICT	//  _197 _198
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _53
    0 TUPLE	//  _53 _54
    invoke_method CALLDICT	//  _199 _200
    NIP	//  stack
    9001 PUSHINT	//  stack _56=9001
    OVER	//  stack _56=9001 stack
    FIRST	//  stack _56=9001 _57
    2 EQINT	//  stack _56=9001 _59
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _63=1
    INDEXVAR	//  stack _64
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _66=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack _66=9002 r_bB r_bA _71
    EQUAL	//  stack _66=9002 r_bB _72
    s1 s2 XCHG	//  stack r_bB _66=9002 _72
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _74=9003
    SWAP	//  stack _74=9003 r_bB
    0 EQINT	//  stack _74=9003 _76
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _80=2
    INDEXVAR	//  stack _81
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _83=9004
    777 PUSHINT	//  stack r_pkA r_pkB _83=9004 _84=777
    PRIVTOPUB	//  stack r_pkA r_pkB _83=9004 _85
    s1 s3 XCHG	//  stack _83=9004 r_pkB r_pkA _85
    EQUAL	//  stack _83=9004 r_pkB _86
    s1 s2 XCHG	//  stack r_pkB _83=9004 _86
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _88=9005
    3456 PUSHINT	//  stack r_pkB _88=9005 _89=3456
    PRIVTOPUB	//  stack r_pkB _88=9005 _90
    s1 s2 XCHG	//  stack _88=9005 r_pkB _90
    EQUAL	//  stack _88=9005 _91
    THROWANYIFNOT
    9006 PUSHINT	//  stack _93=9006
    OVER
    3 PUSHINT	//  stack _93=9006 stack _94=3
    INDEXVAR	//  stack _93=9006 _95
    931 PUSHINT	//  stack _93=9006 _95 _96=931
    EQUAL	//  stack _93=9006 _97
    THROWANYIFNOT
    9007 PUSHINT	//  stack _99=9007
    OVER
    4 PUSHINT	//  stack _99=9007 stack _100=4
    INDEXVAR	//  stack _99=9007 _101
    0 PUSHINT	//  stack _99=9007 _101 _102=0
    INDEXVAR	//  stack _99=9007 _103
    86400 PUSHINT	//  stack _99=9007 _103 _104=86400
    EQUAL	//  stack _99=9007 _105
    THROWANYIFNOT
    9007 PUSHINT	//  stack _107=9007
    OVER
    4 PUSHINT	//  stack _107=9007 stack _108=4
    INDEXVAR	//  stack _107=9007 _109
    1 PUSHINT	//  stack _107=9007 _109 _110=1
    INDEXVAR	//  stack _107=9007 _111
    30000000 PUSHINT	//  stack _107=9007 _111 _112=30000000
    EQUAL	//  stack _107=9007 _113
    THROWANYIFNOT
    9007 PUSHINT	//  stack _115=9007
    OVER
    4 PUSHINT	//  stack _115=9007 stack _116=4
    INDEXVAR	//  stack _115=9007 _117
    2 PUSHINT	//  stack _115=9007 _117 _118=2
    INDEXVAR	//  stack _115=9007 _119
    3600 PUSHINT	//  stack _115=9007 _119 _120=3600
    EQUAL	//  stack _115=9007 _121
    THROWANYIFNOT
    9008 PUSHINT	//  stack _123=9008
    OVER
    5 PUSHINT	//  stack _123=9008 stack _124=5
    INDEXVAR	//  stack _123=9008 _125
    0 PUSHINT	//  stack _123=9008 _125 _126=0
    INDEXVAR	//  stack _123=9008 _127
    7 EQINT	//  stack _123=9008 _129
    THROWANYIFNOT
    9008 PUSHINT	//  stack _131=9008
    OVER
    5 PUSHINT	//  stack _131=9008 stack _132=5
    INDEXVAR	//  stack _131=9008 _133
    1 PUSHINT	//  stack _131=9008 _133 _134=1
    INDEXVAR	//  stack _131=9008 _135
    11 EQINT	//  stack _131=9008 _137
    THROWANYIFNOT
    TRUE	//  stack _140
    FALSE	//  stack _140 _141
    1777 PUSHINT	//  stack _140 _141 _142=1777
    PUSHNULL	//  stack _140 _141 _142=1777 _143
    15 PUSHINT	//  stack _140 _141 _142=1777 _143 _144=15
    PUSHNULL	//  stack _140 _141 _142=1777 _143 _144=15 _145
    10 PUSHINT	//  stack _140 _141 _142=1777 _143 _144=15 _145 _146=10
    NEWC	//  stack _140 _141 _142=1777 _143 _144=15 _145 _146=10 _147
    64 STU	//  stack _140 _141 _142=1777 _143 _144=15 _145 _149
    30000011 PUSHINT	//  stack _140 _141 _142=1777 _143 _144=15 _145 _149 _152
    STVARUINT16	//  stack _140 _141 _142=1777 _143 _144=15 _145 _153
    STDICT	//  stack _140 _141 _142=1777 _143 _144=15 _154
    64 STU	//  stack _140 _141 _142=1777 _143 _156
    10 PUSHINT	//  stack _140 _141 _142=1777 _143 _156 _157=10
    STVARUINT16	//  stack _140 _141 _142=1777 _143 _158
    STDICT	//  stack _140 _141 _142=1777 _159
    32 STU	//  stack _140 _141 _161
    1 STI	//  stack _140 _163
    1 STI	//  stack _165
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _167=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _167=9009 stack _168=6
    INDEXVAR	//  stack quarantined_state _167=9009 _169
    ROT	//  stack _167=9009 _169 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _167=9009 _170
    THROWANYIFNOT
    9010 PUSHINT	//  stack _172=9010
    OVER
    7 PUSHINT	//  stack _172=9010 stack _173=7
    INDEXVAR	//  stack _172=9010 _174
    0 PUSHINT	//  stack _172=9010 _174 _175=0
    INDEXVAR	//  stack _172=9010 _176
    30000000 PUSHINT	//  stack _172=9010 _176 _177=30000000
    EQUAL	//  stack _172=9010 _178
    THROWANYIFNOT
    9010 PUSHINT	//  stack _180=9010
    OVER
    7 PUSHINT	//  stack _180=9010 stack _181=7
    INDEXVAR	//  stack _180=9010 _182
    1 PUSHINT	//  stack _180=9010 _182 _183=1
    INDEXVAR	//  stack _180=9010 _184
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _180=9010 _184 _185
    HASHSU SWAP HASHSU EQUAL	//  stack _180=9010 _186
    THROWANYIFNOT
    9010 PUSHINT	//  stack _188=9010
    SWAP
    7 PUSHINT	//  _188=9010 stack _189=7
    INDEXVAR	//  _188=9010 _190
    2 PUSHINT	//  _188=9010 _190 _191=2
    INDEXVAR	//  _188=9010 _192
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _188=9010 _192 _193
    HASHSU SWAP HASHSU EQUAL	//  _188=9010 _194
    THROWANYIFNOT
    TRUE	//  _196
  }>
  __test_challenge_quarantined_state_no_quarantine PROC:<{
    // 
    init_channel_helper CALLDICT
    777 PUSHINT	//  _2=777
    10 PUSHINT	//  _2=777 _3=10
    11 PUSHINT	//  _2=777 _3=10 _4=11
    PUSHNULL	//  _2=777 _3=10 _4=11 _5
    PUSHNULL	//  _2=777 _3=10 _4=11 _5 _6
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _9=3456
    16 PUSHINT	//  alice_state _9=3456 _10=16
    11 PUSHINT	//  alice_state _9=3456 _10=16 _11=11
    PUSHNULL	//  alice_state _9=3456 _10=16 _11=11 _12
    PUSHNULL	//  alice_state _9=3456 _10=16 _11=11 _12 _13
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1777 PUSHINT	//  alice_state bob_state _15=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _18=931
    1130915665 PUSHINT	//  alice_state bob_state _18=931 _19=1130915665
    NEWC	//  alice_state bob_state _18=931 _19=1130915665 _20
    32 STU	//  alice_state bob_state _18=931 _22
    128 STU	//  alice_state bob_state _24
    s1 s2 XCHG	//  bob_state alice_state _24
    STREF	//  bob_state _25
    STREF	//  _26
    ENDC	//  _27
    CTOS	//  payload
    FALSE	//  payload _30
    143567410 PUSHINT	//  payload _30 _31=143567410
    NEWC	//  payload _30 _31=143567410 _32
    32 STU	//  payload _30 _34
    1 STI	//  payload _36
    OVER	//  payload _36 payload
    HASHSU	//  payload _36 _37
    3456 PUSHINT	//  payload _36 _37 _38=3456
    SIGN	//  payload _36 _39
    STSLICER	//  payload _40
    SWAP	//  _40 payload
    STSLICER	//  _41
    ENDC	//  _42
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _44
    8000000000 PUSHINT	//  body _44 _46=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _44 _46=8000000000 _47 _48 body
    4 TUPLE	//  _44 _45
    invoke_method_expect_fail CALLDICT	//  _49
    DROP	// 
    TRUE	//  _50
  }>
  __test_challenge_quarantined_state_with_the_same_state PROC:<{
    // 
    FALSE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    9 PUSHINT	//  _3=777 _4=9
    10 PUSHINT	//  _3=777 _4=9 _5=10
    PUSHNULL	//  _3=777 _4=9 _5=10 _6
    PUSHNULL	//  _3=777 _4=9 _5=10 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    15 PUSHINT	//  alice_state _10=3456 _11=15
    10 PUSHINT	//  alice_state _10=3456 _11=15 _12=10
    PUSHNULL	//  alice_state _10=3456 _11=15 _12=10 _13
    PUSHNULL	//  alice_state _10=3456 _11=15 _12=10 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1777 PUSHINT	//  alice_state bob_state _16=1777
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _19=931
    1130915665 PUSHINT	//  alice_state bob_state _19=931 _20=1130915665
    NEWC	//  alice_state bob_state _19=931 _20=1130915665 _21
    32 STU	//  alice_state bob_state _19=931 _23
    128 STU	//  alice_state bob_state _25
    s1 s2 XCHG	//  bob_state alice_state _25
    STREF	//  bob_state _26
    STREF	//  _27
    ENDC	//  _28
    CTOS	//  payload
    TRUE	//  payload _31
    143567410 PUSHINT	//  payload _31 _32=143567410
    NEWC	//  payload _31 _32=143567410 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    777 PUSHINT	//  payload _37 _38 _39=777
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL	//  body _45 _47=8000000000 _48
    PUSHNULL	//  body _45 _47=8000000000 _48 _49
    s4 PUSH	//  body _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  body _45 _46
    invoke_method CALLDICT	//  body _99 _100
    2DROP	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _51
    8000000000 PUSHINT	//  body _51 _53=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _51 _53=8000000000 _54 _55 body
    4 TUPLE	//  _51 _52
    invoke_method_expect_fail CALLDICT	//  _56
    DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _59
    0 TUPLE	//  _59 _60
    invoke_method CALLDICT	//  _101 _102
    NIP	//  stack
    9001 PUSHINT	//  stack _62=9001
    OVER	//  stack _62=9001 stack
    FIRST	//  stack _62=9001 _63
    2 EQINT	//  stack _62=9001 _65
    THROWANYIFNOT
    TRUE	//  stack _68
    TRUE	//  stack _68 _69
    1777 PUSHINT	//  stack _68 _69 _70=1777
    PUSHNULL	//  stack _68 _69 _70=1777 _71
    15 PUSHINT	//  stack _68 _69 _70=1777 _71 _72=15
    PUSHNULL	//  stack _68 _69 _70=1777 _71 _72=15 _73
    9 PUSHINT	//  stack _68 _69 _70=1777 _71 _72=15 _73 _74=9
    NEWC	//  stack _68 _69 _70=1777 _71 _72=15 _73 _74=9 _75
    64 STU	//  stack _68 _69 _70=1777 _71 _72=15 _73 _77
    10 PUSHINT	//  stack _68 _69 _70=1777 _71 _72=15 _73 _77 _78=10
    STVARUINT16	//  stack _68 _69 _70=1777 _71 _72=15 _73 _79
    STDICT	//  stack _68 _69 _70=1777 _71 _72=15 _80
    64 STU	//  stack _68 _69 _70=1777 _71 _82
    10 PUSHINT	//  stack _68 _69 _70=1777 _71 _82 _83=10
    STVARUINT16	//  stack _68 _69 _70=1777 _71 _84
    STDICT	//  stack _68 _69 _70=1777 _85
    32 STU	//  stack _68 _69 _87
    1 STI	//  stack _68 _89
    1 STI	//  stack _91
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _93=9009
    s0 s2 XCHG
    6 PUSHINT	//  _93=9009 quarantined_state stack _94=6
    INDEXVAR	//  _93=9009 quarantined_state _95
    SWAP	//  _93=9009 _95 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  _93=9009 _96
    THROWANYIFNOT
    TRUE	//  _98
  }>
  __test_challenge_quarantined_state_unauthorized PROC:<{
    // 
    TRUE	//  _0
    create_quatantine_helper CALLDICT
    12452 PUSHINT	//  _3=12452
    10 PUSHINT	//  _3=12452 _4=10
    11 PUSHINT	//  _3=12452 _4=10 _5=11
    PUSHNULL	//  _3=12452 _4=10 _5=11 _6
    PUSHNULL	//  _3=12452 _4=10 _5=11 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    16 PUSHINT	//  alice_state _10=3456 _11=16
    11 PUSHINT	//  alice_state _10=3456 _11=16 _12=11
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=11 _13
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=11 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1779 PUSHINT	//  alice_state bob_state _16=1779
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _19=931
    1130915665 PUSHINT	//  alice_state bob_state _19=931 _20=1130915665
    NEWC	//  alice_state bob_state _19=931 _20=1130915665 _21
    32 STU	//  alice_state bob_state _19=931 _23
    128 STU	//  alice_state bob_state _25
    s1 s2 XCHG	//  bob_state alice_state _25
    STREF	//  bob_state _26
    STREF	//  _27
    ENDC	//  _28
    CTOS	//  payload
    FALSE	//  payload _31
    143567410 PUSHINT	//  payload _31 _32=143567410
    NEWC	//  payload _31 _32=143567410 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    3456 PUSHINT	//  payload _37 _38 _39=3456
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  _45 _46
    invoke_method_expect_fail CALLDICT	//  _50
    DROP	// 
    777 PUSHINT	//  _52=777
    10 PUSHINT	//  _52=777 _53=10
    11 PUSHINT	//  _52=777 _53=10 _54=11
    PUSHNULL	//  _52=777 _53=10 _54=11 _55
    PUSHNULL	//  _52=777 _53=10 _54=11 _55 _56
    build_signed_semichannel CALLDICT	//  alice_state
    12452 PUSHINT	//  alice_state _59=12452
    16 PUSHINT	//  alice_state _59=12452 _60=16
    11 PUSHINT	//  alice_state _59=12452 _60=16 _61=11
    PUSHNULL	//  alice_state _59=12452 _60=16 _61=11 _62
    PUSHNULL	//  alice_state _59=12452 _60=16 _61=11 _62 _63
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1779 PUSHINT	//  alice_state bob_state _65=1779
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _68=931
    1130915665 PUSHINT	//  alice_state bob_state _68=931 _69=1130915665
    NEWC	//  alice_state bob_state _68=931 _69=1130915665 _70
    32 STU	//  alice_state bob_state _68=931 _72
    128 STU	//  alice_state bob_state _74
    s1 s2 XCHG	//  bob_state alice_state _74
    STREF	//  bob_state _75
    STREF	//  _76
    ENDC	//  _77
    CTOS	//  payload
    FALSE	//  payload _80
    143567410 PUSHINT	//  payload _80 _81=143567410
    NEWC	//  payload _80 _81=143567410 _82
    32 STU	//  payload _80 _84
    1 STI	//  payload _86
    OVER	//  payload _86 payload
    HASHSU	//  payload _86 _87
    3456 PUSHINT	//  payload _86 _87 _88=3456
    SIGN	//  payload _86 _89
    STSLICER	//  payload _90
    SWAP	//  _90 payload
    STSLICER	//  _91
    ENDC	//  _92
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _94
    8000000000 PUSHINT	//  body _94 _96=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _94 _96=8000000000 _97 _98 body
    4 TUPLE	//  _94 _95
    invoke_method_expect_fail CALLDICT	//  _99
    DROP	// 
    777 PUSHINT	//  _101=777
    10 PUSHINT	//  _101=777 _102=10
    11 PUSHINT	//  _101=777 _102=10 _103=11
    PUSHNULL	//  _101=777 _102=10 _103=11 _104
    PUSHNULL	//  _101=777 _102=10 _103=11 _104 _105
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _108=3456
    16 PUSHINT	//  alice_state _108=3456 _109=16
    11 PUSHINT	//  alice_state _108=3456 _109=16 _110=11
    PUSHNULL	//  alice_state _108=3456 _109=16 _110=11 _111
    PUSHNULL	//  alice_state _108=3456 _109=16 _110=11 _111 _112
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1779 PUSHINT	//  alice_state bob_state _114=1779
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _117=931
    1130915665 PUSHINT	//  alice_state bob_state _117=931 _118=1130915665
    NEWC	//  alice_state bob_state _117=931 _118=1130915665 _119
    32 STU	//  alice_state bob_state _117=931 _121
    128 STU	//  alice_state bob_state _123
    s1 s2 XCHG	//  bob_state alice_state _123
    STREF	//  bob_state _124
    STREF	//  _125
    ENDC	//  _126
    CTOS	//  payload
    FALSE	//  payload _129
    143567410 PUSHINT	//  payload _129 _130=143567410
    NEWC	//  payload _129 _130=143567410 _131
    32 STU	//  payload _129 _133
    1 STI	//  payload _135
    OVER	//  payload _135 payload
    HASHSU	//  payload _135 _136
    12452 PUSHINT	//  payload _135 _136 _137=12452
    SIGN	//  payload _135 _138
    STSLICER	//  payload _139
    SWAP	//  _139 payload
    STSLICER	//  _140
    ENDC	//  _141
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _143
    8000000000 PUSHINT	//  body _143 _145=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _143 _145=8000000000 _146 _147 body
    4 TUPLE	//  _143 _144
    invoke_method_expect_fail CALLDICT	//  _148
    DROP	// 
    TRUE	//  _149
  }>
  __test_challenge_quarantined_state_wrong_channel_id PROC:<{
    // 
    FALSE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    10 PUSHINT	//  _3=777 _4=10
    11 PUSHINT	//  _3=777 _4=10 _5=11
    PUSHNULL	//  _3=777 _4=10 _5=11 _6
    PUSHNULL	//  _3=777 _4=10 _5=11 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    16 PUSHINT	//  alice_state _10=3456 _11=16
    113 PUSHINT	//  alice_state _10=3456 _11=16 _12=113
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=113 _13
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=113 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1778 PUSHINT	//  alice_state bob_state _16=1778
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    1234 PUSHINT	//  alice_state bob_state _19=1234
    1130915665 PUSHINT	//  alice_state bob_state _19=1234 _20=1130915665
    NEWC	//  alice_state bob_state _19=1234 _20=1130915665 _21
    32 STU	//  alice_state bob_state _19=1234 _23
    128 STU	//  alice_state bob_state _25
    s1 s2 XCHG	//  bob_state alice_state _25
    STREF	//  bob_state _26
    STREF	//  _27
    ENDC	//  _28
    CTOS	//  payload
    TRUE	//  payload _31
    143567410 PUSHINT	//  payload _31 _32=143567410
    NEWC	//  payload _31 _32=143567410 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    777 PUSHINT	//  payload _37 _38 _39=777
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  _45 _46
    invoke_method_expect_fail CALLDICT	//  _50
    DROP	// 
    777 PUSHINT	//  _52=777
    10 PUSHINT	//  _52=777 _53=10
    11 PUSHINT	//  _52=777 _53=10 _54=11
    PUSHNULL	//  _52=777 _53=10 _54=11 _55
    PUSHNULL	//  _52=777 _53=10 _54=11 _55 _56
    build_signed_semichannel_wrong_channel_id CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _59=3456
    16 PUSHINT	//  alice_state _59=3456 _60=16
    113 PUSHINT	//  alice_state _59=3456 _60=16 _61=113
    PUSHNULL	//  alice_state _59=3456 _60=16 _61=113 _62
    PUSHNULL	//  alice_state _59=3456 _60=16 _61=113 _62 _63
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1778 PUSHINT	//  alice_state bob_state _65=1778
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _68=931
    1130915665 PUSHINT	//  alice_state bob_state _68=931 _69=1130915665
    NEWC	//  alice_state bob_state _68=931 _69=1130915665 _70
    32 STU	//  alice_state bob_state _68=931 _72
    128 STU	//  alice_state bob_state _74
    s1 s2 XCHG	//  bob_state alice_state _74
    STREF	//  bob_state _75
    STREF	//  _76
    ENDC	//  _77
    CTOS	//  payload
    TRUE	//  payload _80
    143567410 PUSHINT	//  payload _80 _81=143567410
    NEWC	//  payload _80 _81=143567410 _82
    32 STU	//  payload _80 _84
    1 STI	//  payload _86
    OVER	//  payload _86 payload
    HASHSU	//  payload _86 _87
    777 PUSHINT	//  payload _86 _87 _88=777
    SIGN	//  payload _86 _89
    STSLICER	//  payload _90
    SWAP	//  _90 payload
    STSLICER	//  _91
    ENDC	//  _92
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _94
    8000000000 PUSHINT	//  body _94 _96=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _94 _96=8000000000 _97 _98 body
    4 TUPLE	//  _94 _95
    invoke_method_expect_fail CALLDICT	//  _99
    DROP	// 
    777 PUSHINT	//  _101=777
    10 PUSHINT	//  _101=777 _102=10
    11 PUSHINT	//  _101=777 _102=10 _103=11
    PUSHNULL	//  _101=777 _102=10 _103=11 _104
    PUSHNULL	//  _101=777 _102=10 _103=11 _104 _105
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _108=3456
    16 PUSHINT	//  alice_state _108=3456 _109=16
    113 PUSHINT	//  alice_state _108=3456 _109=16 _110=113
    PUSHNULL	//  alice_state _108=3456 _109=16 _110=113 _111
    PUSHNULL	//  alice_state _108=3456 _109=16 _110=113 _111 _112
    build_signed_semichannel_wrong_channel_id CALLDICT	//  alice_state bob_state
    1778 PUSHINT	//  alice_state bob_state _114=1778
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _117=931
    1130915665 PUSHINT	//  alice_state bob_state _117=931 _118=1130915665
    NEWC	//  alice_state bob_state _117=931 _118=1130915665 _119
    32 STU	//  alice_state bob_state _117=931 _121
    128 STU	//  alice_state bob_state _123
    s1 s2 XCHG	//  bob_state alice_state _123
    STREF	//  bob_state _124
    STREF	//  _125
    ENDC	//  _126
    CTOS	//  payload
    TRUE	//  payload _129
    143567410 PUSHINT	//  payload _129 _130=143567410
    NEWC	//  payload _129 _130=143567410 _131
    32 STU	//  payload _129 _133
    1 STI	//  payload _135
    OVER	//  payload _135 payload
    HASHSU	//  payload _135 _136
    777 PUSHINT	//  payload _135 _136 _137=777
    SIGN	//  payload _135 _138
    STSLICER	//  payload _139
    SWAP	//  _139 payload
    STSLICER	//  _140
    ENDC	//  _141
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _143
    8000000000 PUSHINT	//  body _143 _145=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _143 _145=8000000000 _146 _147 body
    4 TUPLE	//  _143 _144
    invoke_method_expect_fail CALLDICT	//  _148
    DROP	// 
    TRUE	//  _149
  }>
  __test_challenge_quarantined_state_outdated_semichannels PROC:<{
    // 
    FALSE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    8 PUSHINT	//  _3=777 _4=8
    11 PUSHINT	//  _3=777 _4=8 _5=11
    PUSHNULL	//  _3=777 _4=8 _5=11 _6
    PUSHNULL	//  _3=777 _4=8 _5=11 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    14 PUSHINT	//  alice_state _10=3456 _11=14
    113 PUSHINT	//  alice_state _10=3456 _11=14 _12=113
    PUSHNULL	//  alice_state _10=3456 _11=14 _12=113 _13
    PUSHNULL	//  alice_state _10=3456 _11=14 _12=113 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1778 PUSHINT	//  alice_state bob_state _16=1778
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _19=931
    1130915665 PUSHINT	//  alice_state bob_state _19=931 _20=1130915665
    NEWC	//  alice_state bob_state _19=931 _20=1130915665 _21
    32 STU	//  alice_state bob_state _19=931 _23
    128 STU	//  alice_state bob_state _25
    s1 s2 XCHG	//  bob_state alice_state _25
    STREF	//  bob_state _26
    STREF	//  _27
    ENDC	//  _28
    CTOS	//  payload
    TRUE	//  payload _31
    143567410 PUSHINT	//  payload _31 _32=143567410
    NEWC	//  payload _31 _32=143567410 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    777 PUSHINT	//  payload _37 _38 _39=777
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  _45 _46
    invoke_method CALLDICT	//  _95 _96
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _53
    0 TUPLE	//  _53 _54
    invoke_method CALLDICT	//  _97 _98
    NIP	//  stack
    9001 PUSHINT	//  stack _56=9001
    OVER	//  stack _56=9001 stack
    FIRST	//  stack _56=9001 _57
    2 EQINT	//  stack _56=9001 _59
    THROWANYIFNOT
    TRUE	//  stack _62
    TRUE	//  stack _62 _63
    1777 PUSHINT	//  stack _62 _63 _64=1777
    PUSHNULL	//  stack _62 _63 _64=1777 _65
    14 PUSHINT	//  stack _62 _63 _64=1777 _65 _66=14
    PUSHNULL	//  stack _62 _63 _64=1777 _65 _66=14 _67
    9 PUSHINT	//  stack _62 _63 _64=1777 _65 _66=14 _67 _68=9
    NEWC	//  stack _62 _63 _64=1777 _65 _66=14 _67 _68=9 _69
    64 STU	//  stack _62 _63 _64=1777 _65 _66=14 _67 _71
    10 PUSHINT	//  stack _62 _63 _64=1777 _65 _66=14 _67 _71 _72=10
    STVARUINT16	//  stack _62 _63 _64=1777 _65 _66=14 _67 _73
    STDICT	//  stack _62 _63 _64=1777 _65 _66=14 _74
    64 STU	//  stack _62 _63 _64=1777 _65 _76
    30000113 PUSHINT	//  stack _62 _63 _64=1777 _65 _76 _79
    STVARUINT16	//  stack _62 _63 _64=1777 _65 _80
    STDICT	//  stack _62 _63 _64=1777 _81
    32 STU	//  stack _62 _63 _83
    1 STI	//  stack _62 _85
    1 STI	//  stack _87
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _89=9009
    s0 s2 XCHG
    6 PUSHINT	//  _89=9009 quarantined_state stack _90=6
    INDEXVAR	//  _89=9009 quarantined_state _91
    SWAP	//  _89=9009 _91 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  _89=9009 _92
    THROWANYIFNOT
    TRUE	//  _94
  }>
  __test_challenge_quarantined_state_contradicting_semichannels PROC:<{
    // 
    FALSE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    10 PUSHINT	//  _3=777 _4=10
    11 PUSHINT	//  _3=777 _4=10 _5=11
    PUSHNULL	//  _3=777 _4=10 _5=11 _6
    PUSHNULL	//  _3=777 _4=10 _5=11 _6 _7
    18 PUSHINT	//  _3=777 _4=10 _5=11 _6 _7 _8=18
    NEWC	//  _3=777 _4=10 _5=11 _6 _7 _8=18 _9
    64 STU	//  _3=777 _4=10 _5=11 _6 _7 _11
    113 PUSHINT	//  _3=777 _4=10 _5=11 _6 _7 _11 _12=113
    STVARUINT16	//  _3=777 _4=10 _5=11 _6 _7 _13
    STOPTREF	//  _3=777 _4=10 _5=11 _6 _14
    ENDC	//  _3=777 _4=10 _5=11 _6 _15
    build_signed_semichannel CALLDICT	//  alice_nextstate
    3456 PUSHINT	//  alice_nextstate _18=3456
    17 PUSHINT	//  alice_nextstate _18=3456 _19=17
    113 PUSHINT	//  alice_nextstate _18=3456 _19=17 _20=113
    PUSHNULL	//  alice_nextstate _18=3456 _19=17 _20=113 _21
    PUSHNULL	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _22
    10 PUSHINT	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _22 _23=10
    NEWC	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _22 _23=10 _24
    64 STU	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _22 _26
    11 PUSHINT	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _22 _26 _27=11
    STVARUINT16	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _22 _28
    STOPTREF	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _29
    ENDC	//  alice_nextstate _18=3456 _19=17 _20=113 _21 _30
    build_signed_semichannel CALLDICT	//  alice_nextstate bob_nextstate
    1778 PUSHINT	//  alice_nextstate bob_nextstate _32=1778
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_nextstate bob_nextstate _35=931
    1130915665 PUSHINT	//  alice_nextstate bob_nextstate _35=931 _36=1130915665
    NEWC	//  alice_nextstate bob_nextstate _35=931 _36=1130915665 _37
    32 STU	//  alice_nextstate bob_nextstate _35=931 _39
    128 STU	//  alice_nextstate bob_nextstate _41
    s1 s2 XCHG	//  bob_nextstate alice_nextstate _41
    STREF	//  bob_nextstate _42
    STREF	//  _43
    ENDC	//  _44
    CTOS	//  payload
    TRUE	//  payload _47
    143567410 PUSHINT	//  payload _47 _48=143567410
    NEWC	//  payload _47 _48=143567410 _49
    32 STU	//  payload _47 _51
    1 STI	//  payload _53
    OVER	//  payload _53 payload
    HASHSU	//  payload _53 _54
    777 PUSHINT	//  payload _53 _54 _55=777
    SIGN	//  payload _53 _56
    STSLICER	//  payload _57
    SWAP	//  _57 payload
    STSLICER	//  _58
    ENDC	//  _59
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _61
    8000000000 PUSHINT	//  body _61 _63=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _61 _63=8000000000 _64 _65 body
    4 TUPLE	//  _61 _62
    invoke_method_expect_fail CALLDICT	//  _66
    DROP	// 
    TRUE	//  _67
  }>
  __test_challenge_quarantined_state_too_late PROC:<{
    // 
    FALSE	//  _0
    create_quatantine_helper CALLDICT
    777 PUSHINT	//  _3=777
    10 PUSHINT	//  _3=777 _4=10
    11 PUSHINT	//  _3=777 _4=10 _5=11
    PUSHNULL	//  _3=777 _4=10 _5=11 _6
    PUSHNULL	//  _3=777 _4=10 _5=11 _6 _7
    build_signed_semichannel CALLDICT	//  alice_state
    3456 PUSHINT	//  alice_state _10=3456
    16 PUSHINT	//  alice_state _10=3456 _11=16
    113 PUSHINT	//  alice_state _10=3456 _11=16 _12=113
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=113 _13
    PUSHNULL	//  alice_state _10=3456 _11=16 _12=113 _13 _14
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    88178 PUSHINT	//  alice_state bob_state _20
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _23=931
    1130915665 PUSHINT	//  alice_state bob_state _23=931 _24=1130915665
    NEWC	//  alice_state bob_state _23=931 _24=1130915665 _25
    32 STU	//  alice_state bob_state _23=931 _27
    128 STU	//  alice_state bob_state _29
    s1 s2 XCHG	//  bob_state alice_state _29
    STREF	//  bob_state _30
    STREF	//  _31
    ENDC	//  _32
    CTOS	//  payload
    TRUE	//  payload _35
    143567410 PUSHINT	//  payload _35 _36=143567410
    NEWC	//  payload _35 _36=143567410 _37
    32 STU	//  payload _35 _39
    1 STI	//  payload _41
    OVER	//  payload _41 payload
    HASHSU	//  payload _41 _42
    777 PUSHINT	//  payload _41 _42 _43=777
    SIGN	//  payload _41 _44
    STSLICER	//  payload _45
    SWAP	//  _45 payload
    STSLICER	//  _46
    ENDC	//  _47
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _49
    8000000000 PUSHINT	//  body _49 _51=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _49 _51=8000000000 _52 _53 body
    4 TUPLE	//  _49 _50
    invoke_method_expect_fail CALLDICT	//  _54
    DROP	// 
    TRUE	//  _55
  }>
  default_hashlock PROC:<{
    //  image deadline
    113 PUSHINT	//  image deadline _2=113
    62143 PUSHINT	//  image deadline _2=113 _3=62143
    186 PUSHINT	//  image deadline _2=113 _3=62143 _4=186
    0 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0
    30 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30
    130 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130
    63745 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745
    s5 PUSH	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143
    185 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185
    2 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _11=2
    s4 PUSH	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _11=2 _12=130
    63523 PUSHINT	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _11=2 _12=130 _13=63523
    NEWC	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _11=2 _12=130 _13=63523 _14
    16 STU	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _11=2 _12=130 _16
    8 STU	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _11=2 _18
    5 STU	//  image deadline _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _10=185 _20
    s1 s10 XCHG	//  image _10=185 _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 deadline _20
    35 STI	//  image _10=185 _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _9=62143 _22
    s1 s9 XCHG	//  image _9=62143 _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _10=185 _22
    8 STU	//  image _9=62143 _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _8=63745 _24
    s1 s8 XCHG	//  image _8=63745 _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _9=62143 _24
    16 STU	//  image _8=63745 _2=113 _3=62143 _4=186 _5=0 _6=30 _7=130 _26
    s1 s7 XCHG	//  image _7=130 _2=113 _3=62143 _4=186 _5=0 _6=30 _8=63745 _26
    16 STU	//  image _7=130 _2=113 _3=62143 _4=186 _5=0 _6=30 _28
    s1 s6 XCHG	//  image _6=30 _2=113 _3=62143 _4=186 _5=0 _7=130 _28
    8 STU	//  image _6=30 _2=113 _3=62143 _4=186 _5=0 _30
    s1 s5 XCHG	//  image _5=0 _2=113 _3=62143 _4=186 _6=30 _30
    5 STU	//  image _5=0 _2=113 _3=62143 _4=186 _32
    s1 s4 XCHG	//  image _4=186 _2=113 _3=62143 _5=0 _32
    2 STU	//  image _4=186 _2=113 _3=62143 _34
    s1 s4 XCHG
    257 PUSHINT	//  _3=62143 _4=186 _2=113 image _34 _35=257
    STIX	//  _3=62143 _4=186 _2=113 _36
    s1 s2 XCHG	//  _3=62143 _2=113 _4=186 _36
    8 STU	//  _3=62143 _2=113 _38
    s1 s2 XCHG	//  _2=113 _3=62143 _38
    16 STU	//  _2=113 _40
    8 STU	//  _42
    ENDC	//  _43
  }>
  __test_default_hashlock PROC:<{
    // 
    0 PUSHINT	//  _0=0
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWC	//  _3
    ENDC	//  _4
    CTOS	//  preimage
    DUP	//  preimage preimage
    HASHSU	//  preimage _7
    1000 PUSHINT	//  preimage _7 _8=1000
    default_hashlock CALLDICT	//  preimage condition
    CTOS	//  preimage _11
    BLESS	//  preimage executable_condition
    1 1 CALLXARGS	//  _15
    123 THROWIFNOT
    TRUE	//  _17
  }>
  ~add_conditional PROC:<{
    //  conditionals index amount preimage
    NEWC
    ROT	//  conditionals index preimage _5 amount
    STVARUINT16	//  conditionals index preimage _6
    SWAP	//  conditionals index _6 preimage
    HASHSU	//  conditionals index _6 _7
    300000 PUSHINT	//  conditionals index _6 _7 _8=300000
    default_hashlock CALLDICT	//  conditionals index _6 _9
    CTOS	//  conditionals index _6 _10
    STSLICER	//  conditionals index _11
    ENDC	//  conditionals index _12
    CTOS	//  conditionals index _13
    s0 s2 XCHG
    32 PUSHINT	//  _13 index conditionals _14=32
    DICTUSET	//  conditionals
  }>
  create_quatantine_with_conditional_helper PROC:<{
    // 
    init_channel_helper CALLDICT
    NEWDICT	//  alice_conditionals
    0 PUSHINT	//  alice_conditionals _4=0
    10000 PUSHINT	//  alice_conditionals _4=0 _5=10000
    1 PUSHINT	//  alice_conditionals _4=0 _5=10000 _6=1
    NEWC	//  alice_conditionals _4=0 _5=10000 _6=1 _7
    8 STU	//  alice_conditionals _4=0 _5=10000 _9
    ENDC	//  alice_conditionals _4=0 _5=10000 _10
    CTOS	//  alice_conditionals _4=0 _5=10000 _11
    ~add_conditional CALLDICT	//  alice_conditionals
    1 PUSHINT	//  alice_conditionals _14=1
    20000 PUSHINT	//  alice_conditionals _14=1 _15=20000
    2 PUSHINT	//  alice_conditionals _14=1 _15=20000 _16=2
    NEWC	//  alice_conditionals _14=1 _15=20000 _16=2 _17
    8 STU	//  alice_conditionals _14=1 _15=20000 _19
    ENDC	//  alice_conditionals _14=1 _15=20000 _20
    CTOS	//  alice_conditionals _14=1 _15=20000 _21
    ~add_conditional CALLDICT	//  alice_conditionals
    NEWDICT	//  alice_conditionals bob_conditionals
    0 PUSHINT	//  alice_conditionals bob_conditionals _26=0
    777 PUSHINT	//  alice_conditionals bob_conditionals _26=0 _27=777
    7 PUSHINT	//  alice_conditionals bob_conditionals _26=0 _27=777 _28=7
    NEWC	//  alice_conditionals bob_conditionals _26=0 _27=777 _28=7 _29
    8 STU	//  alice_conditionals bob_conditionals _26=0 _27=777 _31
    ENDC	//  alice_conditionals bob_conditionals _26=0 _27=777 _32
    CTOS	//  alice_conditionals bob_conditionals _26=0 _27=777 _33
    ~add_conditional CALLDICT	//  alice_conditionals bob_conditionals
    777 PUSHINT	//  alice_conditionals bob_conditionals _36=777
    9 PUSHINT	//  alice_conditionals bob_conditionals _36=777 _37=9
    10 PUSHINT
    ROT
    s0 s3 XCHG
    s0 s4 XCHG
    PUSHNULL	//  bob_conditionals _36=777 _37=9 _38=10 alice_conditionals _39
    build_signed_semichannel CALLDICT	//  bob_conditionals alice_state
    3456 PUSHINT	//  bob_conditionals alice_state _42=3456
    15 PUSHINT	//  bob_conditionals alice_state _42=3456 _43=15
    10 PUSHINT
    ROT
    s0 s3 XCHG
    s0 s4 XCHG
    PUSHNULL	//  alice_state _42=3456 _43=15 _44=10 bob_conditionals _45
    build_signed_semichannel CALLDICT	//  alice_state bob_state
    1 PUSHINT	//  alice_state bob_state _47=1
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    931 PUSHINT	//  alice_state bob_state _50=931
    1433289580 PUSHINT	//  alice_state bob_state _50=931 _51=1433289580
    NEWC	//  alice_state bob_state _50=931 _51=1433289580 _52
    32 STU	//  alice_state bob_state _50=931 _54
    128 STU	//  alice_state bob_state _56
    s1 s2 XCHG	//  bob_state alice_state _56
    STREF	//  bob_state _57
    STREF	//  _58
    ENDC	//  _59
    CTOS	//  payload
    TRUE	//  payload _62
    521476815 PUSHINT	//  payload _62 _63=521476815
    NEWC	//  payload _62 _63=521476815 _64
    32 STU	//  payload _62 _66
    1 STI	//  payload _68
    OVER	//  payload _68 payload
    HASHSU	//  payload _68 _69
    777 PUSHINT	//  payload _68 _69 _70=777
    SIGN	//  payload _68 _71
    STSLICER	//  payload _72
    SWAP	//  _72 payload
    STSLICER	//  _73
    ENDC	//  _74
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _76
    8000000000 PUSHINT	//  body _76 _78=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _76 _78=8000000000 _79 _80 body
    4 TUPLE	//  _76 _77
    invoke_method CALLDICT	//  _82 _83
    2DROP	// 
  }>
  __test_settle_conditionals_null PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _10=931
    1131168622 PUSHINT	//  conditionals_to_settle _10=931 _11=1131168622
    NEWC	//  conditionals_to_settle _10=931 _11=1131168622 _12
    32 STU	//  conditionals_to_settle _10=931 _14
    128 STU	//  conditionals_to_settle _16
    STDICT	//  _17
    ENDC	//  _18
    CTOS	//  payload
    TRUE	//  payload _21
    1727459433 PUSHINT	//  payload _21 _22=1727459433
    NEWC	//  payload _21 _22=1727459433 _23
    32 STU	//  payload _21 _25
    1 STI	//  payload _27
    OVER	//  payload _27 payload
    HASHSU	//  payload _27 _28
    777 PUSHINT	//  payload _27 _28 _29=777
    SIGN	//  payload _27 _30
    STSLICER	//  payload _31
    SWAP	//  _31 payload
    STSLICER	//  _32
    ENDC	//  _33
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _35
    8000000000 PUSHINT	//  body _35 _37=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _35 _37=8000000000 _38 _39 body
    4 TUPLE	//  _35 _36
    invoke_method CALLDICT	//  _42 _43
    2DROP	// 
    TRUE	//  _41
  }>
  __test_settle_conditionals_alice PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _9
    0 TUPLE	//  _9 _10
    invoke_method CALLDICT	//  _391 _392
    NIP	//  stack
    NEWDICT	//  stack alice_conditionals
    0 PUSHINT	//  stack alice_conditionals _15=0
    10000 PUSHINT	//  stack alice_conditionals _15=0 _16=10000
    1 PUSHINT	//  stack alice_conditionals _15=0 _16=10000 _17=1
    NEWC	//  stack alice_conditionals _15=0 _16=10000 _17=1 _18
    8 STU	//  stack alice_conditionals _15=0 _16=10000 _20
    ENDC	//  stack alice_conditionals _15=0 _16=10000 _21
    CTOS	//  stack alice_conditionals _15=0 _16=10000 _22
    ~add_conditional CALLDICT	//  stack alice_conditionals
    1 PUSHINT	//  stack alice_conditionals _25=1
    20000 PUSHINT	//  stack alice_conditionals _25=1 _26=20000
    2 PUSHINT	//  stack alice_conditionals _25=1 _26=20000 _27=2
    NEWC	//  stack alice_conditionals _25=1 _26=20000 _27=2 _28
    8 STU	//  stack alice_conditionals _25=1 _26=20000 _30
    ENDC	//  stack alice_conditionals _25=1 _26=20000 _31
    CTOS	//  stack alice_conditionals _25=1 _26=20000 _32
    ~add_conditional CALLDICT	//  stack alice_conditionals
    NEWDICT	//  stack alice_conditionals bob_conditionals
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _37=0
    777 PUSHINT	//  stack alice_conditionals bob_conditionals _37=0 _38=777
    7 PUSHINT	//  stack alice_conditionals bob_conditionals _37=0 _38=777 _39=7
    NEWC	//  stack alice_conditionals bob_conditionals _37=0 _38=777 _39=7 _40
    8 STU	//  stack alice_conditionals bob_conditionals _37=0 _38=777 _42
    ENDC	//  stack alice_conditionals bob_conditionals _37=0 _38=777 _43
    CTOS	//  stack alice_conditionals bob_conditionals _37=0 _38=777 _44
    ~add_conditional CALLDICT	//  stack alice_conditionals bob_conditionals
    9001 PUSHINT	//  stack alice_conditionals bob_conditionals _46=9001
    s3 PUSH	//  stack alice_conditionals bob_conditionals _46=9001 stack
    FIRST	//  stack alice_conditionals bob_conditionals _46=9001 _47
    3 EQINT	//  stack alice_conditionals bob_conditionals _46=9001 _49
    THROWANYIFNOT
    s2 PUSH
    1 PUSHINT	//  stack alice_conditionals bob_conditionals stack _53=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _54
    UNPAIR	//  stack alice_conditionals bob_conditionals r_bA r_bB
    9002 PUSHINT	//  stack alice_conditionals bob_conditionals r_bA r_bB _56=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack alice_conditionals bob_conditionals _56=9002 r_bB r_bA _61
    EQUAL	//  stack alice_conditionals bob_conditionals _56=9002 r_bB _62
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_bB _56=9002 _62
    THROWANYIFNOT
    9003 PUSHINT	//  stack alice_conditionals bob_conditionals r_bB _64=9003
    SWAP	//  stack alice_conditionals bob_conditionals _64=9003 r_bB
    0 EQINT	//  stack alice_conditionals bob_conditionals _64=9003 _66
    THROWANYIFNOT
    s2 PUSH
    2 PUSHINT	//  stack alice_conditionals bob_conditionals stack _70=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _71
    UNPAIR	//  stack alice_conditionals bob_conditionals r_pkA r_pkB
    9004 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _73=9004
    777 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _73=9004 _74=777
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _73=9004 _75
    s1 s3 XCHG	//  stack alice_conditionals bob_conditionals _73=9004 r_pkB r_pkA _75
    EQUAL	//  stack alice_conditionals bob_conditionals _73=9004 r_pkB _76
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_pkB _73=9004 _76
    THROWANYIFNOT
    9005 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _78=9005
    3456 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _78=9005 _79=3456
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkB _78=9005 _80
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals _78=9005 r_pkB _80
    EQUAL	//  stack alice_conditionals bob_conditionals _78=9005 _81
    THROWANYIFNOT
    9006 PUSHINT	//  stack alice_conditionals bob_conditionals _83=9006
    s3 PUSH
    3 PUSHINT	//  stack alice_conditionals bob_conditionals _83=9006 stack _84=3
    INDEXVAR	//  stack alice_conditionals bob_conditionals _83=9006 _85
    931 PUSHINT	//  stack alice_conditionals bob_conditionals _83=9006 _85 _86=931
    EQUAL	//  stack alice_conditionals bob_conditionals _83=9006 _87
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _89=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _89=9007 stack _90=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _89=9007 _91
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _89=9007 _91 _92=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _89=9007 _93
    86400 PUSHINT	//  stack alice_conditionals bob_conditionals _89=9007 _93 _94=86400
    EQUAL	//  stack alice_conditionals bob_conditionals _89=9007 _95
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _97=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _97=9007 stack _98=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _97=9007 _99
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _97=9007 _99 _100=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _97=9007 _101
    30000000 PUSHINT	//  stack alice_conditionals bob_conditionals _97=9007 _101 _102=30000000
    EQUAL	//  stack alice_conditionals bob_conditionals _97=9007 _103
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _105=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _105=9007 stack _106=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _105=9007 _107
    2 PUSHINT	//  stack alice_conditionals bob_conditionals _105=9007 _107 _108=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _105=9007 _109
    3600 PUSHINT	//  stack alice_conditionals bob_conditionals _105=9007 _109 _110=3600
    EQUAL	//  stack alice_conditionals bob_conditionals _105=9007 _111
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _113=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _113=9008 stack _114=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _113=9008 _115
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _113=9008 _115 _116=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _113=9008 _117
    7 EQINT	//  stack alice_conditionals bob_conditionals _113=9008 _119
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _121=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _121=9008 stack _122=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _121=9008 _123
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _121=9008 _123 _124=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _121=9008 _125
    11 EQINT	//  stack alice_conditionals bob_conditionals _121=9008 _127
    THROWANYIFNOT
    FALSE	//  stack alice_conditionals bob_conditionals _130
    TRUE	//  stack alice_conditionals bob_conditionals _130 _131
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _130 _131 _132=1
    15 PUSHINT	//  stack alice_conditionals bob_conditionals _130 _131 _132=1 _133=15
    9 PUSHINT	//  stack alice_conditionals bob_conditionals _130 _131 _132=1 _133=15 _134=9
    NEWC	//  stack alice_conditionals bob_conditionals _130 _131 _132=1 _133=15 _134=9 _135
    64 STU	//  stack alice_conditionals bob_conditionals _130 _131 _132=1 _133=15 _137
    10 PUSHINT	//  stack alice_conditionals bob_conditionals _130 _131 _132=1 _133=15 _137 _138=10
    STVARUINT16	//  stack alice_conditionals bob_conditionals _130 _131 _132=1 _133=15 _139
    s1 s6 XCHG	//  stack _133=15 bob_conditionals _130 _131 _132=1 alice_conditionals _139
    STDICT	//  stack _133=15 bob_conditionals _130 _131 _132=1 _140
    s1 s5 XCHG	//  stack _132=1 bob_conditionals _130 _131 _133=15 _140
    64 STU	//  stack _132=1 bob_conditionals _130 _131 _142
    10 PUSHINT	//  stack _132=1 bob_conditionals _130 _131 _142 _143=10
    STVARUINT16	//  stack _132=1 bob_conditionals _130 _131 _144
    s1 s3 XCHG	//  stack _132=1 _131 _130 bob_conditionals _144
    STDICT	//  stack _132=1 _131 _130 _145
    s1 s3 XCHG	//  stack _130 _131 _132=1 _145
    32 STU	//  stack _130 _131 _147
    1 STI	//  stack _130 _149
    1 STI	//  stack _151
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _153=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _153=9009 stack _154=6
    INDEXVAR	//  stack quarantined_state _153=9009 _155
    ROT	//  stack _153=9009 _155 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _153=9009 _156
    THROWANYIFNOT
    9010 PUSHINT	//  stack _158=9010
    OVER
    7 PUSHINT	//  stack _158=9010 stack _159=7
    INDEXVAR	//  stack _158=9010 _160
    0 PUSHINT	//  stack _158=9010 _160 _161=0
    INDEXVAR	//  stack _158=9010 _162
    30000000 PUSHINT	//  stack _158=9010 _162 _163=30000000
    EQUAL	//  stack _158=9010 _164
    THROWANYIFNOT
    9010 PUSHINT	//  stack _166=9010
    OVER
    7 PUSHINT	//  stack _166=9010 stack _167=7
    INDEXVAR	//  stack _166=9010 _168
    1 PUSHINT	//  stack _166=9010 _168 _169=1
    INDEXVAR	//  stack _166=9010 _170
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _166=9010 _170 _171
    HASHSU SWAP HASHSU EQUAL	//  stack _166=9010 _172
    THROWANYIFNOT
    9010 PUSHINT	//  stack _174=9010
    SWAP
    7 PUSHINT	//  _174=9010 stack _175=7
    INDEXVAR	//  _174=9010 _176
    2 PUSHINT	//  _174=9010 _176 _177=2
    INDEXVAR	//  _174=9010 _178
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _174=9010 _178 _179
    HASHSU SWAP HASHSU EQUAL	//  _174=9010 _180
    THROWANYIFNOT
    NEWDICT	//  conditionals_to_settle
    7 PUSHINT	//  conditionals_to_settle _185=7
    NEWC	//  conditionals_to_settle _185=7 _186
    8 STU	//  conditionals_to_settle _188
    ENDC	//  conditionals_to_settle _189
    CTOS	//  conditionals_to_settle _190
    0 PUSHINT
    ROT
    32 PUSHINT	//  _190 _191=0 conditionals_to_settle _192=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _195=931
    1131168622 PUSHINT	//  conditionals_to_settle _195=931 _196=1131168622
    NEWC	//  conditionals_to_settle _195=931 _196=1131168622 _197
    32 STU	//  conditionals_to_settle _195=931 _199
    128 STU	//  conditionals_to_settle _201
    STDICT	//  _202
    ENDC	//  _203
    CTOS	//  payload
    TRUE	//  payload _206
    1727459433 PUSHINT	//  payload _206 _207=1727459433
    NEWC	//  payload _206 _207=1727459433 _208
    32 STU	//  payload _206 _210
    1 STI	//  payload _212
    OVER	//  payload _212 payload
    HASHSU	//  payload _212 _213
    777 PUSHINT	//  payload _212 _213 _214=777
    SIGN	//  payload _212 _215
    STSLICER	//  payload _216
    SWAP	//  _216 payload
    STSLICER	//  _217
    ENDC	//  _218
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _220
    8000000000 PUSHINT	//  body _220 _222=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _220 _222=8000000000 _223 _224 body
    4 TUPLE	//  _220 _221
    invoke_method CALLDICT	//  _397 _398
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _228
    0 TUPLE	//  _228 _229
    invoke_method CALLDICT	//  _399 _400
    NIP	//  stack
    NEWDICT	//  stack alice_conditionals
    0 PUSHINT	//  stack alice_conditionals _234=0
    10000 PUSHINT	//  stack alice_conditionals _234=0 _235=10000
    1 PUSHINT	//  stack alice_conditionals _234=0 _235=10000 _236=1
    NEWC	//  stack alice_conditionals _234=0 _235=10000 _236=1 _237
    8 STU	//  stack alice_conditionals _234=0 _235=10000 _239
    ENDC	//  stack alice_conditionals _234=0 _235=10000 _240
    CTOS	//  stack alice_conditionals _234=0 _235=10000 _241
    ~add_conditional CALLDICT	//  stack alice_conditionals
    1 PUSHINT	//  stack alice_conditionals _244=1
    20000 PUSHINT	//  stack alice_conditionals _244=1 _245=20000
    2 PUSHINT	//  stack alice_conditionals _244=1 _245=20000 _246=2
    NEWC	//  stack alice_conditionals _244=1 _245=20000 _246=2 _247
    8 STU	//  stack alice_conditionals _244=1 _245=20000 _249
    ENDC	//  stack alice_conditionals _244=1 _245=20000 _250
    CTOS	//  stack alice_conditionals _244=1 _245=20000 _251
    ~add_conditional CALLDICT	//  stack alice_conditionals
    NEWDICT	//  stack alice_conditionals bob_conditionals
    9001 PUSHINT	//  stack alice_conditionals bob_conditionals _255=9001
    s3 PUSH	//  stack alice_conditionals bob_conditionals _255=9001 stack
    FIRST	//  stack alice_conditionals bob_conditionals _255=9001 _256
    3 EQINT	//  stack alice_conditionals bob_conditionals _255=9001 _258
    THROWANYIFNOT
    s2 PUSH
    1 PUSHINT	//  stack alice_conditionals bob_conditionals stack _262=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _263
    UNPAIR	//  stack alice_conditionals bob_conditionals r_bA r_bB
    9002 PUSHINT	//  stack alice_conditionals bob_conditionals r_bA r_bB _265=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack alice_conditionals bob_conditionals _265=9002 r_bB r_bA _270
    EQUAL	//  stack alice_conditionals bob_conditionals _265=9002 r_bB _271
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_bB _265=9002 _271
    THROWANYIFNOT
    9003 PUSHINT	//  stack alice_conditionals bob_conditionals r_bB _273=9003
    SWAP	//  stack alice_conditionals bob_conditionals _273=9003 r_bB
    0 EQINT	//  stack alice_conditionals bob_conditionals _273=9003 _275
    THROWANYIFNOT
    s2 PUSH
    2 PUSHINT	//  stack alice_conditionals bob_conditionals stack _279=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _280
    UNPAIR	//  stack alice_conditionals bob_conditionals r_pkA r_pkB
    9004 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _282=9004
    777 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _282=9004 _283=777
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _282=9004 _284
    s1 s3 XCHG	//  stack alice_conditionals bob_conditionals _282=9004 r_pkB r_pkA _284
    EQUAL	//  stack alice_conditionals bob_conditionals _282=9004 r_pkB _285
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_pkB _282=9004 _285
    THROWANYIFNOT
    9005 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _287=9005
    3456 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _287=9005 _288=3456
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkB _287=9005 _289
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals _287=9005 r_pkB _289
    EQUAL	//  stack alice_conditionals bob_conditionals _287=9005 _290
    THROWANYIFNOT
    9006 PUSHINT	//  stack alice_conditionals bob_conditionals _292=9006
    s3 PUSH
    3 PUSHINT	//  stack alice_conditionals bob_conditionals _292=9006 stack _293=3
    INDEXVAR	//  stack alice_conditionals bob_conditionals _292=9006 _294
    931 PUSHINT	//  stack alice_conditionals bob_conditionals _292=9006 _294 _295=931
    EQUAL	//  stack alice_conditionals bob_conditionals _292=9006 _296
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _298=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _298=9007 stack _299=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _298=9007 _300
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _298=9007 _300 _301=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _298=9007 _302
    86400 PUSHINT	//  stack alice_conditionals bob_conditionals _298=9007 _302 _303=86400
    EQUAL	//  stack alice_conditionals bob_conditionals _298=9007 _304
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _306=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _306=9007 stack _307=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _306=9007 _308
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _306=9007 _308 _309=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _306=9007 _310
    30000000 PUSHINT	//  stack alice_conditionals bob_conditionals _306=9007 _310 _311=30000000
    EQUAL	//  stack alice_conditionals bob_conditionals _306=9007 _312
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _314=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _314=9007 stack _315=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _314=9007 _316
    2 PUSHINT	//  stack alice_conditionals bob_conditionals _314=9007 _316 _317=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _314=9007 _318
    3600 PUSHINT	//  stack alice_conditionals bob_conditionals _314=9007 _318 _319=3600
    EQUAL	//  stack alice_conditionals bob_conditionals _314=9007 _320
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _322=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _322=9008 stack _323=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _322=9008 _324
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _322=9008 _324 _325=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _322=9008 _326
    7 EQINT	//  stack alice_conditionals bob_conditionals _322=9008 _328
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _330=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _330=9008 stack _331=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _330=9008 _332
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _330=9008 _332 _333=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _330=9008 _334
    11 EQINT	//  stack alice_conditionals bob_conditionals _330=9008 _336
    THROWANYIFNOT
    TRUE	//  stack alice_conditionals bob_conditionals _339
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _339 _340=1
    15 PUSHINT	//  stack alice_conditionals bob_conditionals _339 _340=1 _341=15
    9 PUSHINT	//  stack alice_conditionals bob_conditionals _339 _340=1 _341=15 _342=9
    NEWC	//  stack alice_conditionals bob_conditionals _339 _340=1 _341=15 _342=9 _343
    64 STU	//  stack alice_conditionals bob_conditionals _339 _340=1 _341=15 _345
    10 PUSHINT	//  stack alice_conditionals bob_conditionals _339 _340=1 _341=15 _345 _346=10
    STVARUINT16	//  stack alice_conditionals bob_conditionals _339 _340=1 _341=15 _347
    s1 s5 XCHG	//  stack _341=15 bob_conditionals _339 _340=1 alice_conditionals _347
    STDICT	//  stack _341=15 bob_conditionals _339 _340=1 _348
    s1 s4 XCHG	//  stack _340=1 bob_conditionals _339 _341=15 _348
    64 STU	//  stack _340=1 bob_conditionals _339 _350
    787 PUSHINT	//  stack _340=1 bob_conditionals _339 _350 _353
    STVARUINT16	//  stack _340=1 bob_conditionals _339 _354
    s1 s2 XCHG	//  stack _340=1 _339 bob_conditionals _354
    STDICT	//  stack _340=1 _339 _355
    s1 s2 XCHG	//  stack _339 _340=1 _355
    32 STU	//  stack _339 _357
    1 STI	//  stack _359
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _361=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _361=9009 stack _362=6
    INDEXVAR	//  stack quarantined_state _361=9009 _363
    ROT	//  stack _361=9009 _363 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _361=9009 _364
    THROWANYIFNOT
    9010 PUSHINT	//  stack _366=9010
    OVER
    7 PUSHINT	//  stack _366=9010 stack _367=7
    INDEXVAR	//  stack _366=9010 _368
    0 PUSHINT	//  stack _366=9010 _368 _369=0
    INDEXVAR	//  stack _366=9010 _370
    30000000 PUSHINT	//  stack _366=9010 _370 _371=30000000
    EQUAL	//  stack _366=9010 _372
    THROWANYIFNOT
    9010 PUSHINT	//  stack _374=9010
    OVER
    7 PUSHINT	//  stack _374=9010 stack _375=7
    INDEXVAR	//  stack _374=9010 _376
    1 PUSHINT	//  stack _374=9010 _376 _377=1
    INDEXVAR	//  stack _374=9010 _378
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _374=9010 _378 _379
    HASHSU SWAP HASHSU EQUAL	//  stack _374=9010 _380
    THROWANYIFNOT
    9010 PUSHINT	//  stack _382=9010
    SWAP
    7 PUSHINT	//  _382=9010 stack _383=7
    INDEXVAR	//  _382=9010 _384
    2 PUSHINT	//  _382=9010 _384 _385=2
    INDEXVAR	//  _382=9010 _386
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _382=9010 _386 _387
    HASHSU SWAP HASHSU EQUAL	//  _382=9010 _388
    THROWANYIFNOT
    TRUE	//  _390
  }>
  __test_settle_conditionals_bob PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    1 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=1 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _20=1
    NEWC	//  conditionals_to_settle _20=1 _21
    8 STU	//  conditionals_to_settle _23
    ENDC	//  conditionals_to_settle _24
    CTOS	//  conditionals_to_settle _25
    0 PUSHINT
    ROT
    32 PUSHINT	//  _25 _26=0 conditionals_to_settle _27=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _30=931
    1131168622 PUSHINT	//  conditionals_to_settle _30=931 _31=1131168622
    NEWC	//  conditionals_to_settle _30=931 _31=1131168622 _32
    32 STU	//  conditionals_to_settle _30=931 _34
    128 STU	//  conditionals_to_settle _36
    STDICT	//  _37
    ENDC	//  _38
    CTOS	//  payload
    FALSE	//  payload _41
    1727459433 PUSHINT	//  payload _41 _42=1727459433
    NEWC	//  payload _41 _42=1727459433 _43
    32 STU	//  payload _41 _45
    1 STI	//  payload _47
    OVER	//  payload _47 payload
    HASHSU	//  payload _47 _48
    3456 PUSHINT	//  payload _47 _48 _49=3456
    SIGN	//  payload _47 _50
    STSLICER	//  payload _51
    SWAP	//  _51 payload
    STSLICER	//  _52
    ENDC	//  _53
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _55
    8000000000 PUSHINT	//  body _55 _57=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _55 _57=8000000000 _58 _59 body
    4 TUPLE	//  _55 _56
    invoke_method CALLDICT	//  _218 _219
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _63
    0 TUPLE	//  _63 _64
    invoke_method CALLDICT	//  _220 _221
    NIP	//  stack
    NEWDICT	//  stack alice_conditionals
    NEWDICT	//  stack alice_conditionals bob_conditionals
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _71=0
    777 PUSHINT	//  stack alice_conditionals bob_conditionals _71=0 _72=777
    7 PUSHINT	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _73=7
    NEWC	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _73=7 _74
    8 STU	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _76
    ENDC	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _77
    CTOS	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _78
    ~add_conditional CALLDICT	//  stack alice_conditionals bob_conditionals
    9001 PUSHINT	//  stack alice_conditionals bob_conditionals _80=9001
    s3 PUSH	//  stack alice_conditionals bob_conditionals _80=9001 stack
    FIRST	//  stack alice_conditionals bob_conditionals _80=9001 _81
    3 EQINT	//  stack alice_conditionals bob_conditionals _80=9001 _83
    THROWANYIFNOT
    s2 PUSH
    1 PUSHINT	//  stack alice_conditionals bob_conditionals stack _87=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _88
    UNPAIR	//  stack alice_conditionals bob_conditionals r_bA r_bB
    9002 PUSHINT	//  stack alice_conditionals bob_conditionals r_bA r_bB _90=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack alice_conditionals bob_conditionals _90=9002 r_bB r_bA _95
    EQUAL	//  stack alice_conditionals bob_conditionals _90=9002 r_bB _96
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_bB _90=9002 _96
    THROWANYIFNOT
    9003 PUSHINT	//  stack alice_conditionals bob_conditionals r_bB _98=9003
    SWAP	//  stack alice_conditionals bob_conditionals _98=9003 r_bB
    0 EQINT	//  stack alice_conditionals bob_conditionals _98=9003 _100
    THROWANYIFNOT
    s2 PUSH
    2 PUSHINT	//  stack alice_conditionals bob_conditionals stack _104=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _105
    UNPAIR	//  stack alice_conditionals bob_conditionals r_pkA r_pkB
    9004 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _107=9004
    777 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _107=9004 _108=777
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _107=9004 _109
    s1 s3 XCHG	//  stack alice_conditionals bob_conditionals _107=9004 r_pkB r_pkA _109
    EQUAL	//  stack alice_conditionals bob_conditionals _107=9004 r_pkB _110
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_pkB _107=9004 _110
    THROWANYIFNOT
    9005 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _112=9005
    3456 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _112=9005 _113=3456
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkB _112=9005 _114
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals _112=9005 r_pkB _114
    EQUAL	//  stack alice_conditionals bob_conditionals _112=9005 _115
    THROWANYIFNOT
    9006 PUSHINT	//  stack alice_conditionals bob_conditionals _117=9006
    s3 PUSH
    3 PUSHINT	//  stack alice_conditionals bob_conditionals _117=9006 stack _118=3
    INDEXVAR	//  stack alice_conditionals bob_conditionals _117=9006 _119
    931 PUSHINT	//  stack alice_conditionals bob_conditionals _117=9006 _119 _120=931
    EQUAL	//  stack alice_conditionals bob_conditionals _117=9006 _121
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007 stack _124=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _123=9007 _125
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007 _125 _126=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _123=9007 _127
    86400 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007 _127 _128=86400
    EQUAL	//  stack alice_conditionals bob_conditionals _123=9007 _129
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007 stack _132=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _131=9007 _133
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007 _133 _134=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _131=9007 _135
    30000000 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007 _135 _136=30000000
    EQUAL	//  stack alice_conditionals bob_conditionals _131=9007 _137
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007 stack _140=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _139=9007 _141
    2 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007 _141 _142=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _139=9007 _143
    3600 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007 _143 _144=3600
    EQUAL	//  stack alice_conditionals bob_conditionals _139=9007 _145
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _147=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _147=9008 stack _148=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _147=9008 _149
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _147=9008 _149 _150=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _147=9008 _151
    7 EQINT	//  stack alice_conditionals bob_conditionals _147=9008 _153
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _155=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _155=9008 stack _156=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _155=9008 _157
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _155=9008 _157 _158=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _155=9008 _159
    11 EQINT	//  stack alice_conditionals bob_conditionals _155=9008 _161
    THROWANYIFNOT
    TRUE	//  stack alice_conditionals bob_conditionals _164
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1
    15 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15
    9 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _167=9
    NEWC	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _167=9 _168
    64 STU	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _170
    30010 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _170 _175
    STVARUINT16	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _176
    s1 s5 XCHG	//  stack _166=15 bob_conditionals _164 _165=1 alice_conditionals _176
    STDICT	//  stack _166=15 bob_conditionals _164 _165=1 _177
    s1 s4 XCHG	//  stack _165=1 bob_conditionals _164 _166=15 _177
    64 STU	//  stack _165=1 bob_conditionals _164 _179
    10 PUSHINT	//  stack _165=1 bob_conditionals _164 _179 _180=10
    STVARUINT16	//  stack _165=1 bob_conditionals _164 _181
    s1 s2 XCHG	//  stack _165=1 _164 bob_conditionals _181
    STDICT	//  stack _165=1 _164 _182
    s1 s2 XCHG	//  stack _164 _165=1 _182
    32 STU	//  stack _164 _184
    1 STI	//  stack _186
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _188=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _188=9009 stack _189=6
    INDEXVAR	//  stack quarantined_state _188=9009 _190
    ROT	//  stack _188=9009 _190 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _188=9009 _191
    THROWANYIFNOT
    9010 PUSHINT	//  stack _193=9010
    OVER
    7 PUSHINT	//  stack _193=9010 stack _194=7
    INDEXVAR	//  stack _193=9010 _195
    0 PUSHINT	//  stack _193=9010 _195 _196=0
    INDEXVAR	//  stack _193=9010 _197
    30000000 PUSHINT	//  stack _193=9010 _197 _198=30000000
    EQUAL	//  stack _193=9010 _199
    THROWANYIFNOT
    9010 PUSHINT	//  stack _201=9010
    OVER
    7 PUSHINT	//  stack _201=9010 stack _202=7
    INDEXVAR	//  stack _201=9010 _203
    1 PUSHINT	//  stack _201=9010 _203 _204=1
    INDEXVAR	//  stack _201=9010 _205
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _201=9010 _205 _206
    HASHSU SWAP HASHSU EQUAL	//  stack _201=9010 _207
    THROWANYIFNOT
    9010 PUSHINT	//  stack _209=9010
    SWAP
    7 PUSHINT	//  _209=9010 stack _210=7
    INDEXVAR	//  _209=9010 _211
    2 PUSHINT	//  _209=9010 _211 _212=2
    INDEXVAR	//  _209=9010 _213
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _209=9010 _213 _214
    HASHSU SWAP HASHSU EQUAL	//  _209=9010 _215
    THROWANYIFNOT
    TRUE	//  _217
  }>
  __test_settle_conditionals_unauthorized PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    1 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=1 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _20=1
    NEWC	//  conditionals_to_settle _20=1 _21
    8 STU	//  conditionals_to_settle _23
    ENDC	//  conditionals_to_settle _24
    CTOS	//  conditionals_to_settle _25
    0 PUSHINT
    ROT
    32 PUSHINT	//  _25 _26=0 conditionals_to_settle _27=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _30=931
    1131168622 PUSHINT	//  conditionals_to_settle _30=931 _31=1131168622
    NEWC	//  conditionals_to_settle _30=931 _31=1131168622 _32
    32 STU	//  conditionals_to_settle _30=931 _34
    128 STU	//  conditionals_to_settle _36
    STDICT	//  _37
    ENDC	//  _38
    CTOS	//  payload
    FALSE	//  payload _41
    1727459433 PUSHINT	//  payload _41 _42=1727459433
    NEWC	//  payload _41 _42=1727459433 _43
    32 STU	//  payload _41 _45
    1 STI	//  payload _47
    OVER	//  payload _47 payload
    HASHSU	//  payload _47 _48
    12452 PUSHINT	//  payload _47 _48 _49=12452
    SIGN	//  payload _47 _50
    STSLICER	//  payload _51
    SWAP	//  _51 payload
    STSLICER	//  _52
    ENDC	//  _53
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _55
    8000000000 PUSHINT	//  body _55 _57=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _55 _57=8000000000 _58 _59 body
    4 TUPLE	//  _55 _56
    invoke_method_expect_fail CALLDICT	//  _60
    DROP	// 
    TRUE	//  _61
  }>
  __test_settle_conditionals_wrong_channel_id PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    1 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=1 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _20=1
    NEWC	//  conditionals_to_settle _20=1 _21
    8 STU	//  conditionals_to_settle _23
    ENDC	//  conditionals_to_settle _24
    CTOS	//  conditionals_to_settle _25
    0 PUSHINT
    ROT
    32 PUSHINT	//  _25 _26=0 conditionals_to_settle _27=32
    DICTUSET	//  conditionals_to_settle
    932 PUSHINT	//  conditionals_to_settle _32
    1131168622 PUSHINT	//  conditionals_to_settle _32 _33=1131168622
    NEWC	//  conditionals_to_settle _32 _33=1131168622 _34
    32 STU	//  conditionals_to_settle _32 _36
    128 STU	//  conditionals_to_settle _38
    STDICT	//  _39
    ENDC	//  _40
    CTOS	//  payload
    FALSE	//  payload _43
    1727459433 PUSHINT	//  payload _43 _44=1727459433
    NEWC	//  payload _43 _44=1727459433 _45
    32 STU	//  payload _43 _47
    1 STI	//  payload _49
    OVER	//  payload _49 payload
    HASHSU	//  payload _49 _50
    3456 PUSHINT	//  payload _49 _50 _51=3456
    SIGN	//  payload _49 _52
    STSLICER	//  payload _53
    SWAP	//  _53 payload
    STSLICER	//  _54
    ENDC	//  _55
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _57
    8000000000 PUSHINT	//  body _57 _59=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _57 _59=8000000000 _60 _61 body
    4 TUPLE	//  _57 _58
    invoke_method_expect_fail CALLDICT	//  _62
    DROP	// 
    TRUE	//  _63
  }>
  __test_settle_nonexisted_conditionals PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    7 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=7 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _20=1
    NEWC	//  conditionals_to_settle _20=1 _21
    8 STU	//  conditionals_to_settle _23
    ENDC	//  conditionals_to_settle _24
    CTOS	//  conditionals_to_settle _25
    8 PUSHINT
    ROT
    32 PUSHINT	//  _25 _26=8 conditionals_to_settle _27=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _30=931
    1131168622 PUSHINT	//  conditionals_to_settle _30=931 _31=1131168622
    NEWC	//  conditionals_to_settle _30=931 _31=1131168622 _32
    32 STU	//  conditionals_to_settle _30=931 _34
    128 STU	//  conditionals_to_settle _36
    STDICT	//  _37
    ENDC	//  _38
    CTOS	//  payload
    FALSE	//  payload _41
    1727459433 PUSHINT	//  payload _41 _42=1727459433
    NEWC	//  payload _41 _42=1727459433 _43
    32 STU	//  payload _41 _45
    1 STI	//  payload _47
    OVER	//  payload _47 payload
    HASHSU	//  payload _47 _48
    3456 PUSHINT	//  payload _47 _48 _49=3456
    SIGN	//  payload _47 _50
    STSLICER	//  payload _51
    SWAP	//  _51 payload
    STSLICER	//  _52
    ENDC	//  _53
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _55
    8000000000 PUSHINT	//  body _55 _57=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _55 _57=8000000000 _58 _59 body
    4 TUPLE	//  _55 _56
    invoke_method CALLDICT	//  _234 _235
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _63
    0 TUPLE	//  _63 _64
    invoke_method CALLDICT	//  _236 _237
    NIP	//  stack
    NEWDICT	//  stack alice_conditionals
    0 PUSHINT	//  stack alice_conditionals _69=0
    10000 PUSHINT	//  stack alice_conditionals _69=0 _70=10000
    1 PUSHINT	//  stack alice_conditionals _69=0 _70=10000 _71=1
    NEWC	//  stack alice_conditionals _69=0 _70=10000 _71=1 _72
    8 STU	//  stack alice_conditionals _69=0 _70=10000 _74
    ENDC	//  stack alice_conditionals _69=0 _70=10000 _75
    CTOS	//  stack alice_conditionals _69=0 _70=10000 _76
    ~add_conditional CALLDICT	//  stack alice_conditionals
    1 PUSHINT	//  stack alice_conditionals _79=1
    20000 PUSHINT	//  stack alice_conditionals _79=1 _80=20000
    2 PUSHINT	//  stack alice_conditionals _79=1 _80=20000 _81=2
    NEWC	//  stack alice_conditionals _79=1 _80=20000 _81=2 _82
    8 STU	//  stack alice_conditionals _79=1 _80=20000 _84
    ENDC	//  stack alice_conditionals _79=1 _80=20000 _85
    CTOS	//  stack alice_conditionals _79=1 _80=20000 _86
    ~add_conditional CALLDICT	//  stack alice_conditionals
    NEWDICT	//  stack alice_conditionals bob_conditionals
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _91=0
    777 PUSHINT	//  stack alice_conditionals bob_conditionals _91=0 _92=777
    7 PUSHINT	//  stack alice_conditionals bob_conditionals _91=0 _92=777 _93=7
    NEWC	//  stack alice_conditionals bob_conditionals _91=0 _92=777 _93=7 _94
    8 STU	//  stack alice_conditionals bob_conditionals _91=0 _92=777 _96
    ENDC	//  stack alice_conditionals bob_conditionals _91=0 _92=777 _97
    CTOS	//  stack alice_conditionals bob_conditionals _91=0 _92=777 _98
    ~add_conditional CALLDICT	//  stack alice_conditionals bob_conditionals
    9001 PUSHINT	//  stack alice_conditionals bob_conditionals _100=9001
    s3 PUSH	//  stack alice_conditionals bob_conditionals _100=9001 stack
    FIRST	//  stack alice_conditionals bob_conditionals _100=9001 _101
    3 EQINT	//  stack alice_conditionals bob_conditionals _100=9001 _103
    THROWANYIFNOT
    s2 PUSH
    1 PUSHINT	//  stack alice_conditionals bob_conditionals stack _107=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _108
    UNPAIR	//  stack alice_conditionals bob_conditionals r_bA r_bB
    9002 PUSHINT	//  stack alice_conditionals bob_conditionals r_bA r_bB _110=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack alice_conditionals bob_conditionals _110=9002 r_bB r_bA _115
    EQUAL	//  stack alice_conditionals bob_conditionals _110=9002 r_bB _116
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_bB _110=9002 _116
    THROWANYIFNOT
    9003 PUSHINT	//  stack alice_conditionals bob_conditionals r_bB _118=9003
    SWAP	//  stack alice_conditionals bob_conditionals _118=9003 r_bB
    0 EQINT	//  stack alice_conditionals bob_conditionals _118=9003 _120
    THROWANYIFNOT
    s2 PUSH
    2 PUSHINT	//  stack alice_conditionals bob_conditionals stack _124=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _125
    UNPAIR	//  stack alice_conditionals bob_conditionals r_pkA r_pkB
    9004 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _127=9004
    777 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _127=9004 _128=777
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _127=9004 _129
    s1 s3 XCHG	//  stack alice_conditionals bob_conditionals _127=9004 r_pkB r_pkA _129
    EQUAL	//  stack alice_conditionals bob_conditionals _127=9004 r_pkB _130
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_pkB _127=9004 _130
    THROWANYIFNOT
    9005 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _132=9005
    3456 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _132=9005 _133=3456
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkB _132=9005 _134
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals _132=9005 r_pkB _134
    EQUAL	//  stack alice_conditionals bob_conditionals _132=9005 _135
    THROWANYIFNOT
    9006 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9006
    s3 PUSH
    3 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9006 stack _138=3
    INDEXVAR	//  stack alice_conditionals bob_conditionals _137=9006 _139
    931 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9006 _139 _140=931
    EQUAL	//  stack alice_conditionals bob_conditionals _137=9006 _141
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _143=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _143=9007 stack _144=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _143=9007 _145
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _143=9007 _145 _146=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _143=9007 _147
    86400 PUSHINT	//  stack alice_conditionals bob_conditionals _143=9007 _147 _148=86400
    EQUAL	//  stack alice_conditionals bob_conditionals _143=9007 _149
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _151=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _151=9007 stack _152=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _151=9007 _153
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _151=9007 _153 _154=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _151=9007 _155
    30000000 PUSHINT	//  stack alice_conditionals bob_conditionals _151=9007 _155 _156=30000000
    EQUAL	//  stack alice_conditionals bob_conditionals _151=9007 _157
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _159=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _159=9007 stack _160=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _159=9007 _161
    2 PUSHINT	//  stack alice_conditionals bob_conditionals _159=9007 _161 _162=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _159=9007 _163
    3600 PUSHINT	//  stack alice_conditionals bob_conditionals _159=9007 _163 _164=3600
    EQUAL	//  stack alice_conditionals bob_conditionals _159=9007 _165
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _167=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _167=9008 stack _168=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _167=9008 _169
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _167=9008 _169 _170=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _167=9008 _171
    7 EQINT	//  stack alice_conditionals bob_conditionals _167=9008 _173
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _175=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _175=9008 stack _176=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _175=9008 _177
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _175=9008 _177 _178=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _175=9008 _179
    11 EQINT	//  stack alice_conditionals bob_conditionals _175=9008 _181
    THROWANYIFNOT
    TRUE	//  stack alice_conditionals bob_conditionals _184
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _184 _185=1
    15 PUSHINT	//  stack alice_conditionals bob_conditionals _184 _185=1 _186=15
    9 PUSHINT	//  stack alice_conditionals bob_conditionals _184 _185=1 _186=15 _187=9
    NEWC	//  stack alice_conditionals bob_conditionals _184 _185=1 _186=15 _187=9 _188
    64 STU	//  stack alice_conditionals bob_conditionals _184 _185=1 _186=15 _190
    10 PUSHINT	//  stack alice_conditionals bob_conditionals _184 _185=1 _186=15 _190 _191=10
    STVARUINT16	//  stack alice_conditionals bob_conditionals _184 _185=1 _186=15 _192
    s1 s5 XCHG	//  stack _186=15 bob_conditionals _184 _185=1 alice_conditionals _192
    STDICT	//  stack _186=15 bob_conditionals _184 _185=1 _193
    s1 s4 XCHG	//  stack _185=1 bob_conditionals _184 _186=15 _193
    64 STU	//  stack _185=1 bob_conditionals _184 _195
    10 PUSHINT	//  stack _185=1 bob_conditionals _184 _195 _196=10
    STVARUINT16	//  stack _185=1 bob_conditionals _184 _197
    s1 s2 XCHG	//  stack _185=1 _184 bob_conditionals _197
    STDICT	//  stack _185=1 _184 _198
    s1 s2 XCHG	//  stack _184 _185=1 _198
    32 STU	//  stack _184 _200
    1 STI	//  stack _202
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _204=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _204=9009 stack _205=6
    INDEXVAR	//  stack quarantined_state _204=9009 _206
    ROT	//  stack _204=9009 _206 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _204=9009 _207
    THROWANYIFNOT
    9010 PUSHINT	//  stack _209=9010
    OVER
    7 PUSHINT	//  stack _209=9010 stack _210=7
    INDEXVAR	//  stack _209=9010 _211
    0 PUSHINT	//  stack _209=9010 _211 _212=0
    INDEXVAR	//  stack _209=9010 _213
    30000000 PUSHINT	//  stack _209=9010 _213 _214=30000000
    EQUAL	//  stack _209=9010 _215
    THROWANYIFNOT
    9010 PUSHINT	//  stack _217=9010
    OVER
    7 PUSHINT	//  stack _217=9010 stack _218=7
    INDEXVAR	//  stack _217=9010 _219
    1 PUSHINT	//  stack _217=9010 _219 _220=1
    INDEXVAR	//  stack _217=9010 _221
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _217=9010 _221 _222
    HASHSU SWAP HASHSU EQUAL	//  stack _217=9010 _223
    THROWANYIFNOT
    9010 PUSHINT	//  stack _225=9010
    SWAP
    7 PUSHINT	//  _225=9010 stack _226=7
    INDEXVAR	//  _225=9010 _227
    2 PUSHINT	//  _225=9010 _227 _228=2
    INDEXVAR	//  _225=9010 _229
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _225=9010 _229 _230
    HASHSU SWAP HASHSU EQUAL	//  _225=9010 _231
    THROWANYIFNOT
    TRUE	//  _233
  }>
  __test_settle_conditionals_twice PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    7 PUSHINT	//  conditionals_to_settle _10=7
    NEWC	//  conditionals_to_settle _10=7 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    0 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=0 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _20=931
    1131168622 PUSHINT	//  conditionals_to_settle _20=931 _21=1131168622
    NEWC	//  conditionals_to_settle _20=931 _21=1131168622 _22
    32 STU	//  conditionals_to_settle _20=931 _24
    128 STU	//  conditionals_to_settle _26
    STDICT	//  _27
    ENDC	//  _28
    CTOS	//  payload
    TRUE	//  payload _31
    1727459433 PUSHINT	//  payload _31 _32=1727459433
    NEWC	//  payload _31 _32=1727459433 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    777 PUSHINT	//  payload _37 _38 _39=777
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL	//  body _45 _47=8000000000 _48
    PUSHNULL	//  body _45 _47=8000000000 _48 _49
    s4 PUSH	//  body _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  body _45 _46
    invoke_method CALLDICT	//  body _222 _223
    2DROP	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _51
    8000000000 PUSHINT	//  body _51 _53=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _51 _53=8000000000 _54 _55 body
    4 TUPLE	//  _51 _52
    invoke_method CALLDICT	//  _224 _225
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _59
    0 TUPLE	//  _59 _60
    invoke_method CALLDICT	//  _226 _227
    NIP	//  stack
    NEWDICT	//  stack alice_conditionals
    0 PUSHINT	//  stack alice_conditionals _65=0
    10000 PUSHINT	//  stack alice_conditionals _65=0 _66=10000
    1 PUSHINT	//  stack alice_conditionals _65=0 _66=10000 _67=1
    NEWC	//  stack alice_conditionals _65=0 _66=10000 _67=1 _68
    8 STU	//  stack alice_conditionals _65=0 _66=10000 _70
    ENDC	//  stack alice_conditionals _65=0 _66=10000 _71
    CTOS	//  stack alice_conditionals _65=0 _66=10000 _72
    ~add_conditional CALLDICT	//  stack alice_conditionals
    1 PUSHINT	//  stack alice_conditionals _75=1
    20000 PUSHINT	//  stack alice_conditionals _75=1 _76=20000
    2 PUSHINT	//  stack alice_conditionals _75=1 _76=20000 _77=2
    NEWC	//  stack alice_conditionals _75=1 _76=20000 _77=2 _78
    8 STU	//  stack alice_conditionals _75=1 _76=20000 _80
    ENDC	//  stack alice_conditionals _75=1 _76=20000 _81
    CTOS	//  stack alice_conditionals _75=1 _76=20000 _82
    ~add_conditional CALLDICT	//  stack alice_conditionals
    NEWDICT	//  stack alice_conditionals bob_conditionals
    9001 PUSHINT	//  stack alice_conditionals bob_conditionals _86=9001
    s3 PUSH	//  stack alice_conditionals bob_conditionals _86=9001 stack
    FIRST	//  stack alice_conditionals bob_conditionals _86=9001 _87
    3 EQINT	//  stack alice_conditionals bob_conditionals _86=9001 _89
    THROWANYIFNOT
    s2 PUSH
    1 PUSHINT	//  stack alice_conditionals bob_conditionals stack _93=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _94
    UNPAIR	//  stack alice_conditionals bob_conditionals r_bA r_bB
    9002 PUSHINT	//  stack alice_conditionals bob_conditionals r_bA r_bB _96=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack alice_conditionals bob_conditionals _96=9002 r_bB r_bA _101
    EQUAL	//  stack alice_conditionals bob_conditionals _96=9002 r_bB _102
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_bB _96=9002 _102
    THROWANYIFNOT
    9003 PUSHINT	//  stack alice_conditionals bob_conditionals r_bB _104=9003
    SWAP	//  stack alice_conditionals bob_conditionals _104=9003 r_bB
    0 EQINT	//  stack alice_conditionals bob_conditionals _104=9003 _106
    THROWANYIFNOT
    s2 PUSH
    2 PUSHINT	//  stack alice_conditionals bob_conditionals stack _110=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _111
    UNPAIR	//  stack alice_conditionals bob_conditionals r_pkA r_pkB
    9004 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _113=9004
    777 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _113=9004 _114=777
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _113=9004 _115
    s1 s3 XCHG	//  stack alice_conditionals bob_conditionals _113=9004 r_pkB r_pkA _115
    EQUAL	//  stack alice_conditionals bob_conditionals _113=9004 r_pkB _116
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_pkB _113=9004 _116
    THROWANYIFNOT
    9005 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _118=9005
    3456 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _118=9005 _119=3456
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkB _118=9005 _120
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals _118=9005 r_pkB _120
    EQUAL	//  stack alice_conditionals bob_conditionals _118=9005 _121
    THROWANYIFNOT
    9006 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9006
    s3 PUSH
    3 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9006 stack _124=3
    INDEXVAR	//  stack alice_conditionals bob_conditionals _123=9006 _125
    931 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9006 _125 _126=931
    EQUAL	//  stack alice_conditionals bob_conditionals _123=9006 _127
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _129=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _129=9007 stack _130=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _129=9007 _131
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _129=9007 _131 _132=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _129=9007 _133
    86400 PUSHINT	//  stack alice_conditionals bob_conditionals _129=9007 _133 _134=86400
    EQUAL	//  stack alice_conditionals bob_conditionals _129=9007 _135
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9007 stack _138=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _137=9007 _139
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9007 _139 _140=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _137=9007 _141
    30000000 PUSHINT	//  stack alice_conditionals bob_conditionals _137=9007 _141 _142=30000000
    EQUAL	//  stack alice_conditionals bob_conditionals _137=9007 _143
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _145=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _145=9007 stack _146=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _145=9007 _147
    2 PUSHINT	//  stack alice_conditionals bob_conditionals _145=9007 _147 _148=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _145=9007 _149
    3600 PUSHINT	//  stack alice_conditionals bob_conditionals _145=9007 _149 _150=3600
    EQUAL	//  stack alice_conditionals bob_conditionals _145=9007 _151
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _153=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _153=9008 stack _154=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _153=9008 _155
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _153=9008 _155 _156=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _153=9008 _157
    7 EQINT	//  stack alice_conditionals bob_conditionals _153=9008 _159
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _161=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _161=9008 stack _162=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _161=9008 _163
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _161=9008 _163 _164=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _161=9008 _165
    11 EQINT	//  stack alice_conditionals bob_conditionals _161=9008 _167
    THROWANYIFNOT
    TRUE	//  stack alice_conditionals bob_conditionals _170
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _170 _171=1
    15 PUSHINT	//  stack alice_conditionals bob_conditionals _170 _171=1 _172=15
    9 PUSHINT	//  stack alice_conditionals bob_conditionals _170 _171=1 _172=15 _173=9
    NEWC	//  stack alice_conditionals bob_conditionals _170 _171=1 _172=15 _173=9 _174
    64 STU	//  stack alice_conditionals bob_conditionals _170 _171=1 _172=15 _176
    10 PUSHINT	//  stack alice_conditionals bob_conditionals _170 _171=1 _172=15 _176 _177=10
    STVARUINT16	//  stack alice_conditionals bob_conditionals _170 _171=1 _172=15 _178
    s1 s5 XCHG	//  stack _172=15 bob_conditionals _170 _171=1 alice_conditionals _178
    STDICT	//  stack _172=15 bob_conditionals _170 _171=1 _179
    s1 s4 XCHG	//  stack _171=1 bob_conditionals _170 _172=15 _179
    64 STU	//  stack _171=1 bob_conditionals _170 _181
    787 PUSHINT	//  stack _171=1 bob_conditionals _170 _181 _184
    STVARUINT16	//  stack _171=1 bob_conditionals _170 _185
    s1 s2 XCHG	//  stack _171=1 _170 bob_conditionals _185
    STDICT	//  stack _171=1 _170 _186
    s1 s2 XCHG	//  stack _170 _171=1 _186
    32 STU	//  stack _170 _188
    1 STI	//  stack _190
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _192=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _192=9009 stack _193=6
    INDEXVAR	//  stack quarantined_state _192=9009 _194
    ROT	//  stack _192=9009 _194 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _192=9009 _195
    THROWANYIFNOT
    9010 PUSHINT	//  stack _197=9010
    OVER
    7 PUSHINT	//  stack _197=9010 stack _198=7
    INDEXVAR	//  stack _197=9010 _199
    0 PUSHINT	//  stack _197=9010 _199 _200=0
    INDEXVAR	//  stack _197=9010 _201
    30000000 PUSHINT	//  stack _197=9010 _201 _202=30000000
    EQUAL	//  stack _197=9010 _203
    THROWANYIFNOT
    9010 PUSHINT	//  stack _205=9010
    OVER
    7 PUSHINT	//  stack _205=9010 stack _206=7
    INDEXVAR	//  stack _205=9010 _207
    1 PUSHINT	//  stack _205=9010 _207 _208=1
    INDEXVAR	//  stack _205=9010 _209
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _205=9010 _209 _210
    HASHSU SWAP HASHSU EQUAL	//  stack _205=9010 _211
    THROWANYIFNOT
    9010 PUSHINT	//  stack _213=9010
    SWAP
    7 PUSHINT	//  _213=9010 stack _214=7
    INDEXVAR	//  _213=9010 _215
    2 PUSHINT	//  _213=9010 _215 _216=2
    INDEXVAR	//  _213=9010 _217
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _213=9010 _217 _218
    HASHSU SWAP HASHSU EQUAL	//  _213=9010 _219
    THROWANYIFNOT
    TRUE	//  _221
  }>
  __test_settle_conditionals_in_two_steps PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    1 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=1 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _20=931
    1131168622 PUSHINT	//  conditionals_to_settle _20=931 _21=1131168622
    NEWC	//  conditionals_to_settle _20=931 _21=1131168622 _22
    32 STU	//  conditionals_to_settle _20=931 _24
    128 STU	//  conditionals_to_settle _26
    STDICT	//  _27
    ENDC	//  _28
    CTOS	//  payload
    FALSE	//  payload _31
    1727459433 PUSHINT	//  payload _31 _32=1727459433
    NEWC	//  payload _31 _32=1727459433 _33
    32 STU	//  payload _31 _35
    1 STI	//  payload _37
    OVER	//  payload _37 payload
    HASHSU	//  payload _37 _38
    3456 PUSHINT	//  payload _37 _38 _39=3456
    SIGN	//  payload _37 _40
    STSLICER	//  payload _41
    SWAP	//  _41 payload
    STSLICER	//  _42
    ENDC	//  _43
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _45
    8000000000 PUSHINT	//  body _45 _47=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _45 _47=8000000000 _48 _49 body
    4 TUPLE	//  _45 _46
    invoke_method CALLDICT	//  _417 _418
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _53
    0 TUPLE	//  _53 _54
    invoke_method CALLDICT	//  _419 _420
    NIP	//  stack
    NEWDICT	//  stack alice_conditionals
    0 PUSHINT	//  stack alice_conditionals _59=0
    10000 PUSHINT	//  stack alice_conditionals _59=0 _60=10000
    1 PUSHINT	//  stack alice_conditionals _59=0 _60=10000 _61=1
    NEWC	//  stack alice_conditionals _59=0 _60=10000 _61=1 _62
    8 STU	//  stack alice_conditionals _59=0 _60=10000 _64
    ENDC	//  stack alice_conditionals _59=0 _60=10000 _65
    CTOS	//  stack alice_conditionals _59=0 _60=10000 _66
    ~add_conditional CALLDICT	//  stack alice_conditionals
    NEWDICT	//  stack alice_conditionals bob_conditionals
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _71=0
    777 PUSHINT	//  stack alice_conditionals bob_conditionals _71=0 _72=777
    7 PUSHINT	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _73=7
    NEWC	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _73=7 _74
    8 STU	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _76
    ENDC	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _77
    CTOS	//  stack alice_conditionals bob_conditionals _71=0 _72=777 _78
    ~add_conditional CALLDICT	//  stack alice_conditionals bob_conditionals
    9001 PUSHINT	//  stack alice_conditionals bob_conditionals _80=9001
    s3 PUSH	//  stack alice_conditionals bob_conditionals _80=9001 stack
    FIRST	//  stack alice_conditionals bob_conditionals _80=9001 _81
    3 EQINT	//  stack alice_conditionals bob_conditionals _80=9001 _83
    THROWANYIFNOT
    s2 PUSH
    1 PUSHINT	//  stack alice_conditionals bob_conditionals stack _87=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _88
    UNPAIR	//  stack alice_conditionals bob_conditionals r_bA r_bB
    9002 PUSHINT	//  stack alice_conditionals bob_conditionals r_bA r_bB _90=9002
    s0 s2 XCHG
    7969999999 PUSHINT	//  stack alice_conditionals bob_conditionals _90=9002 r_bB r_bA _95
    EQUAL	//  stack alice_conditionals bob_conditionals _90=9002 r_bB _96
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_bB _90=9002 _96
    THROWANYIFNOT
    9003 PUSHINT	//  stack alice_conditionals bob_conditionals r_bB _98=9003
    SWAP	//  stack alice_conditionals bob_conditionals _98=9003 r_bB
    0 EQINT	//  stack alice_conditionals bob_conditionals _98=9003 _100
    THROWANYIFNOT
    s2 PUSH
    2 PUSHINT	//  stack alice_conditionals bob_conditionals stack _104=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _105
    UNPAIR	//  stack alice_conditionals bob_conditionals r_pkA r_pkB
    9004 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _107=9004
    777 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _107=9004 _108=777
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkA r_pkB _107=9004 _109
    s1 s3 XCHG	//  stack alice_conditionals bob_conditionals _107=9004 r_pkB r_pkA _109
    EQUAL	//  stack alice_conditionals bob_conditionals _107=9004 r_pkB _110
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals r_pkB _107=9004 _110
    THROWANYIFNOT
    9005 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _112=9005
    3456 PUSHINT	//  stack alice_conditionals bob_conditionals r_pkB _112=9005 _113=3456
    PRIVTOPUB	//  stack alice_conditionals bob_conditionals r_pkB _112=9005 _114
    s1 s2 XCHG	//  stack alice_conditionals bob_conditionals _112=9005 r_pkB _114
    EQUAL	//  stack alice_conditionals bob_conditionals _112=9005 _115
    THROWANYIFNOT
    9006 PUSHINT	//  stack alice_conditionals bob_conditionals _117=9006
    s3 PUSH
    3 PUSHINT	//  stack alice_conditionals bob_conditionals _117=9006 stack _118=3
    INDEXVAR	//  stack alice_conditionals bob_conditionals _117=9006 _119
    931 PUSHINT	//  stack alice_conditionals bob_conditionals _117=9006 _119 _120=931
    EQUAL	//  stack alice_conditionals bob_conditionals _117=9006 _121
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007 stack _124=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _123=9007 _125
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007 _125 _126=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _123=9007 _127
    86400 PUSHINT	//  stack alice_conditionals bob_conditionals _123=9007 _127 _128=86400
    EQUAL	//  stack alice_conditionals bob_conditionals _123=9007 _129
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007 stack _132=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _131=9007 _133
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007 _133 _134=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _131=9007 _135
    30000000 PUSHINT	//  stack alice_conditionals bob_conditionals _131=9007 _135 _136=30000000
    EQUAL	//  stack alice_conditionals bob_conditionals _131=9007 _137
    THROWANYIFNOT
    9007 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007
    s3 PUSH
    4 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007 stack _140=4
    INDEXVAR	//  stack alice_conditionals bob_conditionals _139=9007 _141
    2 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007 _141 _142=2
    INDEXVAR	//  stack alice_conditionals bob_conditionals _139=9007 _143
    3600 PUSHINT	//  stack alice_conditionals bob_conditionals _139=9007 _143 _144=3600
    EQUAL	//  stack alice_conditionals bob_conditionals _139=9007 _145
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _147=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _147=9008 stack _148=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _147=9008 _149
    0 PUSHINT	//  stack alice_conditionals bob_conditionals _147=9008 _149 _150=0
    INDEXVAR	//  stack alice_conditionals bob_conditionals _147=9008 _151
    7 EQINT	//  stack alice_conditionals bob_conditionals _147=9008 _153
    THROWANYIFNOT
    9008 PUSHINT	//  stack alice_conditionals bob_conditionals _155=9008
    s3 PUSH
    5 PUSHINT	//  stack alice_conditionals bob_conditionals _155=9008 stack _156=5
    INDEXVAR	//  stack alice_conditionals bob_conditionals _155=9008 _157
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _155=9008 _157 _158=1
    INDEXVAR	//  stack alice_conditionals bob_conditionals _155=9008 _159
    11 EQINT	//  stack alice_conditionals bob_conditionals _155=9008 _161
    THROWANYIFNOT
    TRUE	//  stack alice_conditionals bob_conditionals _164
    1 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1
    15 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15
    9 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _167=9
    NEWC	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _167=9 _168
    64 STU	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _170
    20010 PUSHINT	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _170 _173
    STVARUINT16	//  stack alice_conditionals bob_conditionals _164 _165=1 _166=15 _174
    s1 s5 XCHG	//  stack _166=15 bob_conditionals _164 _165=1 alice_conditionals _174
    STDICT	//  stack _166=15 bob_conditionals _164 _165=1 _175
    s1 s4 XCHG	//  stack _165=1 bob_conditionals _164 _166=15 _175
    64 STU	//  stack _165=1 bob_conditionals _164 _177
    10 PUSHINT	//  stack _165=1 bob_conditionals _164 _177 _178=10
    STVARUINT16	//  stack _165=1 bob_conditionals _164 _179
    s1 s2 XCHG	//  stack _165=1 _164 bob_conditionals _179
    STDICT	//  stack _165=1 _164 _180
    s1 s2 XCHG	//  stack _164 _165=1 _180
    32 STU	//  stack _164 _182
    1 STI	//  stack _184
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _186=9009
    s2 PUSH
    6 PUSHINT	//  stack quarantined_state _186=9009 stack _187=6
    INDEXVAR	//  stack quarantined_state _186=9009 _188
    ROT	//  stack _186=9009 _188 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  stack _186=9009 _189
    THROWANYIFNOT
    9010 PUSHINT	//  stack _191=9010
    OVER
    7 PUSHINT	//  stack _191=9010 stack _192=7
    INDEXVAR	//  stack _191=9010 _193
    0 PUSHINT	//  stack _191=9010 _193 _194=0
    INDEXVAR	//  stack _191=9010 _195
    30000000 PUSHINT	//  stack _191=9010 _195 _196=30000000
    EQUAL	//  stack _191=9010 _197
    THROWANYIFNOT
    9010 PUSHINT	//  stack _199=9010
    OVER
    7 PUSHINT	//  stack _199=9010 stack _200=7
    INDEXVAR	//  stack _199=9010 _201
    1 PUSHINT	//  stack _199=9010 _201 _202=1
    INDEXVAR	//  stack _199=9010 _203
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _199=9010 _203 _204
    HASHSU SWAP HASHSU EQUAL	//  stack _199=9010 _205
    THROWANYIFNOT
    9010 PUSHINT	//  stack _207=9010
    SWAP
    7 PUSHINT	//  _207=9010 stack _208=7
    INDEXVAR	//  _207=9010 _209
    2 PUSHINT	//  _207=9010 _209 _210=2
    INDEXVAR	//  _207=9010 _211
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _207=9010 _211 _212
    HASHSU SWAP HASHSU EQUAL	//  _207=9010 _213
    THROWANYIFNOT
    TRUE	//  _215
  }>
  __test_settle_conditionals_too_early PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86399 PUSHINT	//  _3
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _8=2
    NEWC	//  conditionals_to_settle _8=2 _9
    8 STU	//  conditionals_to_settle _11
    ENDC	//  conditionals_to_settle _12
    CTOS	//  conditionals_to_settle _13
    1 PUSHINT
    ROT
    32 PUSHINT	//  _13 _14=1 conditionals_to_settle _15=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _18=1
    NEWC	//  conditionals_to_settle _18=1 _19
    8 STU	//  conditionals_to_settle _21
    ENDC	//  conditionals_to_settle _22
    CTOS	//  conditionals_to_settle _23
    0 PUSHINT
    ROT
    32 PUSHINT	//  _23 _24=0 conditionals_to_settle _25=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _28=931
    1131168622 PUSHINT	//  conditionals_to_settle _28=931 _29=1131168622
    NEWC	//  conditionals_to_settle _28=931 _29=1131168622 _30
    32 STU	//  conditionals_to_settle _28=931 _32
    128 STU	//  conditionals_to_settle _34
    STDICT	//  _35
    ENDC	//  _36
    CTOS	//  payload
    FALSE	//  payload _39
    1727459433 PUSHINT	//  payload _39 _40=1727459433
    NEWC	//  payload _39 _40=1727459433 _41
    32 STU	//  payload _39 _43
    1 STI	//  payload _45
    OVER	//  payload _45 payload
    HASHSU	//  payload _45 _46
    3456 PUSHINT	//  payload _45 _46 _47=3456
    SIGN	//  payload _45 _48
    STSLICER	//  payload _49
    SWAP	//  _49 payload
    STSLICER	//  _50
    ENDC	//  _51
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _53
    8000000000 PUSHINT	//  body _53 _55=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _53 _55=8000000000 _56 _57 body
    4 TUPLE	//  _53 _54
    invoke_method_expect_fail CALLDICT	//  _58
    DROP	// 
    TRUE	//  _59
  }>
  __test_settle_conditionals_too_late PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    90001 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    1 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=1 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _20=1
    NEWC	//  conditionals_to_settle _20=1 _21
    8 STU	//  conditionals_to_settle _23
    ENDC	//  conditionals_to_settle _24
    CTOS	//  conditionals_to_settle _25
    0 PUSHINT
    ROT
    32 PUSHINT	//  _25 _26=0 conditionals_to_settle _27=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _30=931
    1131168622 PUSHINT	//  conditionals_to_settle _30=931 _31=1131168622
    NEWC	//  conditionals_to_settle _30=931 _31=1131168622 _32
    32 STU	//  conditionals_to_settle _30=931 _34
    128 STU	//  conditionals_to_settle _36
    STDICT	//  _37
    ENDC	//  _38
    CTOS	//  payload
    FALSE	//  payload _41
    1727459433 PUSHINT	//  payload _41 _42=1727459433
    NEWC	//  payload _41 _42=1727459433 _43
    32 STU	//  payload _41 _45
    1 STI	//  payload _47
    OVER	//  payload _47 payload
    HASHSU	//  payload _47 _48
    3456 PUSHINT	//  payload _47 _48 _49=3456
    SIGN	//  payload _47 _50
    STSLICER	//  payload _51
    SWAP	//  _51 payload
    STSLICER	//  _52
    ENDC	//  _53
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _55
    8000000000 PUSHINT	//  body _55 _57=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _55 _57=8000000000 _58 _59 body
    4 TUPLE	//  _55 _56
    invoke_method_expect_fail CALLDICT	//  _60
    DROP	// 
    TRUE	//  _61
  }>
  create_quatantine_with_executed_conditional_helper PROC:<{
    // 
    create_quatantine_with_conditional_helper CALLDICT
    86402 PUSHINT	//  _5
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    NEWDICT	//  conditionals_to_settle
    2 PUSHINT	//  conditionals_to_settle _10=2
    NEWC	//  conditionals_to_settle _10=2 _11
    8 STU	//  conditionals_to_settle _13
    ENDC	//  conditionals_to_settle _14
    CTOS	//  conditionals_to_settle _15
    1 PUSHINT
    ROT
    32 PUSHINT	//  _15 _16=1 conditionals_to_settle _17=32
    DICTUSET	//  conditionals_to_settle
    1 PUSHINT	//  conditionals_to_settle _20=1
    NEWC	//  conditionals_to_settle _20=1 _21
    8 STU	//  conditionals_to_settle _23
    ENDC	//  conditionals_to_settle _24
    CTOS	//  conditionals_to_settle _25
    0 PUSHINT
    ROT
    32 PUSHINT	//  _25 _26=0 conditionals_to_settle _27=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _30=931
    1131168622 PUSHINT	//  conditionals_to_settle _30=931 _31=1131168622
    NEWC	//  conditionals_to_settle _30=931 _31=1131168622 _32
    32 STU	//  conditionals_to_settle _30=931 _34
    128 STU	//  conditionals_to_settle _36
    STDICT	//  _37
    ENDC	//  _38
    CTOS	//  payload
    FALSE	//  payload _41
    1727459433 PUSHINT	//  payload _41 _42=1727459433
    NEWC	//  payload _41 _42=1727459433 _43
    32 STU	//  payload _41 _45
    1 STI	//  payload _47
    OVER	//  payload _47 payload
    HASHSU	//  payload _47 _48
    3456 PUSHINT	//  payload _47 _48 _49=3456
    SIGN	//  payload _47 _50
    STSLICER	//  payload _51
    SWAP	//  _51 payload
    STSLICER	//  _52
    ENDC	//  _53
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _55
    8000000000 PUSHINT	//  body _55 _57=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _55 _57=8000000000 _58 _59 body
    4 TUPLE	//  _55 _56
    invoke_method CALLDICT	//  _144 _145
    2DROP	// 
    NEWDICT	//  conditionals_to_settle
    7 PUSHINT	//  conditionals_to_settle _64=7
    NEWC	//  conditionals_to_settle _64=7 _65
    8 STU	//  conditionals_to_settle _67
    ENDC	//  conditionals_to_settle _68
    CTOS	//  conditionals_to_settle _69
    0 PUSHINT
    ROT
    32 PUSHINT	//  _69 _70=0 conditionals_to_settle _71=32
    DICTUSET	//  conditionals_to_settle
    931 PUSHINT	//  conditionals_to_settle _74=931
    1131168622 PUSHINT	//  conditionals_to_settle _74=931 _75=1131168622
    NEWC	//  conditionals_to_settle _74=931 _75=1131168622 _76
    32 STU	//  conditionals_to_settle _74=931 _78
    128 STU	//  conditionals_to_settle _80
    STDICT	//  _81
    ENDC	//  _82
    CTOS	//  payload
    TRUE	//  payload _85
    1727459433 PUSHINT	//  payload _85 _86=1727459433
    NEWC	//  payload _85 _86=1727459433 _87
    32 STU	//  payload _85 _89
    1 STI	//  payload _91
    OVER	//  payload _91 payload
    HASHSU	//  payload _91 _92
    777 PUSHINT	//  payload _91 _92 _93=777
    SIGN	//  payload _91 _94
    STSLICER	//  payload _95
    SWAP	//  _95 payload
    STSLICER	//  _96
    ENDC	//  _97
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _99
    8000000000 PUSHINT	//  body _99 _101=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _99 _101=8000000000 _102 _103 body
    4 TUPLE	//  _99 _100
    invoke_method CALLDICT	//  _146 _147
    2DROP	// 
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _107
    0 TUPLE	//  _107 _108
    invoke_method CALLDICT	//  _148 _149
    NIP	//  stack
    TRUE	//  stack _111
    1 PUSHINT	//  stack _111 _112=1
    PUSHNULL	//  stack _111 _112=1 _113
    15 PUSHINT	//  stack _111 _112=1 _113 _114=15
    PUSHNULL	//  stack _111 _112=1 _113 _114=15 _115
    9 PUSHINT	//  stack _111 _112=1 _113 _114=15 _115 _116=9
    NEWC	//  stack _111 _112=1 _113 _114=15 _115 _116=9 _117
    64 STU	//  stack _111 _112=1 _113 _114=15 _115 _119
    30010 PUSHINT	//  stack _111 _112=1 _113 _114=15 _115 _119 _124
    STVARUINT16	//  stack _111 _112=1 _113 _114=15 _115 _125
    STDICT	//  stack _111 _112=1 _113 _114=15 _126
    64 STU	//  stack _111 _112=1 _113 _128
    787 PUSHINT	//  stack _111 _112=1 _113 _128 _131
    STVARUINT16	//  stack _111 _112=1 _113 _132
    STDICT	//  stack _111 _112=1 _133
    32 STU	//  stack _111 _135
    1 STI	//  stack _137
    ENDC	//  stack quarantined_state
    9009 PUSHINT	//  stack quarantined_state _139=9009
    s0 s2 XCHG
    6 PUSHINT	//  _139=9009 quarantined_state stack _140=6
    INDEXVAR	//  _139=9009 quarantined_state _141
    SWAP	//  _139=9009 _141 quarantined_state
    HASHCU SWAP HASHCU EQUAL	//  _139=9009 _142
    THROWANYIFNOT
  }>
  __test_finish_uncooperative_close PROC:<{
    // 
    create_quatantine_with_executed_conditional_helper CALLDICT
    90002 PUSHINT	//  _7
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    625158801 PUSHINT	//  _10=625158801
    NEWC	//  _10=625158801 _11
    32 STU	//  _13
    ENDC	//  _14
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _16
    8000000000 PUSHINT	//  body _16 _18=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _16 _18=8000000000 _19 _20 body
    4 TUPLE	//  _16 _17
    invoke_method CALLDICT	//  _280 _281
    2DROP	// 
    parse_c5 INLINECALLDICT	//  actions
    7969970776 PUSHINT	//  actions alice_balance
    29223 PUSHINT	//  actions alice_balance bob_balance
    9011 PUSHINT	//  actions alice_balance bob_balance _54=9011
    s3 PUSH	//  actions alice_balance bob_balance _54=9011 actions
    TLEN	//  actions alice_balance bob_balance _54=9011 _55
    2 EQINT	//  actions alice_balance bob_balance _54=9011 _57
    THROWANYIFNOT
    9012 PUSHINT	//  actions alice_balance bob_balance _59=9012
    s3 PUSH
    0 PUSHINT	//  actions alice_balance bob_balance _59=9012 actions _60=0
    INDEXVAR	//  actions alice_balance bob_balance _59=9012 _61
    0 PUSHINT	//  actions alice_balance bob_balance _59=9012 _61 _62=0
    INDEXVAR	//  actions alice_balance bob_balance _59=9012 _63
    0 EQINT	//  actions alice_balance bob_balance _59=9012 _65
    THROWANYIFNOT
    9013 PUSHINT	//  actions alice_balance bob_balance _67=9013
    s3 PUSH
    0 PUSHINT	//  actions alice_balance bob_balance _67=9013 actions _68=0
    INDEXVAR	//  actions alice_balance bob_balance _67=9013 _69
    2 PUSHINT	//  actions alice_balance bob_balance _67=9013 _69 _70=2
    INDEXVAR	//  actions alice_balance bob_balance _67=9013 _71
    2 EQINT	//  actions alice_balance bob_balance _67=9013 _73
    THROWANYIFNOT
    s2 PUSH
    0 PUSHINT	//  actions alice_balance bob_balance actions _76=0
    INDEXVAR	//  actions alice_balance bob_balance _77
    1 PUSHINT	//  actions alice_balance bob_balance _77 _78=1
    INDEXVAR	//  actions alice_balance bob_balance _79
    parse_internal_message CALLDICT	//  actions alice_balance bob_balance msg_params
    9014 PUSHINT	//  actions alice_balance bob_balance msg_params _81=9014
    OVER
    1 PUSHINT	//  actions alice_balance bob_balance msg_params _81=9014 msg_params _82=1
    INDEXVAR	//  actions alice_balance bob_balance msg_params _81=9014 _83
    0 EQINT	//  actions alice_balance bob_balance msg_params _81=9014 _85
    THROWANYIFNOT
    9015 PUSHINT	//  actions alice_balance bob_balance msg_params _87=9015
    OVER
    4 PUSHINT	//  actions alice_balance bob_balance msg_params _87=9015 msg_params _88=4
    INDEXVAR	//  actions alice_balance bob_balance msg_params _87=9015 _89
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  actions alice_balance bob_balance msg_params _87=9015 _89 _90
    HASHSU SWAP HASHSU EQUAL	//  actions alice_balance bob_balance msg_params _87=9015 _91
    THROWANYIFNOT
    9016 PUSHINT	//  actions alice_balance bob_balance msg_params _93=9016
    OVER
    5 PUSHINT	//  actions alice_balance bob_balance msg_params _93=9016 msg_params _94=5
    INDEXVAR	//  actions alice_balance bob_balance msg_params _93=9016 _95
    s0 s3 XCHG2	//  actions alice_balance _93=9016 msg_params _95 bob_balance
    EQUAL	//  actions alice_balance _93=9016 msg_params _96
    s1 s2 XCHG	//  actions alice_balance msg_params _93=9016 _96
    THROWANYIFNOT
    9017 PUSHINT	//  actions alice_balance msg_params _98=9017
    SWAP
    8 PUSHINT	//  actions alice_balance _98=9017 msg_params _99=8
    INDEXVAR	//  actions alice_balance _98=9017 _100
    931 PUSHINT	//  actions alice_balance _98=9017 _100 _101=931
    3722217658 PUSHINT	//  actions alice_balance _98=9017 _100 _101=931 _102=3722217658
    NEWC	//  actions alice_balance _98=9017 _100 _101=931 _102=3722217658 _103
    32 STU	//  actions alice_balance _98=9017 _100 _101=931 _105
    128 STU	//  actions alice_balance _98=9017 _100 _107
    ENDC	//  actions alice_balance _98=9017 _100 _108
    CTOS	//  actions alice_balance _98=9017 _100 _109
    HASHSU SWAP HASHSU EQUAL	//  actions alice_balance _98=9017 _110
    THROWANYIFNOT
    10012 PUSHINT	//  actions alice_balance _112=10012
    s2 PUSH
    1 PUSHINT	//  actions alice_balance _112=10012 actions _113=1
    INDEXVAR	//  actions alice_balance _112=10012 _114
    0 PUSHINT	//  actions alice_balance _112=10012 _114 _115=0
    INDEXVAR	//  actions alice_balance _112=10012 _116
    0 EQINT	//  actions alice_balance _112=10012 _118
    THROWANYIFNOT
    10013 PUSHINT	//  actions alice_balance _120=10013
    s2 PUSH
    1 PUSHINT	//  actions alice_balance _120=10013 actions _121=1
    INDEXVAR	//  actions alice_balance _120=10013 _122
    2 PUSHINT	//  actions alice_balance _120=10013 _122 _123=2
    INDEXVAR	//  actions alice_balance _120=10013 _124
    130 PUSHINT	//  actions alice_balance _120=10013 _124 _127
    EQUAL	//  actions alice_balance _120=10013 _128
    THROWANYIFNOT
    SWAP
    1 PUSHINT	//  alice_balance actions _130=1
    INDEXVAR	//  alice_balance _131
    1 PUSHINT	//  alice_balance _131 _132=1
    INDEXVAR	//  alice_balance _133
    parse_internal_message CALLDICT	//  alice_balance msg_params
    10014 PUSHINT	//  alice_balance msg_params _135=10014
    OVER
    1 PUSHINT	//  alice_balance msg_params _135=10014 msg_params _136=1
    INDEXVAR	//  alice_balance msg_params _135=10014 _137
    0 EQINT	//  alice_balance msg_params _135=10014 _139
    THROWANYIFNOT
    10015 PUSHINT	//  alice_balance msg_params _141=10015
    OVER
    4 PUSHINT	//  alice_balance msg_params _141=10015 msg_params _142=4
    INDEXVAR	//  alice_balance msg_params _141=10015 _143
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  alice_balance msg_params _141=10015 _143 _144
    HASHSU SWAP HASHSU EQUAL	//  alice_balance msg_params _141=10015 _145
    THROWANYIFNOT
    10016 PUSHINT	//  alice_balance msg_params _147=10016
    OVER
    5 PUSHINT	//  alice_balance msg_params _147=10016 msg_params _148=5
    INDEXVAR	//  alice_balance msg_params _147=10016 _149
    s0 s3 XCHG2	//  _147=10016 msg_params _149 alice_balance
    EQUAL	//  _147=10016 msg_params _150
    s1 s2 XCHG	//  msg_params _147=10016 _150
    THROWANYIFNOT
    10017 PUSHINT	//  msg_params _152=10017
    SWAP
    8 PUSHINT	//  _152=10017 msg_params _153=8
    INDEXVAR	//  _152=10017 _154
    931 PUSHINT	//  _152=10017 _154 _155=931
    3722217658 PUSHINT	//  _152=10017 _154 _155=931 _156=3722217658
    NEWC	//  _152=10017 _154 _155=931 _156=3722217658 _157
    32 STU	//  _152=10017 _154 _155=931 _159
    128 STU	//  _152=10017 _154 _161
    ENDC	//  _152=10017 _154 _162
    CTOS	//  _152=10017 _154 _163
    HASHSU SWAP HASHSU EQUAL	//  _152=10017 _164
    THROWANYIFNOT
    CONT:<{
      get_channel_data CALLDICT
    }>	//  _168
    0 TUPLE	//  _168 _169
    invoke_method CALLDICT	//  _282 _283
    NIP	//  stack
    9001 PUSHINT	//  stack _171=9001
    OVER	//  stack _171=9001 stack
    FIRST	//  stack _171=9001 _172
    0 EQINT	//  stack _171=9001 _174
    THROWANYIFNOT
    DUP
    1 PUSHINT	//  stack stack _178=1
    INDEXVAR	//  stack _179
    UNPAIR	//  stack r_bA r_bB
    9002 PUSHINT	//  stack r_bA r_bB _181=9002
    s0 s2 XCHG	//  stack _181=9002 r_bB r_bA
    0 EQINT	//  stack _181=9002 r_bB _183
    s1 s2 XCHG	//  stack r_bB _181=9002 _183
    THROWANYIFNOT
    9003 PUSHINT	//  stack r_bB _185=9003
    SWAP	//  stack _185=9003 r_bB
    0 EQINT	//  stack _185=9003 _187
    THROWANYIFNOT
    DUP
    2 PUSHINT	//  stack stack _191=2
    INDEXVAR	//  stack _192
    UNPAIR	//  stack r_pkA r_pkB
    9004 PUSHINT	//  stack r_pkA r_pkB _194=9004
    777 PUSHINT	//  stack r_pkA r_pkB _194=9004 _195=777
    PRIVTOPUB	//  stack r_pkA r_pkB _194=9004 _196
    s1 s3 XCHG	//  stack _194=9004 r_pkB r_pkA _196
    EQUAL	//  stack _194=9004 r_pkB _197
    s1 s2 XCHG	//  stack r_pkB _194=9004 _197
    THROWANYIFNOT
    9005 PUSHINT	//  stack r_pkB _199=9005
    3456 PUSHINT	//  stack r_pkB _199=9005 _200=3456
    PRIVTOPUB	//  stack r_pkB _199=9005 _201
    s1 s2 XCHG	//  stack _199=9005 r_pkB _201
    EQUAL	//  stack _199=9005 _202
    THROWANYIFNOT
    9006 PUSHINT	//  stack _204=9006
    OVER
    3 PUSHINT	//  stack _204=9006 stack _205=3
    INDEXVAR	//  stack _204=9006 _206
    931 PUSHINT	//  stack _204=9006 _206 _207=931
    EQUAL	//  stack _204=9006 _208
    THROWANYIFNOT
    9007 PUSHINT	//  stack _210=9007
    OVER
    4 PUSHINT	//  stack _210=9007 stack _211=4
    INDEXVAR	//  stack _210=9007 _212
    0 PUSHINT	//  stack _210=9007 _212 _213=0
    INDEXVAR	//  stack _210=9007 _214
    86400 PUSHINT	//  stack _210=9007 _214 _215=86400
    EQUAL	//  stack _210=9007 _216
    THROWANYIFNOT
    9007 PUSHINT	//  stack _218=9007
    OVER
    4 PUSHINT	//  stack _218=9007 stack _219=4
    INDEXVAR	//  stack _218=9007 _220
    1 PUSHINT	//  stack _218=9007 _220 _221=1
    INDEXVAR	//  stack _218=9007 _222
    30000000 PUSHINT	//  stack _218=9007 _222 _223=30000000
    EQUAL	//  stack _218=9007 _224
    THROWANYIFNOT
    9007 PUSHINT	//  stack _226=9007
    OVER
    4 PUSHINT	//  stack _226=9007 stack _227=4
    INDEXVAR	//  stack _226=9007 _228
    2 PUSHINT	//  stack _226=9007 _228 _229=2
    INDEXVAR	//  stack _226=9007 _230
    3600 PUSHINT	//  stack _226=9007 _230 _231=3600
    EQUAL	//  stack _226=9007 _232
    THROWANYIFNOT
    9008 PUSHINT	//  stack _234=9008
    OVER
    5 PUSHINT	//  stack _234=9008 stack _235=5
    INDEXVAR	//  stack _234=9008 _236
    0 PUSHINT	//  stack _234=9008 _236 _237=0
    INDEXVAR	//  stack _234=9008 _238
    10 EQINT	//  stack _234=9008 _240
    THROWANYIFNOT
    9008 PUSHINT	//  stack _242=9008
    OVER
    5 PUSHINT	//  stack _242=9008 stack _243=5
    INDEXVAR	//  stack _242=9008 _244
    1 PUSHINT	//  stack _242=9008 _244 _245=1
    INDEXVAR	//  stack _242=9008 _246
    16 EQINT	//  stack _242=9008 _248
    THROWANYIFNOT
    9009 PUSHINT	//  stack _250=9009
    OVER
    6 PUSHINT	//  stack _250=9009 stack _251=6
    INDEXVAR	//  stack _250=9009 _252
    ISNULL	//  stack _250=9009 _253
    THROWANYIFNOT
    9010 PUSHINT	//  stack _255=9010
    OVER
    7 PUSHINT	//  stack _255=9010 stack _256=7
    INDEXVAR	//  stack _255=9010 _257
    0 PUSHINT	//  stack _255=9010 _257 _258=0
    INDEXVAR	//  stack _255=9010 _259
    30000000 PUSHINT	//  stack _255=9010 _259 _260=30000000
    EQUAL	//  stack _255=9010 _261
    THROWANYIFNOT
    9010 PUSHINT	//  stack _263=9010
    OVER
    7 PUSHINT	//  stack _263=9010 stack _264=7
    INDEXVAR	//  stack _263=9010 _265
    1 PUSHINT	//  stack _263=9010 _265 _266=1
    INDEXVAR	//  stack _263=9010 _267
    x{9FE12F8AA084C30D28ADE69FC7507DE79A16BC3F420239D9E311D0E5023082EDBC7_} PUSHSLICE	//  stack _263=9010 _267 _268
    HASHSU SWAP HASHSU EQUAL	//  stack _263=9010 _269
    THROWANYIFNOT
    9010 PUSHINT	//  stack _271=9010
    SWAP
    7 PUSHINT	//  _271=9010 stack _272=7
    INDEXVAR	//  _271=9010 _273
    2 PUSHINT	//  _271=9010 _273 _274=2
    INDEXVAR	//  _271=9010 _275
    x{9FF0AAF08278972FDD856EE27465475A65BF2232E66316DDC1C11D71CCB874626B5_} PUSHSLICE	//  _271=9010 _275 _276
    HASHSU SWAP HASHSU EQUAL	//  _271=9010 _277
    THROWANYIFNOT
    TRUE	//  _279
  }>
  __test_finish_uncooperative_close_too_early PROC:<{
    // 
    create_quatantine_with_executed_conditional_helper CALLDICT
    90000 PUSHINT	//  _7
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
    625158801 PUSHINT	//  _10=625158801
    NEWC	//  _10=625158801 _11
    32 STU	//  _13
    ENDC	//  _14
    CTOS	//  body
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _16
    8000000000 PUSHINT	//  body _16 _18=8000000000
    PUSHNULL	//  body _16 _18=8000000000 _19
    PUSHNULL	//  body _16 _18=8000000000 _19 _20
    s4 PUSH	//  body _16 _18=8000000000 _19 _20 body
    4 TUPLE	//  body _16 _17
    invoke_method_expect_fail CALLDICT	//  body _21
    DROP	//  body
    init_channel_helper CALLDICT
    CONT:<{
      recv_internal CALLDICT
    }>	//  body _23
    8000000000 PUSHINT	//  body _23 _25=8000000000
    PUSHNULL
    ROT
    PUSHNULL
    s0 s4 XCHG2	//  _23 _25=8000000000 _26 _27 body
    4 TUPLE	//  _23 _24
    invoke_method_expect_fail CALLDICT	//  _28
    DROP	// 
    TRUE	//  _29
  }>
}END>c
