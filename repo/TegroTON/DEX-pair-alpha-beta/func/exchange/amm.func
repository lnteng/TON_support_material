#pragma version ^0.3.0;


int amm:get_out_amount(int in_amount, int in_reserve, int out_reserve) inline {
  int in_amount_with_fee = in_amount * 996;
  int numerator = in_amount_with_fee * out_reserve;
  int denominator = (in_reserve * 1000) + in_amount_with_fee;
  int out_amount = numerator / denominator;
  return out_amount;
}

int amm:get_in_amount(int out_amount, int in_reserve, int out_reserve) inline {
  {-
  uint256 numerator = reserveIn.mul(amountOut).mul(10000);
  uint256 denominator = reserveOut.sub(amountOut).mul(9970);
  amountIn = (numerator / denominator).add(1);
  -}
  int numerator = in_reserve * out_amount * 1000;
  int denominator = (out_reserve - out_amount) * 996;
  int in_amount = (numerator / denominator) + 1;
  return in_amount;
}

int {- out_amount -} amm::quote(int in_amount, int in_reserve, int out_reserve) inline {
  return muldiv(in_amount, out_reserve, in_reserve);
}

;; () TWAP::accumulate_price() inline {
;;   int time_elapsed = now() - c4::last_time;
;;   if ((time_elapsed > 0) & (c4::left_reserve != 0) & (c4::right_reserve != 0)) {
;;     ;; mb replace 1000000000 with 2**32 in the future
;;     price0_cumulative_last += (c4::left_reserve * 1000000000 / c4::right_reserve * time_elapsed);
;;     price1_cumulative_last += (c4::right_reserve * 1000000000 / c4::left_reserve * time_elapsed);
;;   }
;;   c4::last_time = now();
;; }
