#pragma version ^0.3.0;


() lp::mint(int amount, slice address) impure inline_ref {
  ;; TODO add notify
  cell state_init = calc_state_init(c4::lp_code,
    pack_jetton_wallet_data(0, address, my_address(), c4::lp_code));
  slice to_wallet_address = calc_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(fee::send_lp)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
          ;; last 3 bits [111] -> init:(Maybe (Either StateInit ^StateInit)) body:(Either X ^X)
    .store_ref(state_init)
    .store_ref(begin_cell()
      .store_uint(op::internal_transfer, 32)
      .store_uint(cur_lt(), 64)
      .store_coins(amount)
      .store_slice(my_address())
      .store_slice(my_address())
      .store_coins(0)
      .store_uint(0, 1)
      .end_cell());
  send_raw_message(msg.end_cell(), 3);
  c4::lp_supply += amount;
}


;; OLD mint liquidity equivalent to 3/7 (0.15%/0.35%) of the growth in sqrt(k)
;; NEW mint liquidity equivalent to 3/8 (0.15%/0.40%) of the growth in sqrt(k)
() lp::mint_fee() impure inline_ref {
  if (c4::kLast != 0) {
    int rootK = math::sqrt(c4::left_reserve * c4::right_reserve);
    int rootKLast = math::sqrt(c4::kLast);
    if (rootK > rootKLast) {
      int numerator = c4::lp_supply * (rootK - rootKLast) * 3;
      int denominator = (rootK * 5) + (rootKLast * 3);
      int liquidity = numerator / denominator;
      if (liquidity > 0) {
        lp::mint(liquidity, c4::fee_distination);
      }
    }
  }
}

() lp::force_address(slice address) impure inline {
    throw_unless(error::invalid_address,
      std::equal_slices(
              calculate_user_jetton_wallet_address(
                      address,
                      my_address(),
                      c4::lp_code),
              msg::sender));
}

() lp::force_amount(int amount) impure inline {
  throw_unless(error::insufficient_lp_amount, amount > 0);
}
