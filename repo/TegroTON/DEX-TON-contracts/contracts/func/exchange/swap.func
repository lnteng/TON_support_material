int get_out_amount(int in_amount, int in_reserve, int out_reserve) inline {
  int in_amount_with_fee = in_amount * 9965;
  int numerator = in_amount_with_fee * out_reserve;
  int denominator = (in_reserve * 10000) + in_amount_with_fee;
  int out_amount = numerator / denominator;
  return out_amount;
}


() swap_to_jetton(int ton_amount, slice to_address, slice payload, int query_id, int fwd_fee) impure {
  int jettons_min = payload~load_coins();

  ton_amount -= (fee::swap_to_jetton() + fwd_fee + fee::send_jetton());

  throw_if(error::insufficient_ton(), ton_amount <= 0);
  throw_if(error::pool_is_not_init(), equal_slices(jetton_wallet, const::addr_none()));

  if (jettons_min > jetton_reserve) { ;; replace throw_if with bounce with save transaction chain
    builder msg_body = begin_cell().store_uint(error::insufficient_liquidity(), 32).store_uint(query_id, 64);
    send_tons(to_address, ton_amount + fee::send_jetton(), msg_body, 2);
    return ();
  }

  int jetton_amount_out = get_out_amount(ton_amount, ton_reserve, jetton_reserve);

  if (jetton_amount_out < jettons_min) {
    builder msg_body = begin_cell().store_uint(error::insufficient_slippage(), 32).store_uint(query_id, 64);
    send_tons(to_address, ton_amount + fee::send_jetton(), msg_body, 2);
    return ();
  }

  accumulate_price();
  jetton_reserve -= jetton_amount_out;

  send_jettons_payload(to_address, 10000000, jetton_amount_out, op::successful_swap(), query_id); ;; 0.01 TON in payload
  save_data();
}


() swap_to_ton(int ton_amount, int jetton_amount, slice to_address, slice payload, int query_id, int fwd_fee) impure {
  int ton_min = payload~load_coins();

  ton_amount -= (fee::swap_to_ton() + fwd_fee + fee::send_jetton());

  if (ton_min > ton_reserve) {
    send_jettons_payload(to_address, ton_amount, jetton_amount, error::insufficient_liquidity(), query_id);
    commit();
    throw(error::insufficient_liquidity());
  }

  int ton_amount_out = get_out_amount(jetton_amount, jetton_reserve, ton_reserve);

  if (ton_amount_out < ton_min) {
    send_jettons_payload(to_address, ton_amount, jetton_amount, error::insufficient_slippage(), query_id);
    commit();
    throw(error::insufficient_slippage());
  }

  accumulate_price();
  jetton_reserve += jetton_amount;

  builder msg_body = begin_cell().store_uint(op::successful_swap(), 32).store_uint(query_id, 64);
  send_tons(to_address, ton_amount_out, msg_body, 3);
  save_data();
}
