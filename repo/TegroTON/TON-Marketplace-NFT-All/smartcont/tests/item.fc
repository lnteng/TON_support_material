
;; Each test function must specify method_id
;; Test functions method_id need to start from 0

;; Each test functions must to be in pairs
;; First funtion expect nothing in arguments
;; But need to return:
;;        function selector - which function to test, e.g. 0 for recv_internal, -1 recv_external, 85143 for seqno, and so on
;;        tuple - stack values needed to be passed to function in tuple
;;        c4 cell - start data of smart contract
;;        c7 tuple / null
;;        gas limit integer / null

#include "../stdlib.func";
#include "../func/utility.fc";
;; test properties of an uninitialized nft
[int, tuple, cell, tuple, int] test_non_initialized_item_get_nft_data_data() method_id(0) {
    int function_selector = 102351; ;; get_nft_data

    tuple stack = unsafe_tuple([null()]);

    cell data = begin_cell() ;; initial nft data
        .store_uint(69, 64)  ;; index
        .store_slice(my_address())  ;;  collection address
        .end_cell();         ;;  No owner, no content yet

    return [function_selector, stack, data, get_c7(), null()];
}

;; After test data function
;; We need to define test funtion
;; It will accept:
;;        exit code - exit code of runvm, here you can check errors / not
;;        c4 cell - data of smart contract after runvm invokes
;;        tuple - stack values of smart contract
;;        c5 cell - here you can check all outcoming messages
;;        gas - gas that was used
;; By default test is passed
;; You can use throw_if to fail test

_ test_non_initialized_item_get_nft_data(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    int init? = second(stack);
    throw_unless(101, init? == 0); ;;  Not initialized
    
    int index = third(stack);
    throw_unless(102, index == 69); ;;  Index

    slice collection_address = fourth(stack);
    throw_unless(103, equal_slices(collection_address, my_address())); ;;  Collection address
}

;; test properties of an initialized nft
[int, tuple, cell, tuple, int] test_initialized_item_get_nft_data_data() method_id(2) {
    int function_selector = 102351; ;; get_nft_data

    tuple stack = unsafe_tuple([null()]);

    cell content = begin_cell()
        .store_uint(420, 64)
        .end_cell();

    cell data = begin_cell() ;; initial nft data
        .store_uint(69, 64) ;; index
        .store_slice(my_address()) ;; collection address
        .store_slice(my_address()) ;; owner address
        .store_ref(content)  ;; content 
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ test_initialized_item_get_nft_data(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    int init? = second(stack);
    throw_unless(101, init? == -1); ;;  Initialized
    
    int index = third(stack);
    throw_unless(102, index == 69); ;;  Index

    slice collection_address = fourth(stack);
    throw_unless(103, equal_slices(collection_address, my_address())); ;;  Collection address

    slice owner_address = fifth(stack);
    throw_unless(104, equal_slices(owner_address, my_address())); ;;  Owner address

    slice content = sixth(stack).begin_parse();
    slice expected_content = begin_cell()
        .store_uint(420, 64)
        .end_cell()
        .begin_parse();
    throw_unless(105, equal_slices(content, expected_content)); ;; content
}

;; test transfer of an nft
[int, tuple, cell, tuple, int] test_transfer_data() method_id(4) {
    int function_selector = 0; ;; recv_internal

    int nft_balance = 100000000;
    int amount = 100000000;

    cell message_body = begin_cell()
        .store_uint(0x5fcc3d14, 32) ;; op
        .store_uint(42069, 64) ;;  query id
        .store_slice(my_address()) ;; new owner address
        .store_uint(0, 2) ;; response destination
        .store_uint(0, 1)
        .store_coins(50000) ;; forward amount
        .end_cell();

    cell message = begin_cell()
        .store_uint(0x6, 4)
        .store_uint(0, 2) ;; source address, must be the same as owner stored in data
        .store_uint(0, 2) ;; destination address
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_slice(message_body.begin_parse())
        .end_cell();
    
    slice msg = message.begin_parse();

    tuple stack = unsafe_tuple([nft_balance, amount, message, message_body.begin_parse()]);

    cell content = begin_cell()
        .store_uint(420, 64)
        .end_cell();

    cell data = begin_cell() ;; initial nft data
        .store_uint(69, 64) ;; index
        .store_slice(my_address()) ;; collection address
        .store_uint(0, 2) ;; owner address
        .store_ref(content)  ;; content 
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ test_transfer(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();

    throw_unless(101, ds~load_uint(64) == 69); ;; index
    throw_unless(102, equal_slices(ds~load_msg_addr(), my_address())); ;; collection address
    throw_unless(103, equal_slices(ds~load_msg_addr(), my_address())); ;; owner address - transferred to myself
    
    slice expected_content = begin_cell()
        .store_uint(420, 64)
        .end_cell()
        .begin_parse();
    throw_unless(104, equal_slices(ds~load_ref().begin_parse(), expected_content)); ;; content

    slice actions_list = actions.begin_parse();
    cell prev_action_list = actions_list~load_ref();
    slice action = actions_list;
    ;; action_send_msg#0ec3c86d mode:(## 8)
    ;;   out_msg:^(MessageRelaxed Any) = OutAction;

    int action_id = action~load_uint(32);  ;; load action id
    throw_unless(105, action_id == 0x0ec3c86d);

    int mode = action~load_uint(8); ;; send mode
    ;;  we don't really care about the mode for this

    actions_list = prev_action_list.begin_parse();
    ;; Only one message: that is action_list is empty
    throw_unless(107, actions_list.slice_bits() == 0);

    slice message = action~load_ref().begin_parse();
    
    message~skip_bits(4); ;; we don't care about the flags
    message~load_msg_addr(); ;; nor the contracts address

    throw_unless(108, equal_slices(message~load_msg_addr(), my_address())); ;;  Make sure NFT was transferred to myself

    throw_unless(109, message~load_coins() == 50000); ;; Correct amount forwarded

    message~skip_bits(1 + 4 + 4 + 64 + 32 + 1 + 1); ;; skip this hot garbage, not important

    throw_unless(110, message~load_uint(32) == 0x05138d91); ;; OP: ownership changed
    throw_unless(111, message~load_uint(64) == 42069); ;; Query id

    slice zero_addr = begin_cell().store_uint(0, 2).end_cell().begin_parse();
    throw_unless(112, equal_slices(message~load_msg_addr(), zero_addr)); ;;  previous owner was zero

    throw_unless(113, message.slice_bits() == 0); ;; Nothing else
}

;; test initialization of an nft
[int, tuple, cell, tuple, int] test_initialize_data() method_id(6) {
    int function_selector = 0; ;; recv_internal

    int item_balance = 0;
    int amount = 100000000;

    cell content = begin_cell()
        .store_uint(69420, 64)
        .end_cell();

    builder message_body = begin_cell()
        .store_slice(get_example_address(2)) ;; new owner address
        .store_ref(content);

    cell message = build_message(0, get_example_address(1), addr_none(), amount, message_body);
    
    tuple stack = unsafe_tuple([item_balance, amount, message, message_body.end_cell().begin_parse()]);

    cell data = begin_cell() ;; initial nft data
        .store_uint(69, 64) ;; index
        .store_slice(get_example_address(1)) ;; collection address
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ test_initialize(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
    throw_unless(100, exit_code == 0); ;; test need to be passed

    var ds = data.begin_parse();

    throw_unless(101, ds~load_uint(64) == 69); ;; index
    throw_unless(102, equal_slices(ds~load_msg_addr(), get_example_address(1))); ;; collection address
    throw_unless(103, equal_slices(ds~load_msg_addr(), get_example_address(2))); ;; owner address
    
    slice expected_content = begin_cell()
        .store_uint(69420, 64)
        .end_cell()
        .begin_parse();
    throw_unless(104, equal_slices(ds~load_ref().begin_parse(), expected_content)); ;; content
}
