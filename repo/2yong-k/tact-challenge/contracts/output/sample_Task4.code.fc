#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Task4.headers.fc";
#include "sample_Task4.stdlib.fc";
#include "sample_Task4.constants.fc";
#include "sample_Task4.storage.fc";

;;
;; Contract Task4 functions
;;

(int, int, slice, slice) $Task4$_contract_init(int $seed) impure inline_ref {
    var (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner)) = (null(), null(), null(), null());
    $self'seed = $seed;
    $self'nftLockTime = 0;
    return ($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner);
}

((int, int, slice, slice), int) $Task4$_fun_time((int, int, slice, slice) $self) impure inline_ref {
    var (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner)) = $self;
    int $remainingTime = ($self'nftLockTime - now());
    if (($remainingTime <= 0)) {
        return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), 0);
    } else {
        return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), $remainingTime);
    }
}

((int, int, slice, slice), slice) $Task4$_fun_nft((int, int, slice, slice) $self) impure inline_ref {
    var (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner)) = $self;
    return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), __tact_not_null($self'nftAddress));
}

((int, int, slice, slice), slice) $Task4$_fun_owner((int, int, slice, slice) $self) impure inline_ref {
    var (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner)) = $self;
    return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), __tact_not_null($self'nftOwner));
}

;;
;; Receivers of a Contract Task4
;;

(((int, int, slice, slice)), ()) $Task4$_internal_binary_OwnershipAssigned((int, int, slice, slice) $self, (int, slice, slice) $msg) impure inline {
    var ($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner) = $self;
    var ($msg'queryId, $msg'prevOwner, $msg'forwardPayload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $tempNftLockTime = ($msg'forwardPayload~load_uint(32) + now());
    slice $tempNftAddress = $ctx'sender;
    slice $tempNftOwner = $msg'prevOwner;
    if (null?($self'nftAddress)) {
        $self'nftLockTime = $tempNftLockTime;
        $self'nftAddress = $tempNftAddress;
        $self'nftOwner = $tempNftOwner;
    } else {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($tempNftAddress, 0, (64 + 2), true, $Transfer$_store_cell($Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload($msg'queryId, $tempNftOwner, $tempNftOwner, null(), 0, $global_emptySlice()))));
    }
    return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), ());
}

(((int, int, slice, slice)), ()) $Task4$_internal_binary_NftWithdrawal((int, int, slice, slice) $self, (int, slice) $msg) impure inline {
    var ($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner) = $self;
    var ($msg'queryId, $msg'nftAddress) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits_nullable_one($self'nftOwner, $ctx'sender) ));
    throw_unless(10905, ( __tact_slice_eq_bits_nullable_one($self'nftAddress, $msg'nftAddress) ));
    if (($self'nftLockTime < now())) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'nftAddress, 0, (128 + 2), true, $Transfer$_store_cell($Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload($msg'queryId, $ctx'sender, my_address(), null(), 0, $global_emptySlice()))));
        $self'nftLockTime = 0;
        $self'nftAddress = null();
        $self'nftOwner = null();
    } else {
        ($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner)~$Task4$_fun_reply(__gen_cell_comment_2d5e30fdcf260ad75ca0b6657ef836f33edb15da3b58bcdf1953da8d2fe02218());
    }
    return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), ());
}

(((int, int, slice, slice)), ()) $Task4$_internal_binary_Deploy((int, int, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner)~$Task4$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'seed, $self'nftLockTime, $self'nftAddress, $self'nftOwner), ());
}

;;
;; Get methods of a Contract Task4
;;

_ %time() method_id(117771) {
    var self = $Task4$_contract_load();
    var res = self~$Task4$_fun_time();
    return res;
}

_ %nft() method_id(73717) {
    var self = $Task4$_contract_load();
    var res = self~$Task4$_fun_nft();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Task4$_contract_load();
    var res = self~$Task4$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmamvbFoHJWDdwW8YKtcAv5s1H3AzEoKp6PvJvBVcsbhbq";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Task4
;;

((int, int, slice, slice), int) $Task4$_contract_router_internal((int, int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive OwnershipAssigned message
    if (op == 85167505) {
        var msg = in_msg~$OwnershipAssigned$_load();
        self~$Task4$_internal_binary_OwnershipAssigned(msg);
        return (self, true);
    }
    
    ;; Receive NftWithdrawal message
    if (op == 2345999593) {
        var msg = in_msg~$NftWithdrawal$_load();
        self~$Task4$_internal_binary_NftWithdrawal(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Task4$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Task4$_contract_load();
    
    ;; Handle operation
    int handled = self~$Task4$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Task4$_contract_store(self);
}
