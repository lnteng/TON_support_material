#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Task3.headers.fc";
#include "sample_Task3.stdlib.fc";
#include "sample_Task3.storage.fc";

;;
;; Contract Task3 functions
;;

(slice, slice, slice, int, int, int) $Task3$_contract_init(slice $admin, slice $newJettonAddressA, slice $newJettonAddressB) impure inline_ref {
    var (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal)) = (null(), null(), null(), null(), null(), null());
    $self'owner = $admin;
    $self'jettonAddressA = $newJettonAddressA;
    $self'jettonAddressB = $newJettonAddressB;
    $self'aAmount = 0;
    $self'bAmount = 0;
    $self'decimal = 1000000000;
    return ($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal);
}

((slice, slice, slice, int, int, int), int) $Task3$_fun_price((slice, slice, slice, int, int, int) $self, slice $jetton) impure inline_ref {
    var (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal)) = $self;
    throw_unless(10905, ( (( __tact_slice_eq_bits($self'jettonAddressA, $jetton) )) ? (true) : (( __tact_slice_eq_bits($self'jettonAddressB, $jetton) )) ));
    if (( __tact_slice_eq_bits($jetton, $self'jettonAddressA) )) {
        return (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal), (($self'bAmount * $self'decimal) / $self'aAmount));
    } else {
        return (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal), (($self'aAmount * $self'decimal) / $self'bAmount));
    }
}

((slice, slice, slice, int, int, int), int) $Task3$_fun_balance((slice, slice, slice, int, int, int) $self, slice $jetton) impure inline_ref {
    var (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal)) = $self;
    throw_unless(10905, ( (( __tact_slice_eq_bits($self'jettonAddressA, $jetton) )) ? (true) : (( __tact_slice_eq_bits($self'jettonAddressB, $jetton) )) ));
    if (( __tact_slice_eq_bits($jetton, $self'jettonAddressA) )) {
        return (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal), $self'aAmount);
    } else {
        return (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal), $self'bAmount);
    }
}

;;
;; Receivers of a Contract Task3
;;

(((slice, slice, slice, int, int, int)), ()) $Task3$_internal_binary_TokenNotification((slice, slice, slice, int, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'forwardPayload) = $msg;
    throw_unless(10905, ( (( __tact_slice_eq_bits($self'jettonAddressA, __tact_context_get_sender()) )) ? (true) : (( __tact_slice_eq_bits($self'jettonAddressB, __tact_context_get_sender()) )) ));
    if (( __tact_slice_eq_bits($self'jettonAddressA, __tact_context_get_sender()) )) {
        if (( __tact_slice_eq_bits($self'owner, $msg'from) )) {
            $self'aAmount = ($self'aAmount + $msg'amount);
        } else {
            int $amountOfBJettonToSend = (((($self'bAmount * $self'decimal) / $self'aAmount) * $msg'amount) / $self'decimal);
            if (($amountOfBJettonToSend > $self'bAmount)) {
                $global_send($SendParameters$_constructor_to_value_mode_body($self'jettonAddressA, 0, (64 + 2), $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, $msg'amount, $msg'from, my_address(), null(), 10000000, $global_emptySlice()))));
            } else {
                $global_send($SendParameters$_constructor_to_value_mode_body($self'jettonAddressB, 0, (64 + 2), $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, $amountOfBJettonToSend, $msg'from, my_address(), null(), 10000000, $global_emptySlice()))));
                $self'aAmount = ($self'aAmount + $msg'amount);
                $self'bAmount = ($self'bAmount - $amountOfBJettonToSend);
            }
        }
    } else {
        if (( __tact_slice_eq_bits($self'owner, $msg'from) )) {
            $self'bAmount = ($self'bAmount + $msg'amount);
        } else {
            int $amountOfAJettonToSend = (((($self'aAmount * $self'decimal) / $self'bAmount) * $msg'amount) / $self'decimal);
            if (($amountOfAJettonToSend > $self'aAmount)) {
                $global_send($SendParameters$_constructor_to_value_mode_body($self'jettonAddressB, 0, (64 + 2), $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, $msg'amount, $msg'from, my_address(), null(), 10000000, $global_emptySlice()))));
            } else {
                $global_send($SendParameters$_constructor_to_value_mode_body($self'jettonAddressA, 0, (64 + 2), $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, $amountOfAJettonToSend, $msg'from, my_address(), null(), 10000000, $global_emptySlice()))));
                $self'bAmount = ($self'bAmount + $msg'amount);
                $self'aAmount = ($self'aAmount - $amountOfAJettonToSend);
            }
        }
    }
    return (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal), ());
}

(((slice, slice, slice, int, int, int)), ()) $Task3$_internal_binary_Deploy((slice, slice, slice, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal)~$Task3$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'jettonAddressA, $self'jettonAddressB, $self'aAmount, $self'bAmount, $self'decimal), ());
}

;;
;; Get methods of a Contract Task3
;;

_ %price(slice $$jetton) method_id(120091) {
    slice $jetton = __tact_verify_address($$jetton);
    var self = $Task3$_contract_load();
    var res = self~$Task3$_fun_price($jetton);
    return res;
}

_ %balance(slice $$jetton) method_id(104128) {
    slice $jetton = __tact_verify_address($$jetton);
    var self = $Task3$_contract_load();
    var res = self~$Task3$_fun_balance($jetton);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRVmkK5W9jPdfW6T1pbS2uMuR5u6JL6aNeay54djU81zQ";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Task3
;;

((slice, slice, slice, int, int, int), int) $Task3$_contract_router_internal((slice, slice, slice, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TokenNotification message
    if (op == 1935855772) {
        var msg = in_msg~$TokenNotification$_load();
        self~$Task3$_internal_binary_TokenNotification(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Task3$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Task3$_contract_load();
    
    ;; Handle operation
    int handled = self~$Task3$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Task3$_contract_store(self);
}
