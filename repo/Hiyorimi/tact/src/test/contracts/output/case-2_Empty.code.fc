#pragma version >=0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

tuple $__gen_Empty_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

tuple __gen_load_Empty() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $__gen_Empty_init();
    }
}

() __gen_store_Empty(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

(tuple, int) __gen_router_Empty(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Load contract data
    var self = __gen_load_Empty();
    
    ;; Handle operation
    int handled = self~__gen_router_Empty(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_Empty(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmZLdxNro7ifCmKr5xZtr8fZ3LpQ9bhC9XTnhA69BPREb9";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
