#pragma version >=0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    return b.end_cell().begin_parse();
}

slice __tact_compute_contract_address(int chain, cell code, cell data) inline {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    return __tact_create_address(chain, hash);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

(cell, cell) __gen_StateInit_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

builder __gen_write_$init$B(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

tuple $__gen_A_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

tuple __gen_load_A() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $__gen_A_init();
    }
}

() __gen_store_A(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;; String "Message"
slice __gen_str_796354186() asm "B{b5ee9c7241010101000900000e4d657373616765b15ae930} B>boc <s PUSHSLICE";

slice $contractAddress((cell, cell) $s) impure inline_ref {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

cell $__gen_String_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

(cell, cell) $__gen_B_init_child(cell sys', slice $parent) {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: B
    cell mine = __tact_dict_get_code(source, 26758);
    contracts = __tact_dict_set_code(contracts, 26758, mine);
    
    ;; Contract Code: C
    cell code_30887 = __tact_dict_get_code(source, 30887);
    contracts = __tact_dict_set_code(contracts, 30887, code_30887);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = __gen_write_$init$B(b, ($parent));
    return (mine, b.end_cell());
}

(cell, cell) $__gen_A_getNext(tuple $self) impure inline_ref {
    var ($self) = $self;
    return $__gen_B_init_child(__tact_context_sys, my_address());
}

_ $__gen_get_getNext() method_id(74105) {
    var self = __gen_load_A();
    var res = $__gen_A_getNext(self);
    return __gen_StateInit_to_external(res);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline {
    return (bounce, to, value, mode, body, code, data);
}

(tuple, ()) $__gen_A_receive_comment_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d(tuple $self) impure inline {
    var $self = $self;
    var ($init'code, $init'data) = $__gen_B_init_child(__tact_context_sys, my_address());
    slice $address = $contractAddress(($init'code, $init'data));
    $send(__gen_constructor_SendParameters$value_to_mode_bounce_code_data_body(0, $address, (64 + 2), true, $init'code, $init'data, $__gen_String_asComment(__gen_str_796354186())));
    return ($self, ());
}

(tuple, int) __gen_router_A(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Message" message
        if (text_op == 0xb41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d) {
            self~$__gen_A_receive_comment_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Load contract data
    var self = __gen_load_A();
    
    ;; Handle operation
    int handled = self~__gen_router_A(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_A(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmPzNyyrPY52bmn3viB81xBtv7kiRfiQWUnVtkX2Tkdqy9";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
