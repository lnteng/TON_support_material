PROGRAM{
  DECLPROC __tact_string_builder_start
  DECLPROC __tact_string_builder_start_comment
  DECLPROC __tact_string_builder_start_string
  DECLPROC __tact_string_builder_end
  DECLPROC __tact_string_builder_end_slice
  DECLPROC __tact_string_builder_append
  DECLPROC __tact_int_to_string
  DECLPROC __tact_float_to_string
  DECLPROC $__gen_StringsTester_init
  DECLPROC __gen_load_StringsTester
  DECLPROC __gen_store_StringsTester
  DECLPROC $__gen_Builder_asSlice
  DECLPROC $__gen_Slice_fromBase64
  DECLPROC $__gen_String_fromBase64
  DECLPROC $__gen_StringsTester_constantString
  93932 DECLMETHOD $__gen_get_constantString
  DECLPROC $__gen_StringsTester_constantStringUnicode
  94939 DECLMETHOD $__gen_get_constantStringUnicode
  DECLPROC $__gen_StringsTester_constantStringUnicodeLong
  104680 DECLMETHOD $__gen_get_constantStringUnicodeLong
  DECLPROC $__gen_StringsTester_dynamicStringCell
  122225 DECLMETHOD $__gen_get_dynamicStringCell
  DECLPROC $__gen_StringsTester_dynamicCommentCell
  122531 DECLMETHOD $__gen_get_dynamicCommentCell
  DECLPROC $__gen_StringsTester_dynamicCommentCellLarge
  74771 DECLMETHOD $__gen_get_dynamicCommentCellLarge
  DECLPROC $__gen_StringsTester_dynamicCommentStringLarge
  74191 DECLMETHOD $__gen_get_dynamicCommentStringLarge
  DECLPROC $__gen_StringsTester_stringWithNumber
  68752 DECLMETHOD $__gen_get_stringWithNumber
  DECLPROC $__gen_StringsTester_stringWithNegativeNumber
  82914 DECLMETHOD $__gen_get_stringWithNegativeNumber
  DECLPROC $__gen_StringsTester_stringWithLargeNumber
  94811 DECLMETHOD $__gen_get_stringWithLargeNumber
  DECLPROC $__gen_StringsTester_stringWithFloat
  80064 DECLMETHOD $__gen_get_stringWithFloat
  DECLPROC $__gen_StringsTester_base64
  71427 DECLMETHOD $__gen_get_base64
  DECLPROC $__gen_StringsTester_processBase64
  128362 DECLMETHOD $__gen_get_processBase64
  DECLPROC $__gen_StringsTester_receive
  DECLPROC __gen_router_StringsTester
  DECLPROC recv_internal
  113617 DECLMETHOD supported_interfaces
  DECLPROC get_abi_ipfs
  DECLPROC lazy_deployment_completed
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sys
  __tact_string_builder_start PROCINLINE:<{
    NIL
    SWAP
    TPUSH
    PUSHNULL
    TPUSH
  }>
  __tact_string_builder_start_comment PROCINLINE:<{
    NEWC
    0 PUSHINT
    SWAP
    32 STU
    __tact_string_builder_start INLINECALLDICT
  }>
  __tact_string_builder_start_string PROCINLINE:<{
    NEWC
    __tact_string_builder_start INLINECALLDICT
  }>
  __tact_string_builder_end PROCINLINE:<{
    UNCONS
    SWAP
    ENDC
    WHILE:<{
      OVER
      ISNULL
      NOT
    }>DO<{
      SWAP
      UNCONS
      -ROT
      STREF
      ENDC
    }>
    NIP
  }>
  __tact_string_builder_end_slice PROCINLINE:<{
    __tact_string_builder_end INLINECALLDICT
    CTOS
  }>
  __tact_string_builder_append PROCREF:<{
    DUP
    SREFS
    OVER
    SBITS
    WHILE:<{
      DUP
      0 GTINT
      s2 PUSH
      0 GTINT
      OR
    }>DO<{
      s0 s3 XCHG
      UNCONS
      127 PUSHINT
      s2 PUSH
      BBITS
      3 RSHIFT#
      SUB
      s0 s5 XCHG
      3 RSHIFT#
      s5 s5 XCPU
      MIN
      DUP
      0 GTINT
      IF:<{
        DUP
        3 LSHIFT#
        s1 s5 XCHG
        LDSLICEX
        s3 s3 XCHG2
        STSLICER
        s0 s1 s4 XCHG3
      }>
      -ROT
      CONS
      s4 s1 PUSH2
      SUB
      0 GTINT
      IF:<{
        NEWC
        SWAP
        CONS
        s4 s4 XCHG2
        SUB
        3 LSHIFT#
      }>ELSE<{
        NIP
        s3 POP
        0 GTINT
        IF:<{
          LDREF
          DROP
          CTOS
          DUP
          SREFS
          OVER
          SBITS
        }>ELSE<{
          0 PUSHINT
          DUP
        }>
      }>
    }>
    3 BLKDROP
  }>
  __tact_int_to_string PROCREF:<{
    NEWC
    OVER
    0 LESSINT
    IF:<{
      45 PUSHINT
      SWAP
      8 STU
      SWAP
      NEGATE
      SWAP
    }>
    OVER
    1000000000000000000000000000000 PUSHINTX
    LESS
    IF:<{
      0 PUSHINT
      DUP
      1 PUSHINT
      UNTIL:<{
        s0 s4 XCHG
        10 PUSHINT
        DIVMOD
        48 ADDCONST
        s5 PUSH
        MUL
        s1 s2 XCHG
        ADD
        s0 s4 XCHG
        8 LSHIFT#
        s0 s2 XCHG
        INC
        OVER
        0 EQINT
        s5 s3 s0 XCHG3
      }>
      DROP
      s3 POP
      3 LSHIFT#
      STUX
    }>ELSE<{
      NIL
      0 PUSHINT
      UNTIL:<{
        s3 PUSH
        10 PUSHINT
        MOD
        s1 s2 XCHG
        TPUSH
        SWAP
        INC
        s0 s3 XCHG
        10 PUSHINT
        DIV
        DUP
        0 EQINT
        s1 s4 XCHG
      }>
      s3 POP
      s2 PUSH
      DEC
      s0 s3 XCHG
      REPEAT:<{
        s0 s2 PUSH2
        INDEXVAR
        48 ADDCONST
        ROT
        8 STU
        s0 s2 XCHG
        DEC
        -ROT
      }>
      DROP
      NIP
    }>
    ENDC
    CTOS
  }>
  __tact_float_to_string PROCREF:<{
    DUP
    1 LESSINT
    OVER
    77 GTINT
    OR
    134 THROWIF
    NEWC
    s2 PUSH
    0 LESSINT
    IF:<{
      45 PUSHINT
      SWAP
      8 STU
      s0 s2 XCHG
      NEGATE
      s0 s2 XCHG
    }>
    TRUE
    0 PUSHINT
    NIL
    s0 s4 XCHG
    REPEAT:<{
      s0 s4 XCHG
      10 PUSHINT
      DIVMOD
      DUP
      0 EQINT
      s3 s(-1) PUXC
      AND
      NOT
      IF:<{
        FALSE
        s3 POP
        48 ADDCONST
        s1 s4 XCHG
        TPUSH
        s0 s4 XCHG
        INC
        s0 s4 XCHG
        s0 s3 XCHG
      }>ELSE<{
        DROP
      }>
      s0 s4 XCHG
    }>
    SWAP
    NOT
    IF:<{
      s0 s2 XCHG
      46 PUSHINT
      TPUSH
      s0 s2 XCHG
      INC
    }>
    UNTIL:<{
      s0 s3 XCHG
      10 PUSHINT
      DIVMOD
      48 ADDCONST
      s1 s3 XCHG
      TPUSH
      s0 s3 XCHG
      INC
      s2 PUSH
      0 EQINT
      s3 s4 XCHG
    }>
    s3 POP
    s2 PUSH
    DEC
    s0 s3 XCHG
    REPEAT:<{
      s1 s2 PUSH2
      INDEXVAR
      SWAP
      8 STU
      s0 s2 XCHG
      DEC
      s0 s2 XCHG
    }>
    2 1 BLKDROP2
    ENDC
    CTOS
  }>
  $__gen_StringsTester_init PROCREF:<{
    PUSHNULL
  }>
  __gen_load_StringsTester PROCINLINE:<{
    c4 PUSH
    CTOS
    LDREF
    SWAP
    __tact_context_sys SETGLOB
    1 LDI
    DROP
    IF:<{
      PUSHNULL
    }>ELSE<{
      $__gen_StringsTester_init INLINECALLDICT
    }>
  }>
  __gen_store_StringsTester PROCINLINE:<{
    DROP
    NEWC
    __tact_context_sys GETGLOB
    SWAP
    STREF
    TRUE
    SWAP
    1 STI
    ENDC
    c4 POP
  }>
  $__gen_Builder_asSlice PROCREF:<{
    ENDC
    CTOS
  }>
  $__gen_Slice_fromBase64 PROCREF:<{
    DUP
    SBITS
    3 RSHIFT#
    NEWC
    SWAP
    REPEAT:<{
      SWAP
      8 LDU
      OVER
      64 GTINT
      s2 PUSH
      91 LESSINT
      AND
      IF:<{
        SWAP
        -65 ADDCONST
        ROT
        6 STU
      }>ELSE<{
        OVER
        96 GTINT
        s2 PUSH
        123 LESSINT
        AND
        IF:<{
          SWAP
          -71 ADDCONST
          ROT
          6 STU
        }>ELSE<{
          OVER
          47 GTINT
          s2 PUSH
          58 LESSINT
          AND
          IF:<{
            SWAP
            4 ADDCONST
            ROT
            6 STU
          }>ELSE<{
            OVER
            45 EQINT
            s2 PUSH
            43 EQINT
            OR
            IF:<{
              62 PUSHINT
              s2 POP
              s0 s2 XCHG
              6 STU
            }>ELSE<{
              OVER
              95 EQINT
              s2 PUSH
              47 EQINT
              OR
              IF:<{
                63 PUSHINT
                s2 POP
                s0 s2 XCHG
                6 STU
              }>ELSE<{
                SWAP
                61 EQINT
                IFNOT:<{
                  134 THROW
                }>
                SWAP
              }>
            }>
          }>
        }>
      }>
    }>
    NIP
    DUP
    BBITS
    DUP
    3 MODPOW2#
    DUP
    0 NEQINT
    IFJMP:<{
      s0 s2 XCHG
      $__gen_Builder_asSlice INLINECALLDICT
      s0 s2 XCHG
      SUB
      LDSLICEX
      DROP
    }>
    2DROP
    $__gen_Builder_asSlice INLINECALLDICT
  }>
  $__gen_String_fromBase64 PROCREF:<{
    $__gen_Slice_fromBase64 INLINECALLDICT
  }>
  $__gen_StringsTester_constantString PROCREF:<{
    DROP
    B{b5ee9c7241010101000d0000167465737420737472696e67ee608f50} B>boc <s PUSHSLICE
  }>
  $__gen_get_constantString PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_constantString INLINECALLDICT
  }>
  $__gen_StringsTester_constantStringUnicode PROCREF:<{
    DROP
    B{b5ee9c7241010101001a000030d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d8d539ad} B>boc <s PUSHSLICE
  }>
  $__gen_get_constantStringUnicode PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_constantStringUnicode INLINECALLDICT
  }>
  $__gen_StringsTester_constantStringUnicodeLong PROCREF:<{
    DROP
    B{b5ee9c72410206010002fa0001fed0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f918020d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b80101fed0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d182200201fed0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d180200301fef09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd10401fe80d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b50500dcd18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0918e6a} B>boc <s PUSHSLICE
  }>
  $__gen_get_constantStringUnicodeLong PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_constantStringUnicodeLong INLINECALLDICT
  }>
  $__gen_StringsTester_dynamicStringCell PROCREF:<{
    DROP
    __tact_string_builder_start_string INLINECALLDICT
    B{b5ee9c7241010101000800000c48656c6c6f21a44219b3} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end INLINECALLDICT
  }>
  $__gen_get_dynamicStringCell PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_dynamicStringCell INLINECALLDICT
  }>
  $__gen_StringsTester_dynamicCommentCell PROCREF:<{
    DROP
    __tact_string_builder_start_comment INLINECALLDICT
    B{b5ee9c7241010101001c000034536f6d657468696e6720736f6d657468696e6720776f726c64212a90ca7f} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end INLINECALLDICT
  }>
  $__gen_get_dynamicCommentCell PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_dynamicCommentCell INLINECALLDICT
  }>
  $__gen_StringsTester_dynamicCommentCellLarge PROCREF:<{
    DROP
    __tact_string_builder_start_string INLINECALLDICT
    B{b5ee9c7241010101000800000c48656c6c6f21a44219b3} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    B{b5ee9c72410206010002fa0001fed0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f918020d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b80101fed0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d182200201fed0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d180200301fef09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd10401fe80d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b50500dcd18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0918e6a} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end INLINECALLDICT
  }>
  $__gen_get_dynamicCommentCellLarge PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_dynamicCommentCellLarge INLINECALLDICT
  }>
  $__gen_StringsTester_dynamicCommentStringLarge PROCREF:<{
    DROP
    __tact_string_builder_start_string INLINECALLDICT
    B{b5ee9c7241010101000800000c48656c6c6f21a44219b3} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    B{b5ee9c72410206010002fa0001fed0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f918020d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b80101fed0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d182200201fed0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d180200301fef09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd10401fe80d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b50500dcd18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0918e6a} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end_slice INLINECALLDICT
  }>
  $__gen_get_dynamicCommentStringLarge PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_dynamicCommentStringLarge INLINECALLDICT
  }>
  $__gen_StringsTester_stringWithNumber PROCREF:<{
    DROP
    __tact_string_builder_start_string INLINECALLDICT
    B{b5ee9c7241010101001700002a48656c6c6f2c20796f75722062616c616e63653a201d628127} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    123 PUSHINT
    __tact_int_to_string INLINECALLDICT
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end_slice INLINECALLDICT
  }>
  $__gen_get_stringWithNumber PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_stringWithNumber INLINECALLDICT
  }>
  $__gen_StringsTester_stringWithNegativeNumber PROCREF:<{
    DROP
    __tact_string_builder_start_string INLINECALLDICT
    B{b5ee9c7241010101001700002a48656c6c6f2c20796f75722062616c616e63653a201d628127} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    -123 PUSHINT
    __tact_int_to_string INLINECALLDICT
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end_slice INLINECALLDICT
  }>
  $__gen_get_stringWithNegativeNumber PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_stringWithNegativeNumber INLINECALLDICT
  }>
  $__gen_StringsTester_stringWithLargeNumber PROCREF:<{
    DROP
    __tact_string_builder_start_string INLINECALLDICT
    B{b5ee9c7241010101001700002a48656c6c6f2c20796f75722062616c616e63653a201d628127} B>boc <s PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    1000000000000000000000000000000000000000000000000000000000000 PUSHINTX
    __tact_int_to_string INLINECALLDICT
    __tact_string_builder_append INLINECALLDICT
    __tact_string_builder_end_slice INLINECALLDICT
  }>
  $__gen_get_stringWithLargeNumber PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_stringWithLargeNumber INLINECALLDICT
  }>
  $__gen_StringsTester_stringWithFloat PROCREF:<{
    DROP
    95 PUSHINT
    1 PUSHINT
    __tact_float_to_string INLINECALLDICT
  }>
  $__gen_get_stringWithFloat PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_stringWithFloat INLINECALLDICT
  }>
  $__gen_StringsTester_base64 PROCREF:<{
    DROP
    B{b5ee9c72410101010026000048545746756553426f5957356b637942745957746c494778705a32683049486476636d7375ff762436} B>boc <s PUSHSLICE
    $__gen_String_fromBase64 INLINECALLDICT
  }>
  $__gen_get_base64 PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    $__gen_StringsTester_base64 INLINECALLDICT
  }>
  $__gen_StringsTester_processBase64 PROCREF:<{
    NIP
    $__gen_String_fromBase64 INLINECALLDICT
  }>
  $__gen_get_processBase64 PROC:<{
    __gen_load_StringsTester INLINECALLDICT
    SWAP
    $__gen_StringsTester_processBase64 INLINECALLDICT
  }>
  $__gen_StringsTester_receive PROCINLINE:<{
  }>
  __gen_router_StringsTester PROCREF:<{
    0 PUSHINT
    OVER
    SBITS
    31 GTINT
    IF:<{
      DROP
      DUP
      32 PLDU
    }>
    s0 s2 XCHG
    IFJMP:<{
      2DROP
      TRUE
    }>
    SWAP
    0 EQINT
    SWAP
    SBITS
    33 LESSINT
    AND
    IFJMP:<{
      $__gen_StringsTester_receive INLINECALLDICT
      TRUE
    }>
    FALSE
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    1 EQINT
    IF:<{
      TRUE
    }>ELSE<{
      FALSE
    }>
    SWAP
    LDMSGADDR
    s2 PUSH
    s5 s5 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    __gen_load_StringsTester INLINECALLDICT
    -ROT
    __gen_router_StringsTester INLINECALLDICT
    DROP
    __gen_store_StringsTester INLINECALLDICT
  }>
  supported_interfaces PROC:<{
    123515602279859691144772641439386770278 PUSHINT
    209801025412363888721030803524359905849 PUSHINT
    42980537499636128163026532310500881091 PUSHINT
    36993126140238121407019133875791708966 PUSHINT
  }>
  get_abi_ipfs PROC:<{
    x{697066733a2f2f516d6255797464726a78744e7335576d59553548514b544b4a5a615a4a584179566f6d5776577631656a4758416b} PUSHSLICE
  }>
  lazy_deployment_completed PROC:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
  }>
}END>c
