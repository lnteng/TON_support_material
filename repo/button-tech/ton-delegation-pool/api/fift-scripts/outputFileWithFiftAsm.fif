// automatically generated from `/usr/local/bin/ton/lite-client/crypto/smartcont/stdlib.fc` `delegation_pool_v3.fc` 
DECLPROC Status::Init
DECLPROC Status::Delegation
DECLPROC Status::NeedToStakeToElect
DECLPROC Status::NotStakedToElectOnTime
DECLPROC Status::WaitingForNextVset
DECLPROC Status::WaitingToWithdrawFundsFromElector
DECLPROC Status::NeedToWithdrawFundsFromElector
DECLPROC Status::CanWithdrawalFromDelegationPool
DECLPROC Status::ValidatorCanWithdrawRemainingFunds1
DECLPROC Status::ValidatorCanWithdrawRemainingFunds2
DECLPROC Operation::Delegate
DECLPROC Operation::StakeToElect
DECLPROC Operation::RecoverStakedAmount
DECLPROC Operation::StakeCallbackFromElect
DECLPROC Operation::GetCreditsBackFromElect
DECLPROC Operation::CreditsCallbackFromElect
DECLPROC Operation::WithdrawFromDelegationPool
DECLPROC Operation::RecoverRemainingFunds
DECLPROC store_data
DECLPROC ~load_data
DECLPROC get_validator_conf
DECLPROC get_stake_conf
DECLPROC ~credit_to
DECLPROC ~set_stake
DECLPROC contain
DECLPROC allow_withdrawal
DECLPROC ~update_status
DECLPROC withdraw_remaining_funds
DECLPROC withdraw
DECLPROC confirm_refund
DECLPROC recover_stake
DECLPROC confirm_delegation_to_elect
DECLPROC stake_to_elect
DECLPROC return_staked_amount
DECLPROC delegate
DECLPROC recv_internal
DECLPROC recv_external
98735 DECLMETHOD recorded_status
87849 DECLMETHOD remaining_time_to_deadline
114682 DECLMETHOD validator_public_key
90770 DECLMETHOD total_stake
79661 DECLMETHOD delegators_list
78708 DECLMETHOD delegators_list_extended
125048 DECLMETHOD stacked_amount
79065 DECLMETHOD credits_list_extended
DECLPROC returned_stake
Status::Init PROC:<{
  0 PUSHINT
}>
Status::Delegation PROC:<{
  1 PUSHINT
}>
Status::NeedToStakeToElect PROC:<{
  2 PUSHINT
}>
Status::NotStakedToElectOnTime PROC:<{
  4 PUSHINT
}>
Status::WaitingForNextVset PROC:<{
  3 PUSHINT
}>
Status::WaitingToWithdrawFundsFromElector PROC:<{
  6 PUSHINT
}>
Status::NeedToWithdrawFundsFromElector PROC:<{
  5 PUSHINT
}>
Status::CanWithdrawalFromDelegationPool PROC:<{
  7 PUSHINT
}>
Status::ValidatorCanWithdrawRemainingFunds1 PROC:<{
  8 PUSHINT
}>
Status::ValidatorCanWithdrawRemainingFunds2 PROC:<{
  14 PUSHINT
}>
Operation::Delegate PROC:<{
  1413222436 PUSHINT
}>
Operation::StakeToElect PROC:<{
  1699500148 PUSHINT
}>
Operation::RecoverStakedAmount PROC:<{
  1143738403 PUSHINT
}>
Operation::StakeCallbackFromElect PROC:<{
  4084484172 PUSHINT
}>
Operation::GetCreditsBackFromElect PROC:<{
  1499689764 PUSHINT
}>
Operation::CreditsCallbackFromElect PROC:<{
  4184830756 PUSHINT
}>
Operation::WithdrawFromDelegationPool PROC:<{
  2036560676 PUSHINT
}>
Operation::RecoverRemainingFunds PROC:<{
  1750229523 PUSHINT
}>
store_data PROC:<{
  NEWC
  s1 s5 XCHG
  4 STU
  s1 s3 XCHG
  32 STU
  SWAP
  STGRAMS
  256 STU
  STDICT
  ENDC
  c4 POP
}>
~load_data PROC:<{
  LDGRAMS
  256 LDU
  LDDICT
  3 -ROLL
}>
get_validator_conf PROC:<{
  15 PUSHINT
  CONFIGOPTPARAM
  CTOS
  32 LDI
  32 LDI
  32 LDI
  32 PLDI
}>
get_stake_conf PROC:<{
  17 PUSHINT
  CONFIGOPTPARAM
  CTOS
  LDGRAMS
  LDGRAMS
  LDGRAMS
  32 PLDU
}>
~credit_to PROC:<{
  s1 s2 PUSH2
  8 PUSHPOW2
  DICTUGET
  NULLSWAPIFNOT
  IF:<{
    LDGRAMS
    DROP
    ADD
  }>ELSE<{
    DROP
  }>
  NEWC
  SWAP
  STGRAMS
  s0 s2 XCHG
  8 PUSHPOW2
  DICTUSETB
}>
~set_stake PROC:<{
  s3 PUSH
  DICTEMPTY
  IFJMP:<{
    NEWC
    SWAP
    STGRAMS
    256 STU
    s0 s2 XCHG
    8 PUSHPOW2
    DICTUSETB
  }>
  s2 s3 PUSH2
  8 PUSHPOW2
  DICTUGET
  NULLSWAPIFNOT
  IF:<{
    LDGRAMS
    -ROT
    ADD
    SWAP
    256 LDU
    DROP
    s2 s(-1) PUXC
    EQUAL
    409 THROWIFNOT
  }>ELSE<{
    DROP
  }>
  NEWC
  SWAP
  STGRAMS
  256 STU
  s0 s2 XCHG
  8 PUSHPOW2
  DICTUSETB
}>
contain PROC:<{
  FALSE
  -1 PUSHINT
  UNTIL:<{
    s3 PUSH
    16 PUSHINT
    DICTUGETNEXT
    NULLSWAPIFNOT
    NULLSWAPIFNOT
    DUP
    IF:<{
      s0 s2 XCHG
      40 PUSHINT
      SDSKIPFIRST
      256 PLDU
      s4 PUSH
      EQUAL
      IF:<{
        s2 POP
        TRUE
      }>ELSE<{
        s0 s2 XCHG
      }>
    }>ELSE<{
      2SWAP
      DROP
    }>
    SWAP
    NOT
    s1 s2 XCHG
  }>
  s1 s3 XCHG
  3 BLKDROP
}>
allow_withdrawal PROC:<{
  s2 POP
  get_validator_conf CALLDICT
  NIP
  NIP
  NOW
  s3 s2 XCPU
  ADD
  s0 s2 PUXC
  ADD
  s3 s(-1) PUXC
  GREATER
  IFJMP:<{
    4 BLKDROP
    TRUE
  }>
  s2 s1 PUSH2
  GREATER
  IFJMP:<{
    32 PUSHINT
    CONFIGOPTPARAM
    CTOS
    168 PUSHINT
    SDSKIPFIRST
    PLDDICT
    s0 s4 XCHG2
    contain CALLDICT
    IFNOTJMP:<{
      3 BLKDROP
      TRUE
    }>
    ROT
    ADD
    GEQ
    IFJMP:<{
      TRUE
    }>
    FALSE
  }>
  3 BLKDROP
  34 PUSHINT
  CONFIGOPTPARAM
  CTOS
  168 PUSHINT
  SDSKIPFIRST
  PLDDICT
  SWAP
  contain CALLDICT
  IF:<{
    FALSE
  }>ELSE<{
    TRUE
  }>
}>
~update_status PROC:<{
  4 LDU
  32 LDU
  DUP
  NOW
  s0 s3 PUSH2
  LEQ
  IFJMP:<{
    2DROP
    -ROT
  }>
  s4 s0 XCPU
  ADD
  DUP
  Status::NeedToStakeToElect CALLDICT
  EQUAL
  IF:<{
    15 PUSHINT
    CONFIGOPTPARAM
    CTOS
    32 PLDI
    5 MULCONST
    s1 s4 XCHG
    ADD
    s4 s0 PUSH2
    GREATER
    IF:<{
      s3 s0 XCPU
      ADD
    }>ELSE<{
      s0 s3 XCHG
    }>
  }>
  DUP
  Status::NotStakedToElectOnTime CALLDICT
  EQUAL
  IF:<{
    s0 s3 XCHG
    5184000 PUSHINT
    ADD
    s4 s4 XCPU
    GREATER
    IF:<{
      s2 s0 XCPU
      ADD
    }>ELSE<{
      s0 s2 XCHG
    }>
  }>ELSE<{
    s3 s4 XCHG
    s0 s3 XCHG2
    DROP
  }>
  DUP
  Status::WaitingToWithdrawFundsFromElector CALLDICT
  EQUAL
  IF:<{
    s0 s2 XCHG
    LDGRAMS
    NIP
    256 LDU
    DROP
    s2 s3 s(-2) PU2XC
    allow_withdrawal CALLDICT
    IF:<{
      NIP
      NIP
      Status::NeedToWithdrawFundsFromElector CALLDICT
      32 PUSHPOW2DEC
    }>ELSE<{
      s0 s2 XCHG
    }>
  }>ELSE<{
    2SWAP
    DROP
  }>
  OVER
  Status::ValidatorCanWithdrawRemainingFunds1 CALLDICT
  EQUAL
  s2 PUSH
  Status::ValidatorCanWithdrawRemainingFunds2 CALLDICT
  EQUAL
  OR
  IF:<{
    DROP
    32 PUSHPOW2DEC
  }>
}>
withdraw_remaining_funds PROC:<{
  s0 s2 XCHG
  LDGRAMS
  s0 s4 XCHG
  LDGRAMS
  256 LDU
  DROP
  MYADDR
  REWRITESTDADDR
  NIP
  s0 s6 XCHG
  256 LDU
  256 LDU
  s1 s8 PUXC
  EQUAL
  204 THROWIFNOT
  s0 s7 XCHG
  LDREF
  DROP
  CTOS
  9 PUSHPOW2
  PLDSLICEX
  NEWC
  s1 s2 XCHG
  256 STU
  s1 s7 XCHG
  256 STU
  ENDC
  CTOS
  s0 s6 s6 XC2PU
  CHKSIGNS
  205 THROWIFNOT
  ACCEPT
  0 PUSHINT
  DUP
  24 PUSHINT
  NEWC
  6 STU
  s0 s5 XCHG2
  STSLICER
  s0 s3 XCHG2
  STGRAMS
  s1 s3 XCHG
  107 STU
  32 STU
  32 PUSHPOW2DEC
  NEWC
  s1 s4 XCHG
  4 STU
  s1 s3 XCHG
  32 STU
  SWAP
  STGRAMS
  s1 s2 XCHG
  256 STU
  ENDC
  c4 POP
  ENDC
  3 PUSHINT
  SENDRAWMSG
}>
withdraw PROC:<{
  s0 s2 XCHG
  ~load_data CALLDICT
  s0 s3 XCHG
  LDDICT
  DROP
  s4 PUSH
  REWRITESTDADDR
  NIP
  SWAP
  8 PUSHPOW2
  DICTUDELGET
  NULLSWAPIFNOT
  170 THROWIFNOT
  LDGRAMS
  DROP
  0 PUSHINT
  DUP
  24 PUSHINT
  NEWC
  6 STU
  s0 s8 XCHG2
  STSLICER
  ROT
  STGRAMS
  s1 s6 XCHG
  107 STU
  s1 s5 XCHG
  32 STU
  Status::CanWithdrawalFromDelegationPool CALLDICT
  NEWC
  4 STU
  s1 s6 XCHG
  32 STU
  ROT
  STGRAMS
  256 STU
  STDICT
  STDICT
  ENDC
  c4 POP
  ENDC
  64 PUSHINT
  SENDRAWMSG
}>
confirm_refund PROC:<{
  SWAP
  ~load_data CALLDICT
  s3 POP
  ACCEPT
  NEWDICT
  -1 PUSHINT
  UNTIL:<{
    s4 PUSH
    8 PUSHPOW2
    DICTUGETNEXT
    NULLSWAPIFNOT
    NULLSWAPIFNOT
    DUP
    IF:<{
      s0 s2 XCHG
      LDGRAMS
      256 LDU
      ENDS
      s8 s1 PUXC
      MUL
      s6 PUSH
      DIV
      s2 s4 XCHG
      ~credit_to CALLDICT
    }>ELSE<{
      2SWAP
      DROP
    }>
    SWAP
    NOT
    s1 s2 XCHG
  }>
  DROP
  s4 POP
  NOW
  5184000 PUSHINT
  ADD
  Status::CanWithdrawalFromDelegationPool CALLDICT
  NEWC
  4 STU
  32 STU
  ROT
  STGRAMS
  256 STU
  STDICT
  STDICT
  ENDC
  c4 POP
}>
recover_stake PROC:<{
  1 PUSHINT
  CONFIGOPTPARAM
  CTOS
  256 PLDU
  NEWC
  s1 s3 XCHG
  4 STU
  32 STU
  ROT
  STSLICER
  ENDC
  c4 POP
  NOW
  1197831204 PUSHINT
  0 PUSHINT
  50431 PUSHINT
  NEWC
  17 STU
  s1 s4 XCHG
  256 STU
  1000000000 PUSHINT
  STGRAMS
  s1 s3 XCHG
  107 STU
  s1 s2 XCHG
  32 STU
  64 STU
  ENDC
  1 PUSHINT
  SENDRAWMSG
}>
confirm_delegation_to_elect PROC:<{
  34 PUSHINT
  CONFIGOPTPARAM
  DUP
  ISNULL
  IFJMP:<{
    DROP
    15 PUSHINT
    CONFIGOPTPARAM
    CTOS
    32 PLDU
    34 MULCONST
    100 PUSHINT
    DIV
    ADD
    Status::WaitingForNextVset CALLDICT
    NEWC
    4 STU
    32 STU
    SWAP
    STSLICER
    ENDC
    c4 POP
  }>
  NIP
  CTOS
  40 PUSHINT
  SDSKIPFIRST
  32 PLDU
  Status::WaitingForNextVset CALLDICT
  NEWC
  4 STU
  32 STU
  SWAP
  STSLICER
  ENDC
  c4 POP
}>
stake_to_elect PROC:<{
  s0 s3 XCHG
  ~load_data CALLDICT
  s3 POP
  get_stake_conf CALLDICT
  NIP
  s4 s2 PUXC
  GEQ
  150 THROWIFNOT
  s3 s(-1) PUXC
  LEQ
  151 THROWIFNOT
  s0 s5 XCHG
  32 LDU
  32 LDU
  256 LDU
  s2 PUSH
  16 PUSHPOW2
  LESS
  152 THROWIF
  s2 s8 PUXC
  LEQ
  153 THROWIFNOT
  MYADDR
  REWRITESTDADDR
  NIP
  s0 s8 XCHG
  LDREF
  DROP
  DUP
  CTOS
  9 PUSHPOW2
  PLDSLICEX
  1699500148 PUSHINT
  NEWC
  32 STU
  s5 s(-1) PUXC
  32 STU
  s4 s(-1) PUXC
  32 STU
  s1 s10 XCHG
  256 STU
  s2 s(-1) PUXC
  256 STU
  ENDC
  CTOS
  s0 s9 s5 XC2PU
  CHKSIGNS
  154 THROWIFNOT
  1 PUSHINT
  CONFIGOPTPARAM
  DUP
  ISNULL
  155 THROWIF
  CTOS
  256 PLDU
  ACCEPT
  1316189259 PUSHINT
  NEWC
  32 STU
  s4 s(-1) PUXC
  64 STU
  s5 s(-1) PUXC
  256 STU
  s1 s4 XCHG
  32 STU
  s1 s2 XCHG
  32 STU
  256 STU
  s1 s6 XCHG
  STREF
  ENDC
  1 PUSHINT
  0 PUSHINT
  50431 PUSHINT
  NEWC
  17 STU
  s1 s8 XCHG
  256 STU
  s4 PUSH
  STGRAMS
  s1 s7 XCHG
  106 STU
  s1 s6 XCHG
  1 STU
  s1 s5 XCHG
  STREF
  ENDC
  1 PUSHINT
  SENDRAWMSG
  s2 s4 XCHG
  s0 s3 s3 XCHG3
  store_data CALLDICT
}>
return_staked_amount PROC:<{
  s0 s3 XCHG
  ~load_data CALLDICT
  s3 POP
  s3 PUSH
  REWRITESTDADDR
  SWAP
  INC
  141 THROWIF
  s0 s5 XCHG
  256 LDU
  DROP
  s0 s3 XCHG2
  8 PUSHPOW2
  DICTUDELGET
  NULLSWAPIFNOT
  170 THROWIFNOT
  LDGRAMS
  256 LDU
  DROP
  s0 s6 XCHG2
  EQUAL
  192 THROWIFNOT
  s1 s4 XCPU
  SUB
  0 PUSHINT
  DUP
  24 PUSHINT
  NEWC
  6 STU
  s0 s6 XCHG2
  STSLICER
  s0 s6 XCHG2
  STGRAMS
  s1 s4 XCHG
  107 STU
  s1 s4 XCHG
  32 STU
  Status::NotStakedToElectOnTime CALLDICT
  NEWC
  4 STU
  s1 s5 XCHG
  32 STU
  ROT
  STGRAMS
  256 STU
  STDICT
  ENDC
  c4 POP
  ENDC
  64 PUSHINT
  SENDRAWMSG
}>
delegate PROC:<{
  s0 s3 XCHG
  REWRITESTDADDR
  SWAP
  INC
  IFJMP:<{
    6 BLKDROP
  }>
  s0 s5 XCHG
  ~load_data CALLDICT
  s3 POP
  s4 PUSH
  1 LESSINT
  140 THROWIF
  get_stake_conf CALLDICT
  s2 s3 XCHG
  3 BLKDROP
  s2 s5 XCPU
  ADD
  s0 s2 PUXC
  LEQ
  141 THROWIFNOT
  ACCEPT
  s2 s3 XCHG
  s6 s7 s4 XCHG3
  ~set_stake CALLDICT
  s3 s4 XCHG
  s2 s3 XCHG
  store_data CALLDICT
}>
recv_internal PROC:<{
  SWAP
  CTOS
  4 LDU
  SWAP
  1 PUSHINT
  AND
  IFJMP:<{
    3 BLKDROP
  }>
  LDMSGADDR
  DROP
  c4 PUSH
  CTOS
  ~update_status CALLDICT
  s0 s4 XCHG
  32 LDU
  OVER
  Operation::Delegate CALLDICT
  EQUAL
  s3 PUSH
  Status::Delegation CALLDICT
  EQUAL
  AND
  IFJMP:<{
    NIP
    256 LDU
    DROP
    s5 s1 s4 XCHG3
    delegate CALLDICT
  }>
  OVER
  Operation::StakeToElect CALLDICT
  EQUAL
  s3 PUSH
  Status::NeedToStakeToElect CALLDICT
  EQUAL
  AND
  IFJMP:<{
    NIP
    s3 POP
    s4 POP
    s1 s3 s3 XCHG3
    stake_to_elect CALLDICT
  }>
  OVER
  Operation::RecoverStakedAmount CALLDICT
  EQUAL
  s3 PUSH
  Status::NotStakedToElectOnTime CALLDICT
  EQUAL
  AND
  IFJMP:<{
    NIP
    NIP
    s4 POP
    s3 s1 s3 XCHG3
    return_staked_amount CALLDICT
  }>
  OVER
  Operation::StakeCallbackFromElect CALLDICT
  EQUAL
  s3 PUSH
  Status::NeedToStakeToElect CALLDICT
  EQUAL
  AND
  IFJMP:<{
    NIP
    NIP
    s3 POP
    s3 POP
    REWRITESTDADDR
    SWAP
    INC
    141 THROWIF
    1 PUSHINT
    CONFIGOPTPARAM
    DUP
    ISNULL
    IF:<{
      DROP
      -1 PUSHINT
    }>ELSE<{
      CTOS
      256 PLDU
    }>
    EQUAL
    141 THROWIFNOT
    ACCEPT
    64 LDU
    DROP
    confirm_delegation_to_elect CALLDICT
  }>
  OVER
  Operation::GetCreditsBackFromElect CALLDICT
  EQUAL
  s3 PUSH
  Status::NeedToWithdrawFundsFromElector CALLDICT
  EQUAL
  AND
  IFJMP:<{
    2DROP
    s2 POP
    s3 POP
    ACCEPT
    SWAP
    recover_stake CALLDICT
  }>
  OVER
  Operation::CreditsCallbackFromElect CALLDICT
  EQUAL
  s3 PUSH
  Status::NeedToWithdrawFundsFromElector CALLDICT
  EQUAL
  AND
  IFJMP:<{
    3 BLKDROP
    s2 POP
    REWRITESTDADDR
    SWAP
    INC
    141 THROWIF
    1 PUSHINT
    CONFIGOPTPARAM
    DUP
    ISNULL
    IF:<{
      DROP
      -1 PUSHINT
    }>ELSE<{
      CTOS
      256 PLDU
    }>
    EQUAL
    141 THROWIFNOT
    SWAP
    confirm_refund CALLDICT
  }>
  s6 POP
  DUP
  Operation::WithdrawFromDelegationPool CALLDICT
  EQUAL
  s2 PUSH
  Status::CanWithdrawalFromDelegationPool CALLDICT
  EQUAL
  AND
  IFJMP:<{
    2DROP
    s3 POP
    SWAP
    withdraw CALLDICT
  }>
  s4 POP
  Operation::RecoverRemainingFunds CALLDICT
  s1 s4 XCHG
  EQUAL
  s3 PUSH
  Status::ValidatorCanWithdrawRemainingFunds1 CALLDICT
  EQUAL
  s4 PUSH
  Status::ValidatorCanWithdrawRemainingFunds2 CALLDICT
  EQUAL
  OR
  AND
  IFJMP:<{
    s3 s1 s3 XCHG3
    withdraw_remaining_funds CALLDICT
  }>
  4 BLKDROP
}>
recv_external PROC:<{
  c4 PUSH
  CTOS
  4 LDU
  LDGRAMS
  NIP
  32 LDU
  NIP
  256 LDU
  LDDICT
  DROP
  Status::Init CALLDICT
  s1 s3 XCHG
  EQUAL
  101 THROWIFNOT
  MYADDR
  REWRITESTDADDR
  DROP
  INC
  102 THROWIF
  s0 s2 XCHG
  32 LDU
  DROP
  ACCEPT
  Status::Delegation CALLDICT
  NOW
  ROT
  ADD
  2SWAP
  0 PUSHINT
  -ROT
  store_data CALLDICT
}>
recorded_status PROC:<{
  c4 PUSH
  CTOS
  4 LDU
  32 LDU
  DROP
}>
remaining_time_to_deadline PROC:<{
  c4 PUSH
  CTOS
  4 LDU
  NIP
  32 LDU
  DROP
  DUP
  NOW
  SUB
  NOW
  ROT
  LEQ
}>
validator_public_key PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  NIP
  256 PLDU
}>
total_stake PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  DROP
}>
delegators_list PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  NIP
  8 PUSHPOW2
  SDSKIPFIRST
  PLDDICT
  DUP
  DICTEMPTY
  IFJMP:<{
    DROP
    PUSHNULL
  }>
  PUSHNULL
  256 PUSHPOW2DEC
  UNTIL:<{
    s2 PUSH
    8 PUSHPOW2
    DICTUGETPREV
    NULLSWAPIFNOT
    NULLSWAPIFNOT
    s2 POP
    OVER
    IF:<{
      s0 s2 PUXC
      CONS
    }>ELSE<{
      s0 s2 XCHG
    }>
    SWAP
    NOT
    s1 s2 XCHG
  }>
  DROP
  NIP
}>
delegators_list_extended PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  NIP
  8 PUSHPOW2
  SDSKIPFIRST
  PLDDICT
  DUP
  DICTEMPTY
  IFJMP:<{
    DROP
    PUSHNULL
  }>
  PUSHNULL
  256 PUSHPOW2DEC
  UNTIL:<{
    s2 PUSH
    8 PUSHPOW2
    DICTUGETPREV
    NULLSWAPIFNOT
    NULLSWAPIFNOT
    DUP
    IF:<{
      s0 s2 XCHG
      LDGRAMS
      s2 s1 PUXC
      PAIR
      SWAP
      256 LDU
      DROP
      PAIR
      s0 s3 XCHG2
      CONS
    }>ELSE<{
      2SWAP
      DROP
    }>
    SWAP
    NOT
    s1 s2 XCHG
  }>
  DROP
  NIP
}>
stacked_amount PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  NIP
  8 PUSHPOW2
  SDSKIPFIRST
  PLDDICT
  8 PUSHPOW2
  DICTUGET
  NULLSWAPIFNOT
  IF:<{
    LDGRAMS
    DROP
  }>ELSE<{
    DROP
    0 PUSHINT
  }>
}>
credits_list_extended PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  NIP
  256 LDU
  NIP
  DUP
  SEMPTY
  IFJMP:<{
    DROP
    PUSHNULL
  }>
  LDDICT
  NIP
  DUP
  SEMPTY
  IFJMP:<{
    DROP
    PUSHNULL
  }>
  LDDICT
  DROP
  PUSHNULL
  -1 PUSHINT
  UNTIL:<{
    s2 PUSH
    8 PUSHPOW2
    DICTUGETNEXT
    NULLSWAPIFNOT
    NULLSWAPIFNOT
    DUP
    IF:<{
      s0 s2 XCHG
      LDGRAMS
      DROP
      s1 s(-1) PUXC
      PAIR
      s0 s3 XCHG2
      CONS
    }>ELSE<{
      2SWAP
      DROP
    }>
    SWAP
    NOT
    s1 s2 XCHG
  }>
  DROP
  NIP
}>
returned_stake PROC:<{
  c4 PUSH
  CTOS
  36 PUSHINT
  SDSKIPFIRST
  LDGRAMS
  NIP
  256 LDU
  NIP
  DUP
  SEMPTY
  IFJMP:<{
    2DROP
    0 PUSHINT
  }>
  LDDICT
  NIP
  DUP
  SEMPTY
  IFJMP:<{
    2DROP
    0 PUSHINT
  }>
  LDDICT
  DROP
  8 PUSHPOW2
  DICTUGET
  NULLSWAPIFNOT
  IFNOTJMP:<{
    DROP
    0 PUSHINT
  }>
  LDGRAMS
  DROP
}>
