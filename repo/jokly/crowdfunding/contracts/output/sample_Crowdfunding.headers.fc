;;
;; Header files for Crowdfunding
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $CrowdfundingParams$_store
builder $CrowdfundingParams$_store(builder build_0, (slice, slice, int, int, int, slice) v) inline_ref;

;; $CrowdfundingParams$_load
(slice, ((slice, slice, int, int, int, slice))) $CrowdfundingParams$_load(slice sc_0) inline_ref;

;; $StartCrowdfunding$_load
(slice, ((slice, (slice, slice, int, int, int, slice)))) $StartCrowdfunding$_load(slice sc_0) inline;

;; $Crowdfunding$_store
builder $Crowdfunding$_store(builder build_0, (slice, int, (slice, slice, int, int, int, slice), cell) v) inline;

;; $Crowdfunding$_load
(slice, ((slice, int, (slice, slice, int, int, int, slice), cell))) $Crowdfunding$_load(slice sc_0) inline;

;; $CrowdfundingParams$_to_tuple
tuple $CrowdfundingParams$_to_tuple(((slice, slice, int, int, int, slice)) v) inline;

;; $CrowdfundingInfo$_to_external
(tuple, int) $CrowdfundingInfo$_to_external((((slice, slice, int, int, int, slice), int)) v) inline;

;; $Crowdfunding$init$_load
(slice, ((slice, int))) $Crowdfunding$init$_load(slice sc_0) inline;

;; $CrowdfundingParams$_constructor_title_description_targetContribution_minContribution_deadline_beneficiary
((slice, slice, int, int, int, slice)) $CrowdfundingParams$_constructor_title_description_targetContribution_minContribution_deadline_beneficiary(slice title, slice description, int targetContribution, int minContribution, int deadline, slice beneficiary) inline;

;; $Crowdfunding$_contract_init
(slice, int, (slice, slice, int, int, int, slice), cell) $Crowdfunding$_contract_init(slice $factory, int $seqno) impure inline_ref;

;; $Crowdfunding$_contract_load
(slice, int, (slice, slice, int, int, int, slice), cell) $Crowdfunding$_contract_load() impure inline_ref;

;; $Crowdfunding$_contract_store
() $Crowdfunding$_contract_store((slice, int, (slice, slice, int, int, int, slice), cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $CrowdfundingInfo$_constructor_params_currentContribution
(((slice, slice, int, int, int, slice), int)) $CrowdfundingInfo$_constructor_params_currentContribution((slice, slice, int, int, int, slice) params, int currentContribution) inline;

;; $Crowdfunding$_fun_info
((slice, int, (slice, slice, int, int, int, slice), cell), ((slice, slice, int, int, int, slice), int)) $Crowdfunding$_fun_info((slice, int, (slice, slice, int, int, int, slice), cell) $self) impure inline_ref;

;; $Crowdfunding$_fun_requireOwner
((slice, int, (slice, slice, int, int, int, slice), cell), ()) $Crowdfunding$_fun_requireOwner((slice, int, (slice, slice, int, int, int, slice), cell) $self) impure inline_ref;

;; $Crowdfunding$_fun_owner
((slice, int, (slice, slice, int, int, int, slice), cell), slice) $Crowdfunding$_fun_owner((slice, int, (slice, slice, int, int, int, slice), cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline;
