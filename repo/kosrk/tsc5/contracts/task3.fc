#include "imports/stdlib.fc";

;; Inbound Message Structure
;; _ new_version:uint32 migration_code:(Maybe ^Cell) = MigrationPayload;
;; _ expected_version:uint32 new_code:(Maybe ^Cell) migrations:(HashmapE 32 MigrationPayload) payload:^Cell = InternalMsgBody;

cell wrap_storage(int version_id, cell storage) inline {
    return begin_cell()
            .store_uint(version_id, 32)
            .store_ref(storage)
            .end_cell();
}

;; <<<<< Custom version-specific code begins
        ;; This section (everything between << and >> characters) will be fully substituted for each version.
        ;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
        ;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
        ;; Refer to the "3-example" directory for more version examples.

        ;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
slice cs = storage.begin_parse();
        int current_amount = cs.preload_uint(32);
return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) impure { ;; it's just a placeholder that is required for correct compilation
        return old_storage;
        }

;; Custom version-specific code ends >>>>>

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    int expected_version = in_msg_body~load_uint(32);


    ;; ---
    ;; here you should check if it's the first call or not based on `expected_version` as stated in the task
    ;; if it is the first call, wrap the storage and finish execution by returning from the function
    ;; ---
    if expected_version == 0 { ;; first call ;; TODO: check for empty migaration dict
        var storage = get_data(); ;; get clear storage of contract
        set_data(wrap_storage(1, storage));
        return();
    }

    var new_code = in_msg_body~load_maybe_ref();
    cell migrations = in_msg_body~load_dict();
    cell payload = in_msg_body.preload_ref();

    slice ds = get_data().begin_parse();
    int current_version = ds~load_uint(32);
    cell storage = ds.preload_ref();

    if expected_version == current_version {
        storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
        set_data(wrap_storage(expected_version,storage));
        return();
    }

    throw_if(200, cell_null?(new_code));

    (int start_version, slice cs, int f) = migrations.udict_get_next?(32, -1);
    while f {
        int end_version = cs~load_uint(32);
        if start_version == current_version { ;; migration is presented
            var migration_code = cs.preload_maybe_ref();
            if ~ cell_null?(migration_code) { ;; need storage migration
                set_c3(bless(migration_code.begin_parse()));
                storage = migrate_one(storage); ;; migrate storage
            }
            current_version = end_version;
            if current_version == expected_version { ;; storage updated
                set_code(new_code);
                set_c3(bless(new_code.begin_parse()));
                storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
                set_data(wrap_storage(expected_version,storage));
                return();
            }
        }
        (start_version, cs, f) = migrations.udict_get_next?(32, start_version);
    };
    throw(400); ;; can not find migration
}

cell get_storage() inline {
    return get_data().begin_parse().preload_ref();
}

;; Return the current version of the smart contract
int version() method_id {
        return get_data().begin_parse().preload_uint(32);
        }

