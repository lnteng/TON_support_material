#include "stdlib.fc";

cell get_storage() {
    slice cs = get_data().begin_parse();

    ;; Logic to extract the storage on which the version-specific process_message and get-methods operate
    cell storage = cs~load_ref();

    return storage;
}

cell wrap_storage(int version_id, cell storage) impure {
    return begin_cell()
            .store_uint(version_id, 32)
            .store_ref(storage)
            .end_cell();
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure method_id {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(40);

    while (in_msg_body.slice_bits() >= 40) {
        int received_amount = in_msg_body~load_int(40);
        current_amount += received_amount;
    }

    return begin_cell().store_uint(current_amount, 40).end_cell();
}

;; We renamed "get_amount" to "get_raw_amount"
;; and removed "method_id" from its method declaration,
;; thus marking it as not intended to be used by outside code.
;; As industry leaders, we are not afraid to cut on functionality.
int get_raw_amount() {
    cell storage = get_storage();
    slice cs = storage.begin_parse();
    int amount = cs.preload_uint(40);
    return amount;
}
;; Methods might arbitrarily change from version to version,
;; but it probably won't be a problem in versioning implementation

int get_USD_amount() method_id {
    return get_raw_amount() / 100;
    ;; get_raw_amount returns amount in cents in this version,
    ;; so to get a USD amount now, we need to divide it by 100
}

;; Custom version-specific code ends >>>>>

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

;; Return the current version of the smart contract
int version() method_id {
        return get_data().begin_parse().preload_uint(32);
        }