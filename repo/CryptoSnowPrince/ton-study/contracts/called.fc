#include "stdlib.fc";

_ unpack_state() inline_ref {
  var ds = begin_parse(get_data());
  var res = (ds~load_uint(32));
  ds.end_parse();
  return res;
}

_ pack_state(int val) inline_ref {
  return begin_cell()
    .store_uint(val, 32)
  .end_cell();
}

_ get_Val() method_id {        ;; getter declaration - returns int as result
  int val = unpack_state();
  return val;
}

_ set_Val (int val) impure {
  set_data(pack_state(val));
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {  ;; well known function signature
  ifnot (in_msg_body.slice_empty?()) {
    throw(1010);
    int op = in_msg_body~load_uint(32);                                     ;; parse the operation type encoded in the beginning of msg body
    if (op == 1) {                                                          ;; handle op #1 = set admin
      int val = in_msg_body~load_uint(32);                                     ;; parse the operation type encoded in the beginning of msg body
      set_Val(val);
      return ();
    }
    if (op == 2) {
      throw(1001);
    }
    else {
      throw(1002);
    }
  }
  else {
    throw(1011);
  }
}
