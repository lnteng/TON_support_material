#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Task5.headers.fc";
#include "sample_Task5.stdlib.fc";
#include "sample_Task5.storage.fc";

;;
;; Contract Task5 functions
;;

(cell, int, int) $Task5$_contract_init(int $seed, slice $owner) impure inline_ref {
    var (($self'nfts, $self'seed, $self'owner)) = (null(), null(), null());
    slice $a = __tact_address_to_slice($owner);
    $a~load_uint(11);
    $self'owner = $a~load_uint(256);
    $self'seed = 0;
    return ($self'nfts, $self'seed, $self'owner);
}

((cell, int, int), int) $Task5$_fun_profit((cell, int, int) $self) impure inline_ref {
    var (($self'nfts, $self'seed, $self'owner)) = $self;
    return (($self'nfts, $self'seed, $self'owner), max(0, (__tact_my_balance() - 100000000)));
}

((cell, int, int), cell) $Task5$_fun_nfts((cell, int, int) $self) impure inline_ref {
    var (($self'nfts, $self'seed, $self'owner)) = $self;
    return (($self'nfts, $self'seed, $self'owner), $self'nfts);
}

;;
;; Receivers of a Contract Task5
;;

(((cell, int, int)), ()) $Task5$_internal_binary_OwnershipAssigned((cell, int, int) $self, (int, slice, slice) $msg) impure inline {
    var ($self'nfts, $self'seed, $self'owner) = $self;
    var ($msg'queryId, $msg'prevOwner, $msg'forwardPayload) = $msg;
    slice $a = __tact_address_to_slice(__tact_context_get_sender());
    $a~load_uint(11);
    int $b = $a~load_uint(256);
    $a = __tact_address_to_slice($msg'prevOwner);
    $a~load_uint(11);
    int $c = $a~load_uint(256);
    if (($c == $self'owner)) {
        $self'nfts~__tact_dict_set_uint_slice(16, $self'seed, __tact_context_get_sender());
        $self'seed = ($self'seed + 1);
        return (($self'nfts, $self'seed, $self'owner), ());
    }
    if (($Context$_get_value(__tact_context_get()) < 2100000000)) {
        send_raw_message(end_cell(store_ref(store_int(store_uint(store_uint(begin_cell(), 33792, 17), $b, 256), 1, 111), end_cell(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(begin_cell(), 1607220500, 32), $msg'queryId, 64), 1024, 11), $c, 256), 1024, 11), $c, 256), 0, 5)))), 66);
        return (($self'nfts, $self'seed, $self'owner), ());
    }
    int $num = rand($self'seed);
    if (($num != 0)) {
        $num = ($num - 1);
        $a = __tact_address_to_slice(__tact_not_null(__tact_dict_get_uint_slice($self'nfts, 16, $num)));
        $a~load_uint(11);
        send_raw_message(end_cell(store_ref(store_int(store_coins(store_uint(store_uint(begin_cell(), 33792, 17), $a~load_uint(256), 256), ($Context$_get_value(__tact_context_get()) - 2000000000)), 1, 107), end_cell(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(begin_cell(), 1607220500, 32), $msg'queryId, 64), 1024, 11), $c, 256), 1024, 11), $c, 256), 0, 5)))), 0);
        $self'nfts~__tact_dict_set_uint_slice(16, $num, __tact_context_get_sender());
        return (($self'nfts, $self'seed, $self'owner), ());
    }
    send_raw_message(end_cell(store_ref(store_int(store_coins(store_uint(store_uint(begin_cell(), 33792, 17), $b, 256), ($Context$_get_value(__tact_context_get()) - 2000000000)), 1, 107), end_cell(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(begin_cell(), 1607220500, 32), $msg'queryId, 64), 1024, 11), $c, 256), 1024, 11), $c, 256), 0, 5)))), 0);
    return (($self'nfts, $self'seed, $self'owner), ());
}

(((cell, int, int)), ()) $Task5$_internal_binary_AdminWithdrawalProfit((cell, int, int) $self, (int) $msg) impure inline {
    var ($self'nfts, $self'seed, $self'owner) = $self;
    var ($msg'queryId) = $msg;
    slice $a = __tact_address_to_slice(__tact_context_get_sender());
    $a~load_uint(11);
    int $b = $a~load_uint(256);
    throw_unless(132, ($b == $self'owner));
    send_raw_message(end_cell(store_ref(store_uint(store_coins(store_uint(store_uint(begin_cell(), 33792, 17), $b, 256), (__tact_my_balance() - 100000000)), 1, 107), end_cell(store_uint(store_uint(begin_cell(), 4255419257, 32), $msg'queryId, 64)))), 0);
    return (($self'nfts, $self'seed, $self'owner), ());
}

(((cell, int, int)), ()) $Task5$_internal_binary_AdminWithdrawalAllNFTs((cell, int, int) $self, (int) $msg) impure inline {
    var ($self'nfts, $self'seed, $self'owner) = $self;
    var ($msg'queryId) = $msg;
    slice $a = __tact_address_to_slice(__tact_context_get_sender());
    $a~load_uint(11);
    int $b = $a~load_uint(256);
    slice $c = __tact_address_to_slice(my_address());
    $c~load_uint(11);
    int $d = $c~load_uint(256);
    throw_unless(132, ( (($b == $d)) ? (true) : (( (($b == $self'owner)) ? (($Context$_get_value(__tact_context_get()) >= (($self'seed * 80000000) + 1000000000))) : (false) )) ));
    $a = $Cell$_fun_asSlice(end_cell(store_ref(store_uint(begin_cell(), 2800573891962664961763291024904095428247553, 143), end_cell(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(begin_cell(), 1607220500, 32), $msg'queryId, 64), 1024, 11), $self'owner, 256), 1024, 11), $self'owner, 256), 0, 5)))));
    repeat (min(253, $self'seed)) {
        $self'seed = ($self'seed - 1);
        $c = __tact_address_to_slice(__tact_not_null(__tact_dict_get_uint_slice($self'nfts, 16, $self'seed)));
        $c~load_uint(11);
        send_raw_message(end_cell(store_slice(store_uint(store_uint(begin_cell(), 33792, 17), $c~load_uint(256), 256), $a)), 0);
    }
    if (($self'seed == 0)) {
        $self'nfts = null();
        return (($self'nfts, $self'seed, $self'owner), ());
    }
    send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $d, 256), 1, 111), end_cell(store_uint(store_uint(begin_cell(), 1664696863, 32), $msg'queryId, 64)))), 128);
    return (($self'nfts, $self'seed, $self'owner), ());
}

(((cell, int, int)), ()) $Task5$_internal_binary_Deploy((cell, int, int) $self, (int) $deploy) impure inline {
    var ($self'nfts, $self'seed, $self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'nfts, $self'seed, $self'owner)~$Task5$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'nfts, $self'seed, $self'owner), ());
}

;;
;; Get methods of a Contract Task5
;;

_ %profit() method_id(79823) {
    var self = $Task5$_contract_load();
    var res = self~$Task5$_fun_profit();
    return res;
}

_ %nfts() method_id(88106) {
    var self = $Task5$_contract_load();
    var res = self~$Task5$_fun_nfts();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmPqqKcRcm3bhGCWD3zhnNQoUz2WpBSeT5BNc1B1nZeao9";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Task5
;;

((cell, int, int), int) $Task5$_contract_router_internal((cell, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive OwnershipAssigned message
    if (op == 85167505) {
        var msg = in_msg~$OwnershipAssigned$_load();
        self~$Task5$_internal_binary_OwnershipAssigned(msg);
        return (self, true);
    }
    
    ;; Receive AdminWithdrawalProfit message
    if (op == 2957643261) {
        var msg = in_msg~$AdminWithdrawalProfit$_load();
        self~$Task5$_internal_binary_AdminWithdrawalProfit(msg);
        return (self, true);
    }
    
    ;; Receive AdminWithdrawalAllNFTs message
    if (op == 1664696863) {
        var msg = in_msg~$AdminWithdrawalAllNFTs$_load();
        self~$Task5$_internal_binary_AdminWithdrawalAllNFTs(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Task5$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Task5$_contract_load();
    
    ;; Handle operation
    int handled = self~$Task5$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Task5$_contract_store(self);
}
