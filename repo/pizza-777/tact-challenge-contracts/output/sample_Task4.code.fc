#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Task4.headers.fc";
#include "sample_Task4.stdlib.fc";
#include "sample_Task4.storage.fc";

;;
;; Contract Task4 functions
;;

(int, int, int) $Task4$_contract_init(int $seed) impure inline_ref {
    var (($self'owner, $self'seed, $self'nft)) = (0, 0, 0);
    return ($self'owner, $self'seed, $self'nft);
}

((int, int, int), int) $Task4$_fun_time((int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'seed, $self'nft)) = $self;
    int $time = ($self'seed - now());
    if (($time < 0)) {
        return (($self'owner, $self'seed, $self'nft), 0);
    }
    return (($self'owner, $self'seed, $self'nft), $time);
}

((int, int, int), slice) $Task4$_fun_nft((int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'seed, $self'nft)) = $self;
    if (($self'seed == 0)) {
        return (($self'owner, $self'seed, $self'nft), null());
    }
    slice $addr = begin_parse(end_cell(store_uint(store_uint(begin_cell(), 1024, 11), $self'nft, 256)));
    return (($self'owner, $self'seed, $self'nft), $addr~__tact_load_address());
}

((int, int, int), slice) $Task4$_fun_owner((int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'seed, $self'nft)) = $self;
    if (($self'seed == 0)) {
        return (($self'owner, $self'seed, $self'nft), null());
    }
    slice $addr = begin_parse(end_cell(store_uint(store_uint(begin_cell(), 1024, 11), $self'owner, 256)));
    return (($self'owner, $self'seed, $self'nft), $addr~__tact_load_address());
}

;;
;; Receivers of a Contract Task4
;;

(((int, int, int)), ()) $Task4$_internal_binary_OwnershipAssigned((int, int, int) $self, (int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'seed, $self'nft) = $self;
    var ($msg'queryId, $msg'prevOwner, $msg'forwardPayload) = $msg;
    if (($self'owner == 0)) {
        slice $addr = __tact_address_to_slice($msg'prevOwner);
        $addr~skip_bits(11);
        $self'owner = preload_uint($addr, 256);
        $self'seed = (preload_uint($msg'forwardPayload, 32) + now());
        $addr = __tact_address_to_slice(__tact_context_get_sender());
        $addr~skip_bits(11);
        $self'nft = preload_uint($addr, 256);
        return (($self'owner, $self'seed, $self'nft), ());
    }
    send_raw_message(end_cell(store_uint(store_slice(store_slice(store_uint(store_uint(store_slice(store_uint(begin_cell(), 16, 6), __tact_address_to_slice(__tact_context_get_sender())), 1607220500, 143), $msg'queryId, 64), __tact_address_to_slice($msg'prevOwner)), __tact_address_to_slice($msg'prevOwner)), 0, 5)), 64);
    commit();
    throw(0);
    return (($self'owner, $self'seed, $self'nft), ());
}

(((int, int, int)), ()) $Task4$_internal_binary_NftWithdrawal((int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'seed, $self'nft) = $self;
    var ($msg'queryId, $msg'nftAddress) = $msg;
    slice $addr = __tact_address_to_slice(__tact_context_get_sender());
    $addr~skip_bits(11);
    throw_unless(49, (preload_uint($addr, 256) == $self'owner));
    if (($self'seed > now())) {
        send_raw_message(end_cell(store_uint(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $self'owner, 256), 0, 111), 1745584612302255264536575227224246465199826276, 184)), 64);
        commit();
        throw(0);
    }
    $self'seed = 0;
    send_raw_message(end_cell(store_uint(store_slice(store_slice(store_uint(store_uint(store_slice(store_uint(begin_cell(), 16, 6), __tact_address_to_slice($msg'nftAddress)), 1607220500, 143), $msg'queryId, 64), __tact_address_to_slice(__tact_context_get_sender())), __tact_address_to_slice(__tact_context_get_sender())), 0, 5)), 128);
    return (($self'owner, $self'seed, $self'nft), ());
}

(((int, int, int)), ()) $Task4$_internal_binary_Deploy((int, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'seed, $self'nft) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'seed, $self'nft)~$Task4$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'seed, $self'nft), ());
}

;;
;; Get methods of a Contract Task4
;;

_ %time() method_id(117771) {
    var self = $Task4$_contract_load();
    var res = self~$Task4$_fun_time();
    return res;
}

_ %nft() method_id(73717) {
    var self = $Task4$_contract_load();
    var res = self~$Task4$_fun_nft();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Task4$_contract_load();
    var res = self~$Task4$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNLrSbtnPJfBoCiotL9bYqtPmiJ4NBoKmM9Gdfu7a4uVG";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Task4
;;

((int, int, int), int) $Task4$_contract_router_internal((int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive OwnershipAssigned message
    if (op == 1) {
        var msg = in_msg~$OwnershipAssigned$_load();
        self~$Task4$_internal_binary_OwnershipAssigned(msg);
        return (self, true);
    }
    
    ;; Receive NftWithdrawal message
    if (op == 2) {
        var msg = in_msg~$NftWithdrawal$_load();
        self~$Task4$_internal_binary_NftWithdrawal(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Task4$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Task4$_contract_load();
    
    ;; Handle operation
    int handled = self~$Task4$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Task4$_contract_store(self);
}
