#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Task3.headers.fc";
#include "sample_Task3.stdlib.fc";
#include "sample_Task3.storage.fc";

;;
;; Contract Task3 functions
;;

(int, int, int, int, int) $Task3$_contract_init(slice $admin, slice $newJAddressA, slice $newJAddressB) impure inline_ref {
    var (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b)) = (null(), null(), null(), null(), null());
    slice $addr = __tact_address_to_slice($newJAddressA);
    $addr~skip_bits(11);
    $self'jAddressA = preload_uint($addr, 256);
    $addr = __tact_address_to_slice($newJAddressB);
    $addr~skip_bits(11);
    $self'jAddressB = preload_uint($addr, 256);
    $addr = __tact_address_to_slice($admin);
    $addr~skip_bits(11);
    $self'owner = preload_uint($addr, 256);
    $self'a = 0;
    $self'b = 0;
    return ($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b);
}

((int, int, int, int, int), int) $Task3$_fun_price((int, int, int, int, int) $self, slice $token) impure inline_ref {
    var (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b)) = $self;
    slice $addr = __tact_address_to_slice($token);
    $addr~skip_bits(11);
    if ((preload_uint($addr, 256) == $self'jAddressA)) {
        if (($self'a == 0)) {
            return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), 0);
        }
        return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), (($self'b * 1000000000) / $self'a));
    } else {
        if (($self'b == 0)) {
            return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), 0);
        }
        return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), (($self'a * 1000000000) / $self'b));
    }
}

((int, int, int, int, int), int) $Task3$_fun_balance((int, int, int, int, int) $self, slice $token) impure inline_ref {
    var (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b)) = $self;
    slice $addr = __tact_address_to_slice($token);
    $addr~skip_bits(11);
    if ((preload_uint($addr, 256) == $self'jAddressA)) {
        return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), $self'a);
    } else {
        return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), $self'b);
    }
}

;;
;; Receivers of a Contract Task3
;;

(((int, int, int, int, int)), ()) $Task3$_internal_binary_TokenNotification((int, int, int, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'forwardPayload) = $msg;
    slice $addr = __tact_address_to_slice(__tact_context_get_sender());
    $addr~skip_bits(11);
    int $bits = preload_uint($addr, 256);
    throw_unless(41, ( (($bits == $self'jAddressA)) ? (true) : (($bits == $self'jAddressB)) ));
    $addr = __tact_address_to_slice($msg'from);
    $addr~skip_bits(11);
    int $bits2 = preload_uint($addr, 256);
    if (($bits2 == $self'owner)) {
        if (($bits == $self'jAddressA)) {
            $self'a = ($self'a + $msg'amount);
            return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), ());
        }
        $self'b = ($self'b + $msg'amount);
        return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), ());
    }
    if (($bits == $self'jAddressB)) {
        if (($self'a == 0)) {
            send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $bits, 256), 1, 111), end_cell(store_uint(store_slice(store_slice(store_coins(store_uint(store_uint(begin_cell(), 260734629, 32), $msg'queryId, 64), $msg'amount), __tact_address_to_slice($msg'from)), __tact_address_to_slice(my_address())), 60331648, 29)))), 64);
            commit();
            throw(0);
        }
        int $tokensToSend = (((($self'a * 1000000000) / $self'b) * $msg'amount) / 1000000000);
        if (($tokensToSend > $self'a)) {
            send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $bits, 256), 1, 111), end_cell(store_uint(store_slice(store_slice(store_coins(store_uint(store_uint(begin_cell(), 260734629, 32), $msg'queryId, 64), $msg'amount), __tact_address_to_slice($msg'from)), __tact_address_to_slice(my_address())), 60331648, 29)))), 64);
            commit();
            throw(0);
        } else {
            send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $self'jAddressA, 256), 1, 111), end_cell(store_uint(store_slice(store_slice(store_coins(store_uint(store_uint(begin_cell(), 260734629, 32), $msg'queryId, 64), $tokensToSend), __tact_address_to_slice($msg'from)), __tact_address_to_slice(my_address())), 60331648, 29)))), 64);
            $self'b = ($self'b + $msg'amount);
            $self'a = ($self'a - $tokensToSend);
        }
    } else {
        if (($self'b == 0)) {
            send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $bits, 256), 1, 111), end_cell(store_uint(store_slice(store_slice(store_coins(store_uint(store_uint(begin_cell(), 260734629, 32), $msg'queryId, 64), $msg'amount), __tact_address_to_slice($msg'from)), __tact_address_to_slice(my_address())), 60331648, 29)))), 64);
            commit();
            throw(0);
        }
        int $tokensToSend = (((($self'b * 1000000000) / $self'a) * $msg'amount) / 1000000000);
        if (($tokensToSend > $self'b)) {
            send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $bits, 256), 1, 111), end_cell(store_uint(store_slice(store_slice(store_coins(store_uint(store_uint(begin_cell(), 260734629, 32), $msg'queryId, 64), $msg'amount), __tact_address_to_slice($msg'from)), __tact_address_to_slice(my_address())), 60331648, 29)))), 64);
            commit();
            throw(0);
        } else {
            send_raw_message(end_cell(store_ref(store_uint(store_uint(store_uint(begin_cell(), 33792, 17), $self'jAddressB, 256), 1, 111), end_cell(store_uint(store_slice(store_slice(store_coins(store_uint(store_uint(begin_cell(), 260734629, 32), $msg'queryId, 64), $tokensToSend), __tact_address_to_slice($msg'from)), __tact_address_to_slice(my_address())), 60331648, 29)))), 64);
            $self'a = ($self'a + $msg'amount);
            $self'b = ($self'b - $tokensToSend);
        }
    }
    return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), ());
}

(((int, int, int, int, int)), ()) $Task3$_internal_binary_Deploy((int, int, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b)~$Task3$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'jAddressA, $self'jAddressB, $self'a, $self'b), ());
}

;;
;; Get methods of a Contract Task3
;;

_ %price(slice $$token) method_id(120091) {
    slice $token = __tact_verify_address($$token);
    var self = $Task3$_contract_load();
    var res = self~$Task3$_fun_price($token);
    return res;
}

_ %balance(slice $$token) method_id(104128) {
    slice $token = __tact_verify_address($$token);
    var self = $Task3$_contract_load();
    var res = self~$Task3$_fun_balance($token);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmeVaTvpVidNGH3SHhztdtd53g6XxUadn9L2uX5m2hkgSE";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Task3
;;

((int, int, int, int, int), int) $Task3$_contract_router_internal((int, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TokenNotification message
    if (op == 1935855772) {
        var msg = in_msg~$TokenNotification$_load();
        self~$Task3$_internal_binary_TokenNotification(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Task3$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Task3$_contract_load();
    
    ;; Handle operation
    int handled = self~$Task3$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Task3$_contract_store(self);
}
