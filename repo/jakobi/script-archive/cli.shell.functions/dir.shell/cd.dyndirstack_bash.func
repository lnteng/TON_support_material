# created     PJ 200907XX jakobi@acm.org
# copyright:  (c) 2009 jakobi@acm.org, GPL v3 or later
# archive:    http://jakobi.github.com/script-archive-doc/

[ "${SHELL#*ksh}" != "$SHELL" ] && return

# dyndirstack - extend the native bash dirstack with completion/grep/load/save

# 20090810 PJ   0.1  jakobi@acm.org - load added
shopt -s extglob

# NOTES
# - $CDPATH: relative path + completion 
# - $DIRSTACK[*]
#   dirs -c            clear
#   dirs -v            numbered list  [note: $PWD is always #0, ABOVE 
#                                      TOP of DIRSTACK, not persistant]
#   dirs -p > FILE     save           
#   pushd:             DIRPATH:     adds $PWD to stack, then issues cd $DIRPATH
#   pushd:             -n DIRPATH:  adds DIRPATH to stack
#   pushd:             swaps
#   pushd:             +N/-N: rotates
#   popd               -n: do not cd; +N/-N: remove nth dir
#   cd "$(dirs -N)"    goto -N/+N
#   
#   .bashrc.dirstack extends these:
#   dir_list           dirs -lp
#   dir_list_num       dirs -lv, aka d
#   dir_addcurrent
#   dir_chdir
#   dir_popcd          popcd/pcd (with DOPOP - move PWD to TOP), jumpcd/jcd
#   
#   and extends completion with dir_bc_historycd_cat, dir_bc_historycd:
#      complete -F dir_bc_historycd -C dir_bc_historycd_cat  popcd jumpcd jcd pcd
#   #? complete -F dir_bc_historycd -C dir_bc_historycd_cat -o plusdirs cd chdir
#
#   [this is missing from the nico_cd set]
#   
#   what's still missing from the original dyndirstack
#   (implementation after the comment, corresponding nico_cd name in parens)
#   dir_to             (cdto)
#   dir_vim / dir_vi   load/edit a dirstack (REQ: pipe.vim for simplicity;
#                      or change this function and use tempfiles with an
#                      arbitrary editor instead; cdvi)
#   dir_grep           grep the dirstack and print (cdgrep)
#   dir_load           load dirstack from specified file 
#                      (use dir_load < <(...) instead of ...|dir_load; cdrf)
#   dir_save           print dirstack to specified file (or stdout; cdls)
#   +                  next     stack dir and  rotate
#   -                  previous stack dir and rotate

function dir_help { 
    cat  <<-'EOF'
        Usage: $CDPATH, $DIRSTACK[*]
        
        For internal completion use:
               dir_bc_historycd_cat
               dir_bc_historycd

        Usage: dirs -c                   (nico_cd pendant: cdcl/cdinit)
           clears dirstack

        Usage: dirs [-p|-v]                                      (cdsl)
           -p: print or save dirs -p
           -v: print dirs with index number

        Usage: dir_list
            print dirstack, improved dirs -lp

        Usage: d/dir_list_num
            print dirstack, improved dirs -lv

        Usage: dir_ls/dir_save [|<file>]                          (cdls)
            show the cd list. Use this to save your cd list.
            does exclude the current directory from output
        
        Usage: dir_rf/dir_load [<file>]                           (cdrf)
            load a dirstack from file.
            (use dir_load < <(...) instead of ...|dir_load)

        Usage: dir_addcurrent
            add current dir to the list if missing

        Usage: dir_chdir [<cd arguments...>] [<path>]
            add current dir, then cd and list files

        Usage: pushd   [-n] [<path>]
               pushd
               pushd   [+<index>|-<index>]
               +       
               -       
            add currentdir, then optionally cd
            swap
            rotate to numbered entry
            next     (rotate with pushd +1)
            previous (rotate with pushd -1)
            
        Usage: dir_popcd     [<index>|regex]
               pcd/popcd     [<index>|regex]  (with pop)
               jcd/jumpcd    [<index>|regex]  (without pop)
            add current dir, optionally pop, then cd to selected dir 
            (regex w/o backslashes)
   
        Usage: popd    [-n] [+<index>|-<index>]                 (~cdrm)
            pop numbered dir from stack and optionally cd
        
        Usage: cd "$(dirs [+<index>|-<index>]"
            cd to numbered entry without rotation

        Usage: dirto/dir_to  [-n] [<expr>]                       (cdto)
                       <index>|<path>|[+]<partial path> 
            lookup a dir with dir_grep, modify it with the optional
            sed expression <expr> (sed $cdlibsedopt), and either cd
            or print (-n). dir_to does not modify/rotate the dirstack
            (in contrast to both pushd and nico_cd's cdto). use
            d to show the current index numbers.
        
        Usage: dir_grep [<egrep argument>...]                  (cdgrep)
            egrep dirstack
        
        Usage: dir_vi/dir_vim                                    (cdvi)
            edit a dirstack using the pipe.vim vi wrapper

EOF
}


function dir_to { # similar to nico_cd
   typeset dir tmp expr nocd
   if [[ "$1" = -n ]]; then
      nocd=1; shift;
   fi
   if [[ $# -eq 2 ]]; then
      expr="$1"; shift;
   fi
   if [[ $# -ne 1 || -z "$1" ]]; then
      echo "Usage: dir_to [-n] [<expr>] <index>|<path>|[+]<partial path>" 1>&2
      return 5
   fi
   dir="$1"; 
   if [[ ! -d "$dir" && "$dir" = +([0-9]) ]]; then
      dir="+$dir"
   fi
   if [[ ! -d "$dir" && "$dir" = [\+\-]+([0-9]) ]]; then
      tmp="$(dirs "$dir")";
      [[ -d "$tmp" ]] && dir="$tmp"
      [ "${dir#\~}" != "$dir" ] && dir="$HOME${dir#\~}"
   fi
   if [[ ! -d "$dir" && "$dir" = \+* ]]; then
      dir="$(dir_grep "${dir#\+}"|head -1)"
      [ "${dir#\~}" != "$dir" ] && dir="$HOME${dir#\~}"
   fi
   [ ! -d "$dir" ] && return 1
   if [[ -n "$expr" ]]; then
      dir="$(echo "$dir" | sed $cdlibsedopt -e "$expr")"
   fi
   #[ ! -d "$dir" ] && return 1
   if [[ -n "$nocd" ]]; then
      printf "%s\n" "$dir"
      return 0
   else
      if cd "$dir"; then
         return 0
      fi
   fi
   echo "Could not cd to $dir" 1>&2
   return 1
}

function dir_vim { 
   dir_load <(dir_save | pipe.vim -silent); 
}
alias dir_vi=dir_vim

function dir_grep { 
   dir_save | egrep "$@"; 
}

function dir_load { # use dir_add < <(LIST) instead of LIST|dir_add !!
   # ignore MAXDIRSTACK for now
   typeset dir j
   j=0
   [ "$1" = "-a" ] && shift || dirs -c
   dir=$1; [ "$dir" = "-" ] && dir=/dev/stdin 
   if [[ $# -eq 1 && ! -d "$dir" ]]; then
      while read dir; do
         let j=j+1; 
         pushd -n "$dir" >/dev/null 2>&1
      done < "$dir"
   else
      for i in "$@"; do 
         let j=j+1; 
         pushd -n "$i" >/dev/null 2>&1 ; 
      done
   fi
   echo $j entries added ' / DIRSTACK 1..'$(dirs -p | tail --lines=+2 | wc -l)
}

function dir_save {
   # do NOT include the volatile $PWD...
   typeset f
   f="$1"; [ "$f" = "" ] && f=/dev/stdout
   dirs -p | tail --lines=+2 > "$f"
}

alias -- +='pushd +1'                    # next with rotate
alias -- -='pushd -1'                    # prev with rotate
alias dir_ls='dir_save'
alias dir_rf='dir_load'
alias dirto='dir_to'



#-------------------------- =+- Shell script -+= --------------------------
#
# @file      .bashrc_dirstack
# @date      Thu Dec 21 17:24:38 2006
# @brief
#
# CVS version control block - do not edit manually
#  $RCSfile: .bashrc_dyndirstack,v $
#  $Source: /home/cvs/yoh/public_html/Linux/.files/.bashrc_dyndirstack,v $
#
# Created: Thu Dec 21 17:24:38 2006
#  Commited: $Date: 2007/02/22 18:13:08 $
#  Revision: $Revision: 1.3 $
#
#  Yaroslav Halchenko                                      CS@UNM, CS@NJIT
#  web:     http://www.onerussian.com                      & PSYCH@RUTGERS
#  e-mail:  yoh@onerussian.com                              ICQ#: 60653192
#
# DESCRIPTION (NOTES):
#
# List of functions to implement dynamic DIRSTACK, so it always keeps
# last ${MAXDIRSTACK} entries (with no repeats). Appropriate
# completions are in place ;-)
#
# COPYRIGHT: Yaroslav Halchenko 2006
#
# LICENSE:
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the 
#  Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# On Debian system see /usr/share/common-licenses/GPL for the full license.
#
#-----------------\____________________________________/------------------


: ${MAXDIRSTACK:=30}

dir_list ()
# smth like dirs -lp should be
{
	# unfortunately spaces at the end of filenames will not be
	# treated correctly
	dirs -l 2>/dev/null | sed -e 's/ \//\n\//g'
# | sed 's/ /\\ /g'
}

dir_list_num ()
# smth like dirs -lv should be
{
	dir_list | nl -v0;
}

dir_addcurrent ()
# add current to the list if it is not there
{
	# we need to preserve OLDPWD for cd -
	OLDDIR="$OLDPWD"
	# remember old one
	# only iff we haven't seen it before
	dir_list  | tail -n +2 | \
		egrep -q -e "\B$PWD\>"  || \
		pushd . &>/dev/null
	OLDPWD="$OLDDIR"
}

dir_chdir ()
{

	# add current
	dir_addcurrent
	# actually cd
	builtin cd "$@"
	# lighten up stack if necessary
    [ ${#DIRSTACK[@]} -gt ${MAXDIRSTACK} ] && popd -0 > /dev/null
	# list context without files known to be comming in lots
# PJ - ls with blacklisting some files
    ls -I 'Rrun*.*' -I 's1r*.txt'
	# debugging
	# dirs -p
}

dir_popcd ()
# change directory and depending on DOPOP pop or not pop
{
	arg="$1"
	# descriminate if it was simply a directory or a pattern
	# to match
	if echo "$arg" | grep -q '^[0-9]\+$'; then
		newdir=`dir_list_num \
                | egrep "^[[:space:]]*$arg\>" | sed -e 's/^[ 0-9\t]*//g'`
	else
		# we need to shape it a bit in similar way to dir_bc_historycd_cat
		arg=`echo "$arg" | sed -e 's/^"\(.*\)"/\1/g' \
                             -e 's/\([^\]\) /\1\\\ /g'`
		newdir=`dir_list | tail -n +2 | egrep "^$arg\$" | head -n 1`
		#echo "Guessed name '$newdir'"
	fi
	dir_addcurrent
	[ -z $DOPOP ] || popd +$arg &>/dev/null
	[ -z "$newdir" ] \
		&& echo "Directory matching '$arg' was not found." \
		|| builtin cd "$newdir"
}

#
# callback for bash completions -- will search for appropriate directory
# to be chosen for completion
dir_bc_historycd_cat ()
{
	# shape argument a bit - so it could be specified as "a b" in case
	# if it has spaces
	arg=`echo "$2" | sed -e 's/^"\(.*\)"/\1/g' \
                        -e 's/\([^\]\) /\1\\\ /g'`
    dir_list | tail -n +2 | grep "$arg" | sed -e 's| |\\ |g'
	return 0
}


#
# This function aims to provide a completion for COMPLETE only iff
# there is a single variant. Otherwise we don't want to screw up the
# line, but we want just to present on the screen possible
# completions
dir_bc_historycd ()
{
	matches_num=`dir_bc_historycd_cat '$1' "$2"| wc -l`

	if [ $matches_num -eq 1 ]; then
		# so we have only 1 match - it is safe to substitute!

		COMPREPLY=( [0]="$(dir_bc_historycd_cat 'XXX' "$2")" )

	else
		# return original name (but not empty!) -- that seems to
		# forbid complition to get into the cmdline (which is what we
		# want since it would place the line which would not complete
		# anylonger to the same set as the original string)
		[ $1 == 'cd' ] || COMPREPLY=( "$2" )
	fi
	return 0
}

# try to complete from DIRSTACK and if not - from dirnames
# add  -o dirnames to include regular directories
complete -F dir_bc_historycd -C dir_bc_historycd_cat  popcd jumpcd jcd pcd

# or complement it any time for cd need to figure out how to make it
# include full names - not only dirnames but menu-complete actually
# does the right thing ;-)
# nevertheless it needs more thinking since otherwise it polutes regular 
# cd command so it doesn't select even if there is only 1 obvious completion
# among directories
#complete -F dir_bc_historycd -C dir_bc_historycd_cat -o plusdirs cd chdir


# the only difference for jump and pop cds is that when doing pop, the
# directory gets removed from stack but then later on inserted by
# dir_addcurrent, so it would move up in the stack
popcd () { DOPOP=1 dir_popcd "$*"; }
jumpcd () { DOPOP= dir_popcd "$*"; }

# quick shortcuts
alias jcd=jumpcd
alias pcd=popcd
alias d=dir_list_num



# vim:filetype=sh
