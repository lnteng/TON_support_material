builder __gen_write_Wallet(builder build_0, int v'seqno, int v'key, int v'walletId) inline {
    build_0 = store_uint(build_0, v'seqno, 32);
    build_0 = store_uint(build_0, v'key, 256);
    build_0 = store_uint(build_0, v'walletId, 64);
    return build_0;
}

cell __gen_writecell_Wallet(int v'seqno,int v'key,int v'walletId) inline {
    return __gen_write_Wallet(begin_cell(), v'seqno, v'key, v'walletId).end_cell();
}

(slice, (int, int, int)) __gen_read_Wallet(slice sc) inline {
    var seqno = sc~load_uint(32);
    var key = sc~load_uint(256);
    var walletId = sc~load_uint(64);
    return (sc, (seqno, key, walletId));
}

(int, int, int) __gen_load_Wallet() inline {
    slice sc = get_data().begin_parse();
    return sc~__gen_read_Wallet();
}

() __gen_store_Wallet(int v'seqno, int v'key, int v'walletId) impure inline {
    builder b = begin_cell();
    b = __gen_write_Wallet(b, v'seqno,v'key,v'walletId);
    set_data(b.end_cell());
}

;; NOTE: REMOVE impure inline to make it work
((int, int, int), ()) __gen_Wallet_receive((int, int, int) self) {
    var (self'seqno, self'key, self'walletId) = self;
    return ((self'seqno, self'key, self'walletId), ());
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Receivers
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    (self'seqno, self'key, self'walletId)~__gen_Wallet_receive();
    __gen_store_Wallet(self'seqno, self'key, self'walletId);    
    
    throw(100);
}