cell jetton_wallet:pack_storage(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    ;; _ balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
    return begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}

cell jetton_wallet:create_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    ;; _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
    ;;   code:(Maybe ^Cell) data:(Maybe ^Cell)
    ;;   library:(HashmapE 256 SimpleLib) = StateInit;
    return begin_cell()
            .store_uint(0, 2)
            .store_maybe_ref(jetton_wallet_code)
            .store_maybe_ref(jetton_wallet:pack_storage(0, owner_address, jetton_master_address, jetton_wallet_code))
            .store_uint(0, 1)
            .end_cell();
}

slice calculate_contract_address(cell state_init) inline {
    ;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256 = MsgAddressInt;
    return begin_cell().store_uint(4, 3)
            .store_int(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

slice jetton_wallet:calculate_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    cell state_init = jetton_wallet:create_state_init(owner_address, jetton_master_address, jetton_wallet_code);
    return calculate_contract_address(state_init);
}
