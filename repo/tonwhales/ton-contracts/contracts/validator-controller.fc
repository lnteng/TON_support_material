;; Validator Controller wallet

() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

() recv_external(slice in_msg) impure {

  ;; Read Data
  var dataSc = begin_parse(get_data());
  var stored_seqno = dataSc~load_uint(32);
  var stored_restricted_key = dataSc~load_uint(256);
  var stored_master_key = dataSc~load_uint(256);
  var restricted_address = dataSc~load_msg_addr();
  var (restricted_address_wc, restricted_address_hash) = parse_std_addr(restricted_address);
  var restricted_last_tx = dataSc~load_uint(32);
  var dt = now();
  dataSc.end_parse();

  ;; Read Message
  var signature = in_msg~load_bits(512);
  var msgSc = in_msg;
  int msg_seqno = msgSc~load_uint(32);
  
  ;; Check Input
  throw_unless(33, msg_seqno == stored_seqno);
  var data_hash = slice_hash(in_msg);
  var restricted_ok = check_signature(data_hash, signature, stored_restricted_key);
  var master_ok = check_signature(data_hash, signature, stored_master_key);
  throw_unless(34, restricted_ok | master_ok);
  var restrict = ~ master_ok;

  ;; Check restricted
  if (restrict) {
    throw_if(38, dt - restricted_last_tx < 300);
    var msgSc2 = msgSc;
    msgSc2~touch();
    throw_unless(37, msgSc2.slice_refs());

    while (msgSc2.slice_refs()) {

      ;; Prohibit weird messages: destruction on zero, send all remaining balance, etc.
      var mode = msgSc2~load_uint(8);
      throw_if(36, mode & 0xfc);

      ;; Parse message
      var msg = msgSc2~load_ref();
      var cs = msg.begin_parse();
      var flag_header = cs~load_uint(1);
      var flag_ihr_disabled = cs~load_uint(1);
      var flag_bounce = cs~load_uint(1);
      var flag_bounced = cs~load_uint(1);
      var (s_addr, d_addr) = (cs~load_msg_addr(), cs~load_msg_addr());
      var (dest_wc, dest_addr) = parse_std_addr(d_addr);
      var grams = cs~load_grams();
      var tail = cs~load_uint(1 + 4 + 4 + 64 + 32 + 1);

      ;; Load body
      var external_body = cs~load_uint(1);
      var body = cs;
      if (external_body == 1) {
        var external_body = cs~load_ref();
        cs.end_parse();
        body = external_body.begin_parse();
      }
      var op = body~load_uint(32);
      
      ;; Check basic flags
      throw_if(35, flag_header);
      throw_unless(35, flag_ihr_disabled);
      throw_unless(35, flag_bounce);
      throw_if(35, flag_bounced);

      ;; Check destination
      throw_unless(35, (dest_wc == restricted_address_wc) & (dest_addr == restricted_address_hash));

      ;; All tail bits must be zero:
      ;; * Currency Collection = 1 bit zero
      ;; * ihrFees = 4 bits zero
      ;; * fwdFees = 4 bits zero
      ;; * createdLt = 64 bits zero
      ;; * createdAt = 32 bits zero
      ;; * CommonMessageInfo.initState = 1 bit zero
      throw_if(35, tail);

      ;; Check specific messages
      if (op == 0x4e73744b) {
        ;; Check new stake
      } elseif (op == 0x47657424) {
        ;; Check recover stake
      } elseif (op == 0x52674370) {
        ;; Check new complaint
      } elseif (op == 0x56744370) {
        ;; Check vote for complaint
      } else {
        ;; Unsupported message
        throw(35);  
      }
    }
    msgSc2.end_parse();
  }

  ;; Update last transaction time
  restricted_last_tx = dt;

  ;; Accept Message and spend gas
  accept_message();

  ;; Update Data
  set_data(begin_cell()
    .store_uint(stored_seqno + 1, 32)
    .store_uint(stored_restricted_key, 256)
    .store_uint(stored_master_key, 256)
    .store_slice(restricted_address)
    .store_uint(restricted_last_tx, 32)
    .end_cell()
  );

  ;; Commit transaction
  commit();

  ;; Send messages
  msgSc~touch();
  while (msgSc.slice_refs()) {
    var mode = msgSc~load_uint(8);
    var msg = msgSc~load_ref();
    send_raw_message(msg, mode);
  }
  msgSc.end_parse();
}

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int get_public_key() method_id {
  return get_data().begin_parse().skip_bits(32).preload_uint(256);
}

int restricted_cooldown() method_id {
  var dataSc = begin_parse(get_data());
  var stored_seqno = dataSc~load_uint(32);
  var stored_restricted_key = dataSc~load_uint(256);
  var stored_master_key = dataSc~load_uint(256);
  var restricted_address = dataSc~load_msg_addr();
  var (restricted_address_wc, restricted_address_hash) = parse_std_addr(restricted_address);
  var restricted_last_tx = dataSc~load_uint(32);
  dataSc.end_parse();
  var dt = now();
  var delta = dt - restricted_last_tx;
  return max(300 - delta, 0);
}