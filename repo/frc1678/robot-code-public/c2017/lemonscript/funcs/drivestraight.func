DriveStraight(float distance, bool follow_through)

include {
  "c2017/queue_manager/queue_manager.h"
  "c2017/subsystems/drivetrain/drivetrain_base.h"
  "muan/actions/drivetrain_action.h"
}

global {
  std::unique_ptr<muan::actions::DrivetrainAction> action;
}

init {
  muan::actions::DrivetrainProperties properties{7.0, 5.0, 3.0, 2.0,
                                                 c2017::drivetrain::GetDrivetrainConfig().robot_radius};
  muan::actions::DrivetrainActionParams params;
  params.termination = muan::actions::DrivetrainTermination{0.05, 0.05, 0.05, 0.05};
  params.desired_forward_distance = distance;
  action = std::make_unique<muan::actions::DrivetrainAction>(
      properties, c2017::QueueManager::GetInstance()->drivetrain_goal_queue(),
      c2017::QueueManager::GetInstance()->drivetrain_status_queue());
  params.closed_loop_termination = !follow_through;
  params.follow_through = follow_through;
  action->ExecuteDrive(params);
  return false;
}

periodic {
  return !action->Update();
}
