#include "imports/stdlib.fc";

(slice, int) udict_get(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET";

(slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds.preload_dict());
}

() store_data(slice admin_address, cell users) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_dict(users)
            .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    (slice admin_address, cell users) = load_data();
    slice cs = in_msg.begin_parse().skip_bits(4);
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    in_msg_body~skip_bits(64);
    if (op == 0x368ddef3) {
        throw_unless(120, equal_slices(sender_address, admin_address));

        slice s = in_msg_body~load_msg_addr();
        (_, int address) = s.parse_std_addr();
        int share = in_msg_body.preload_uint(32);

        users~udict_set_builder(256, address, begin_cell().store_uint(share, 32));
        store_data(admin_address, users);
    } elseif (op == 0x278205c8) {
        throw_unless(120, equal_slices(sender_address, admin_address));

        slice s = in_msg_body~load_msg_addr();
        (_, int address) = s.parse_std_addr();

        throw_unless(121, users~udict_delete?(256, address));
        store_data(admin_address, users);
    } elseif (op == 0x068530b3) {
        throw_if(122, users.dict_empty?());

        tuple user_list = null();
        int total_share = 0;

        (int key, slice val, int flag) = users.udict_get_min?(256);
        while (flag) {
            int user_share = val.preload_uint(32);
            user_list = cons([key, user_share], user_list);
            total_share += user_share;
            
            (key, val, flag) = users.udict_get_next?(256, key);
        }

        builder b = begin_cell()
            .store_uint(0x10, 6)
            .store_uint(0x400, 11);

        do {
            (int key, int val) = user_list~list_next().unpair();

            send_raw_message(
                b.store_uint(key, 256)
                .store_coins(muldiv(val, msg_value, total_share))
                .store_uint(0, 107)
                .end_cell(),
                1
            );
        } until (user_list.null?());
    } else {
        throw_if(122, users.dict_empty?());

        int amount = in_msg_body~load_coins();

        tuple user_list = null();
        int total_share = 0;

        (int key, slice val, int flag) = users.udict_get_min?(256);
        while (flag) {
            int user_share = val.preload_uint(32);
            user_list = cons([key, user_share], user_list);
            total_share += user_share;
            
            (key, val, flag) = users.udict_get_next?(256, key);
        }

        builder b = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(sender_address)
            .store_coins(20000000)
            .store_uint(1, 107);
        builder c = begin_cell()
            .store_uint(0x0f8a7ea5, 32)
            .store_uint(0, 64);

        do {
            (int key, int val) = user_list~list_next().unpair();
            
            builder d = begin_cell()
                .store_uint(0x400, 11)
                .store_uint(key, 256);

            send_raw_message(
                b.store_ref(
                    c.store_coins(muldiv(val, amount, total_share))
                    .store_builder(d)
                    .store_builder(d)
                    .store_uint(0x202, 14)
                    .end_cell()
                )
                .end_cell(),
                1
            );
        } until (user_list.null?());
    }
}

cell load_users() inline {
    return get_data().begin_parse().skip_bits(267).preload_dict();
}

cell get_users() method_id {
    return load_users();
}

int get_user_share(slice user_address) method_id {
    (_, int address) = user_address.parse_std_addr();
    (slice s, _) = load_users().udict_get(256, address);
    return s.preload_uint(32);
}