"TonUtil.fif"   include
"GetOpt.fif"    include
"Asm.fif"       include

{ show-options-help 1 halt } : usage 0 =: t-flag
{ { +" " } 7 times } : my-tab

begin-options
    "<operation-price> <a-service-fee> <b-service-fee> <max-price-percentage> <project-addr> <workchain-id> [--testnet]"  +cr +cr my-tab
    +"Prepares deploy message of the native-ton-pair smart contract"  +cr my-tab
    disable-digit-options generic-help-setopt

    "t" "--testnet" { 2 =: t-flag } short-long-option
        "Displays addresses with the testnet-only flag (+2)" option-help
    "h" "--help" { usage } short-long-option
        "Shows a help message" option-help
parse-options

$# 6 <> ' usage if

$1 $>GR =: operation-price
$2 parse-int =: a-service-fee
$3 parse-int =: b-service-fee
$4 parse-int =: max-price-percentage
$5 parse-smc-addr drop 2=: project-addr
$6 parse-int =: workchain-id

<{ SETCP0 ACCEPT
    "auto/main.func.code.fif" include PUSHREF SETCODE
}>c =: code

<b
    <b  // swap_params
        0 Gram,                     // biton_balance
        operation-price Gram,       // operation_price
        0 Gram,                     // service_collect_fee
        a-service-fee 32 u,         // a-service-fee
        b-service-fee 32 u,         // b-service-fee
        max-price-percentage 10 u,  // max-price-percentage
        project-addr Addr,          // project_addr
        b{00} s,                    // jetton_addr (addr-none)
    b> ref,
    <b  // lp_params
        0 Gram,         // lp_total_supply
        0 Gram,         // lp_collect_fee
        10000000 32 u,  // lp_fee_percentage
        10000000 32 u,  // lp_withdraw_comission
        b{00} s,        // lp_jwall_addr
        b{00} s,        // lp_minter_addr
    b> ref,
b>  =: init-storage

<b
    b{0011} s,   // split_depth:0 special:0 code:1 data:1
    code ref,
    init-storage ref,
    null dict,   // library
b>  =: state-init

state-init hashu workchain-id swap 2=: smc-addr

."new smc address:                        " smc-addr             .addr cr
."non-bounceable address (for init):      " smc-addr  t-flag 5 + .Addr cr
."bounceable address (for later access):  " smc-addr  t-flag 4 + .Addr cr

<b
    b{10} s,        // ext_in_msg_info$10
    b{00} s,        // src:MsgAddressExt (addr_none$00)
    smc-addr Addr,  // dest:MsgAddressInt
    0 Gram,         // import_fee:Grams
b>  =: common-msg-info

<b  // Message X
    common-msg-info <s s,
    b{1} s,    // init:  "1" Maybe bit
    b{0} s,    // Either "0" bit
    state-init <s s,
    b{0} s, // body:  "0" Either bit
b> 2 boc+>B

"auto/init.boc" tuck B>file
."saved smc creating query to file: " type cr