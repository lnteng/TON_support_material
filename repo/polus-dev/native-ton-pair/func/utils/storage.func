global int init?;
;; other


global int freeze?;                     ;; if freeze = true we bounce all transaction
global int biton_balance;               ;; biton liq
global int operation_price;             ;; operation price for transfers
global int service_collect_fee;         ;; the commission we have collected
global int a_service_fee;               ;; active a service fee in percentage
global int b_service_fee;               ;; active b service fee in percentage
global int max_price_percentage;        ;; maximum percentage mark-up
global slice project_addr;              ;; admin address
global slice jetton_addr;               ;; jetton wallet addr

;; other end

;; lp
global int lp_total_supply;             ;; total supply lp tokens
global int lp_collect_fee;              ;; total lp tokens collect fee
global int lp_fee_percentage;           ;; fee for lp tokens

global slice lp_jwall_addr;             ;; lp jetton wallet address
global slice lp_minter_addr;            ;; lp minter address

;; lp end


global cell jetton_minter_code;         ;; jetton minter code (remove after deploy)
global cell jetton_wallet_code;         ;; jetton wallet code (remove after deploy)

global int int_gbl::balance;


() parse_lp_params(var ds) impure {
    lp_total_supply = ds~load_coins();
    lp_collect_fee = ds~load_coins();
    lp_fee_percentage = ds~load_uint(32);
    lp_jwall_addr = ds~load_msg_addr();
    lp_minter_addr = ds~load_msg_addr();
}

() parse_swap_params(var ds) impure {
    freeze? = ds~load_int(1);
    biton_balance = ds~load_coins();
    operation_price = ds~load_coins();
    service_collect_fee = ds~load_coins();
    a_service_fee = ds~load_uint(32);
    b_service_fee = ds~load_uint(32);
    max_price_percentage = ds~load_uint(32);
    project_addr = ds~load_msg_addr();
    jetton_addr = ds~load_msg_addr();
}

_ init_data() impure {
    ifnot(null?(init?)) {
        return ();
    }
    var ds = get_data().begin_parse();
    parse_swap_params(ds~load_ref().begin_parse());
    parse_lp_params(ds~load_ref().begin_parse());
    jetton_minter_code = ds~load_ref();
    jetton_wallet_code = ds~load_ref();
    init? = true;
}


_ pack_data() impure {
    
    var swap_params = begin_cell()
        .store_int(freeze?, 1)
        .store_coins(biton_balance)
        .store_coins(operation_price)
        .store_coins(service_collect_fee)
        .store_uint(a_service_fee, 32)
        .store_uint(b_service_fee, 32)
        .store_uint(max_price_percentage, 32)
        .store_slice(project_addr)
        .store_slice(jetton_addr)
        .end_cell();

    var lp_params = begin_cell()
        .store_coins(lp_total_supply)
        .store_coins(lp_collect_fee)
        .store_uint(lp_fee_percentage, 32)
        .store_slice(lp_jwall_addr)
        .store_slice(lp_minter_addr)
        .end_cell();
    
    
    set_data(begin_cell()
        .store_ref(swap_params)
        .store_ref(lp_params)
        .store_ref(jetton_minter_code)
        .store_ref(jetton_wallet_code)
        .end_cell()
        );
}
