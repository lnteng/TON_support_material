

;; notify sends cheque and external message(log)
;; if we call this method we should take 0,05 ton
;; FIXME (take comission for ext message(log))
() usr::notify(
    slice ntext, int dst,
    int fees, int in_coins, int out_coins,
    int line_price, int market_price, slice user_addr
) impure inline_ref {
    builder msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(user_addr)
        .store_coins(50000000) ;; 0,05 ton for cheque
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(ntext);

    send_raw_message(msg.end_cell(), 0);

    builder event_body = begin_cell()
        .store_int(dst, 1)
        .store_coins(fees)
        .store_coins(in_coins)
        .store_coins(out_coins)
        .store_coins(line_price)
        .store_coins(market_price);

    event::emit(user_addr, event_body.end_cell());
}


;; method for refund biton(if max price < market price)
() usr::refund_biton(slice destination, int amount) impure inline_ref {
    init_data();
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)     ;; 0xf8a7ea5
        .store_uint(cur_lt(), 64)           ;; query_id
        .store_coins(amount)                ;; jetton amount
        .store_slice(destination)           ;; sender addr
        .store_slice(my_address())          ;; response_addr
        .store_int(0, 1)                    ;; custom payload
        .store_coins(0)                     ;; forward ton amount
        .store_int(0, 1)                    ;; forward ton amount
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(operation_price)
        ;; last bit in 107 bits is "1", mean that body:(Either X ^X) in ref
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 2);
    return ();
}


() usr::buy_ton(int msg_value, slice sender_addr, int jetton_amount, int max_price, slice err_addr) impure inline_ref {
    init_data();
    
    ;; math formulas AMM
    (int ton_amount, int m_price, int s_fee, int lp_fee) = get_price_ton(jetton_amount);

    ;; market price > max price we refund biton
    ;; if (m_price > max_price) {
    ;;     usr::refund_biton(sender_addr, jetton_amount);
    ;;     return ();
    ;; }


    ;; if (ton_amount >= int_gbl::balance) {
    ;;     usr::refund_biton(sender_addr, jetton_amount);
    ;;     return ();
    ;; }
    ;; FIXME
    ton_amount -= 60000000;  ;; 0,06 ton for notify
    ;; msg payout ton

    slice payload = msg::biton_to_ton();
    int op = 0;
    ;; if it`s routing
    if ~ equal_slices(sender_addr, err_addr) {
        op = op::routing();
        payload = sender_addr;
    }


    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_addr)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_slice(payload);
    
    send_raw_message(msg.end_cell(), 0);
    ;; notify user and send ext message
    usr::notify(
        msg::biton_to_ton(), event_op::jettonton(),
        s_fee, jetton_amount, ton_amount,
        get_linear_price(), m_price, err_addr
    );

    biton_balance += jetton_amount;
    service_collect_fee += s_fee;
    lp_collect_fee += lp_fee;
    pack_data();
}


() usr::buy_biton(int msg_value, slice sender_address, slice in_msg_body) impure {
    init_data();


    ;; FIXME
    msg_value -= 60000000;  ;; 0,06 ton for notify
    msg_value -= operation_price;
    throw_if(err::small_trans(), msg_value <= 500000000);
    (int jetton_amount, int m_price, int s_fee, int lp_fee) = get_price_biton(msg_value);

    throw_if(err::no_balance(), jetton_amount >= biton_balance);

    int op = 0;
    if ~ in_msg_body.slice_empty?() {
        op = in_msg_body~load_uint(32);
    }
    ;; see if there is anything else in the body. If not, add the maximum markup to the linear price. If yes, we take the maximum price
    int max_price = plus_percent(get_linear_price(), max_price_percentage, 1000000000);
    if (op == op::max_price()) {
        max_price = in_msg_body~load_coins();
    }
    throw_if(err::max_price(), m_price > max_price);
    slice routing_addr = sender_address;
    if (op == op::routing()) {
        in_msg_body~skip_bits(64);
        routing_addr = in_msg_body~load_msg_addr();
    }

    ;; jetton wallet msg
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)         ;; 0xf8a7ea5
        .store_uint(cur_lt(), 64)               ;; query_id
        .store_coins(jetton_amount)             ;; jetton amount
        .store_slice(routing_addr)              ;; sender addr
        .store_slice(routing_addr)              ;; response_addr
        .store_int(0, 1)                        ;; custom payload
        .store_coins(0)                         ;; forward ton amount
        .store_int(0, 1)                        ;; forward ton amount
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(operation_price)
        ;; last bit in 107 bits is "1", mean that body:(Either X ^X) in ref
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 0);
    ;; notify user and send ext message
    usr::notify(
        msg::ton_to_biton(), event_op::tonjetton(),
        s_fee, msg_value, jetton_amount,
        get_linear_price(), m_price, sender_address
    );

    service_collect_fee += s_fee;
    lp_collect_fee += lp_fee;
    biton_balance -= jetton_amount;
    pack_data();
}



