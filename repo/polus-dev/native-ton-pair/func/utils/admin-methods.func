
;; withdraw dex fee(admin fee)
() adm::withdraw_fee() impure {
    init_data();
    throw_if(err::small_fee(), service_collect_fee == 0);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(service_collect_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg::withdraw_fee());
    send_raw_message(msg.end_cell(), 2);
    service_collect_fee = 0;
    pack_data();
}

;; change operation price for messages
() adm::change_operation_price(slice in_msg_body) impure {
    init_data();
    operation_price = in_msg_body~load_coins();
    pack_data();
    return ();
}

;; change service fee for swaps
() adm::change_service_fee(slice in_msg_body) impure {
    init_data();
    a_service_fee = in_msg_body~load_uint(32);
    b_service_fee = in_msg_body~load_uint(32);
    pack_data();
    return ();
}


() adm::withdraw_liq(slice in_msg_body) impure inline_ref {
    init_data();
    int ton_amount = in_msg_body~load_coins();
    int jetton_amount = in_msg_body~load_coins();
    biton_balance -= jetton_amount;

    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(cur_lt(), 64) ;; query id
        .store_coins(jetton_amount)
        .store_slice(project_addr) ;; destination
        .store_slice(my_address()) ;; response destination
        .store_uint(0, 1) ;; payload
        .store_coins(ton_amount - operation_price) ;; fwd ton amount
        .store_uint(0, 1);
    
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(ton_amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body.end_cell());
    send_raw_message(msg.end_cell(), 0);

    pack_data();
}