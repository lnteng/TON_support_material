#include "lib/stdlib.func";
#include "lib/extlib.func";
#include "utils/storage.func";
#include "utils/op-codes.func";
#include "utils/exit-codes.func";
#include "utils/get-methods.func";
#include "utils/msg-utils.func";
#include "utils/math.func";
#include "utils/event.func";
#include "utils/lp.func";
#include "utils/admin-methods.func";
#include "utils/user-methods.func";
#include "utils/jutils.func";
#include "utils/handles.func";


() recv_internal(int balance, int msg_value, cell in_msg_cell, slice in_msg_body) impure {
    int_gbl::balance = balance;
    init_data();

    slice cs = in_msg_cell.begin_parse();
    throw_if(0, cs~load_uint(4) & 1); ;; ignore bounce

    slice sender_address = cs~load_msg_addr();

    ;; check if minter init or not
    int is_lp_minter_init? = equal_slices(lp_minter_addr, extlib::addr_none());
    ;; if not
    if(is_lp_minter_init?) {
        handle::deploy_lp_wallets(); ;; we deploy lp minter and lp jetton wallet
        return ();
    }
    ;; check deploy jetton or not FIX ME
    int is_jetton_init? = equal_slices(jetton_addr, extlib::addr_none());
    if (is_jetton_init?) {
        ;; accept jettons
        handle::init_jetton(in_msg_body, sender_address);
        return ();
    }

    ;; if we receive message from admin address we do admin methods
    if (equal_slices(sender_address, project_addr)) {
        handle::admin_methods(in_msg_body);
        return ();
    }

    ;; if we receive message from lp jetton wallet it`s means we should remove some liquidity
    if (equal_slices(sender_address, lp_jwall_addr)) {
        if (in_msg_body~load_uint(32) == op::transfer_notification()) {
            if (freeze? == true ) {
                handle::return_lp_transaction(in_msg_body);
                return ();
            }
            lp::del_liquidity(in_msg_body);
            return ();
        }
        else {
            service_collect_fee += msg_value;
        }
        return ();
    } else { ;; run user methods
        handle::user_methods(sender_address, msg_value, in_msg_body);
        return ();
    }
}
