;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: EventSignal
;; Header: 0x1246ebb4
;; TLB: event_signal#1246ebb4 eventId:int257 payload:^cell = EventSignal
;;

builder $EventSignal$_store(builder build_0, (int, cell) v) inline {
    var (v'eventId, v'payload) = v;
    build_0 = store_uint(build_0, 306637748, 32);
    build_0 = build_0.store_int(v'eventId, 257);
    build_0 = build_0.store_ref(v'payload);
    return build_0;
}

cell $EventSignal$_store_cell((int, cell) v) inline {
    return $EventSignal$_store(begin_cell(), v).end_cell();
}

(slice, ((int, cell))) $EventSignal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 306637748);
    var v'eventId = sc_0~load_int(257);
    var v'payload = sc_0~load_ref();
    return (sc_0, (v'eventId, v'payload));
}

((int, cell)) $EventSignal$_constructor_eventId_payload(int eventId, cell payload) inline {
    return (eventId, payload);
}

;;
;; Type: BuildMessenger
;; Header: 0xa87cf6b7
;; TLB: build_messenger#a87cf6b7 sourceAddress:address eventId:int257 maxUserStakeAmount:coins subscribeFeePerTick:coins template:^cell sourceName:^string = BuildMessenger
;;

builder $BuildMessenger$_store(builder build_0, (slice, int, int, int, cell, slice) v) inline_ref {
    var (v'sourceAddress, v'eventId, v'maxUserStakeAmount, v'subscribeFeePerTick, v'template, v'sourceName) = v;
    build_0 = store_uint(build_0, 2826761911, 32);
    build_0 = __tact_store_address(build_0, v'sourceAddress);
    build_0 = build_0.store_int(v'eventId, 257);
    build_0 = build_0.store_coins(v'maxUserStakeAmount);
    build_0 = build_0.store_coins(v'subscribeFeePerTick);
    build_0 = build_0.store_ref(v'template);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'sourceName).end_cell());
    return build_0;
}

cell $BuildMessenger$_store_cell((slice, int, int, int, cell, slice) v) inline {
    return $BuildMessenger$_store(begin_cell(), v).end_cell();
}

((slice, int, int, int, cell, slice)) $BuildMessenger$_constructor_sourceAddress_eventId_maxUserStakeAmount_subscribeFeePerTick_template_sourceName(slice sourceAddress, int eventId, int maxUserStakeAmount, int subscribeFeePerTick, cell template, slice sourceName) inline {
    return (sourceAddress, eventId, maxUserStakeAmount, subscribeFeePerTick, template, sourceName);
}

;;
;; Type: BuildChildRouter
;; Header: 0xa8c413ea
;; TLB: build_child_router#a8c413ea sourceAddress:address eventId:int257 maxUserStakeAmount:coins subscribeFeePerTick:coins template:^cell sourceName:^string = BuildChildRouter
;;

(slice, ((slice, int, int, int, cell, slice))) $BuildChildRouter$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2831422442);
    var v'sourceAddress = sc_0~__tact_load_address();
    var v'eventId = sc_0~load_int(257);
    var v'maxUserStakeAmount = sc_0~load_coins();
    var v'subscribeFeePerTick = sc_0~load_coins();
    var v'template = sc_0~load_ref();
    var v'sourceName = sc_0~load_ref().begin_parse();
    return (sc_0, (v'sourceAddress, v'eventId, v'maxUserStakeAmount, v'subscribeFeePerTick, v'template, v'sourceName));
}

;;
;; Type: CreateBody
;; Header: 0x9bffd925
;; TLB: create_body#9bffd925 walletAddress:address deadline:int257 eventId:int257 parameter:^cell = CreateBody
;;

(slice, ((slice, int, int, cell))) $CreateBody$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2617235749);
    var v'walletAddress = sc_0~__tact_load_address();
    var v'deadline = sc_0~load_int(257);
    var v'eventId = sc_0~load_int(257);
    var v'parameter = sc_0~load_ref();
    return (sc_0, (v'walletAddress, v'deadline, v'eventId, v'parameter));
}

;;
;; Type: SubscribeBody
;; Header: 0x746d9bfe
;; TLB: subscribe_body#746d9bfe walletAddress:address deadline:int257 eventId:int257 callbackAddress:address = SubscribeBody
;;

(slice, ((slice, int, int, slice))) $SubscribeBody$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1953340414);
    var v'walletAddress = sc_0~__tact_load_address();
    var v'deadline = sc_0~load_int(257);
    var v'eventId = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'callbackAddress = sc_1~__tact_load_address();
    return (sc_0, (v'walletAddress, v'deadline, v'eventId, v'callbackAddress));
}

;;
;; Type: ProtcolRegisterSuccess
;; Header: 0x979d1d46
;; TLB: protcol_register_success#979d1d46 sourceAddress:address eventId:int257 maxUserStakeAmount:coins subscribeFeePerTick:coins template:^cell sourceName:^string = ProtcolRegisterSuccess
;;

builder $ProtcolRegisterSuccess$_store(builder build_0, (slice, int, int, int, cell, slice) v) inline_ref {
    var (v'sourceAddress, v'eventId, v'maxUserStakeAmount, v'subscribeFeePerTick, v'template, v'sourceName) = v;
    build_0 = store_uint(build_0, 2543656262, 32);
    build_0 = __tact_store_address(build_0, v'sourceAddress);
    build_0 = build_0.store_int(v'eventId, 257);
    build_0 = build_0.store_coins(v'maxUserStakeAmount);
    build_0 = build_0.store_coins(v'subscribeFeePerTick);
    build_0 = build_0.store_ref(v'template);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'sourceName).end_cell());
    return build_0;
}

cell $ProtcolRegisterSuccess$_store_cell((slice, int, int, int, cell, slice) v) inline {
    return $ProtcolRegisterSuccess$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, cell, slice))) $ProtcolRegisterSuccess$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2543656262);
    var v'sourceAddress = sc_0~__tact_load_address();
    var v'eventId = sc_0~load_int(257);
    var v'maxUserStakeAmount = sc_0~load_coins();
    var v'subscribeFeePerTick = sc_0~load_coins();
    var v'template = sc_0~load_ref();
    var v'sourceName = sc_0~load_ref().begin_parse();
    return (sc_0, (v'sourceAddress, v'eventId, v'maxUserStakeAmount, v'subscribeFeePerTick, v'template, v'sourceName));
}

((slice, int, int, int, cell, slice)) $ProtcolRegisterSuccess$_constructor_sourceAddress_eventId_maxUserStakeAmount_subscribeFeePerTick_template_sourceName(slice sourceAddress, int eventId, int maxUserStakeAmount, int subscribeFeePerTick, cell template, slice sourceName) inline {
    return (sourceAddress, eventId, maxUserStakeAmount, subscribeFeePerTick, template, sourceName);
}

;;
;; Type: CreateMsgSubscriber
;; Header: 0x7d388809
;; TLB: create_msg_subscriber#7d388809 walletAddress:address callbackAddress:address eventId:int257 = CreateMsgSubscriber
;;

builder $CreateMsgSubscriber$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'walletAddress, v'callbackAddress, v'eventId) = v;
    build_0 = store_uint(build_0, 2100856841, 32);
    build_0 = __tact_store_address(build_0, v'walletAddress);
    build_0 = __tact_store_address(build_0, v'callbackAddress);
    build_0 = build_0.store_int(v'eventId, 257);
    return build_0;
}

cell $CreateMsgSubscriber$_store_cell((slice, slice, int) v) inline {
    return $CreateMsgSubscriber$_store(begin_cell(), v).end_cell();
}

((slice, slice, int)) $CreateMsgSubscriber$_constructor_walletAddress_callbackAddress_eventId(slice walletAddress, slice callbackAddress, int eventId) inline {
    return (walletAddress, callbackAddress, eventId);
}

;;
;; Type: CreateUdcSuccess
;; Header: 0xedcc6fb3
;; TLB: create_udc_success#edcc6fb3 walletAddress:address callbackAddress:address = CreateUdcSuccess
;;

builder $CreateUdcSuccess$_store(builder build_0, (slice, slice) v) inline {
    var (v'walletAddress, v'callbackAddress) = v;
    build_0 = store_uint(build_0, 3989598131, 32);
    build_0 = __tact_store_address(build_0, v'walletAddress);
    build_0 = __tact_store_address(build_0, v'callbackAddress);
    return build_0;
}

cell $CreateUdcSuccess$_store_cell((slice, slice) v) inline {
    return $CreateUdcSuccess$_store(begin_cell(), v).end_cell();
}

((slice, slice)) $CreateUdcSuccess$_constructor_walletAddress_callbackAddress(slice walletAddress, slice callbackAddress) inline {
    return (walletAddress, callbackAddress);
}

;;
;; Type: DeleteSubscriber
;; Header: 0x16ab9d51
;; TLB: delete_subscriber#16ab9d51 walletAddress:address callbackAddress:address eventId:int257 = DeleteSubscriber
;;

builder $DeleteSubscriber$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'walletAddress, v'callbackAddress, v'eventId) = v;
    build_0 = store_uint(build_0, 380345681, 32);
    build_0 = __tact_store_address(build_0, v'walletAddress);
    build_0 = __tact_store_address(build_0, v'callbackAddress);
    build_0 = build_0.store_int(v'eventId, 257);
    return build_0;
}

cell $DeleteSubscriber$_store_cell((slice, slice, int) v) inline {
    return $DeleteSubscriber$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, slice, int))) $DeleteSubscriber$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 380345681);
    var v'walletAddress = sc_0~__tact_load_address();
    var v'callbackAddress = sc_0~__tact_load_address();
    var v'eventId = sc_0~load_int(257);
    return (sc_0, (v'walletAddress, v'callbackAddress, v'eventId));
}

((slice, slice, int)) $DeleteSubscriber$_constructor_walletAddress_callbackAddress_eventId(slice walletAddress, slice callbackAddress, int eventId) inline {
    return (walletAddress, callbackAddress, eventId);
}

;;
;; Type: DestroyMessenger
;; Header: 0xaff94a61
;; TLB: destroy_messenger#aff94a61 messengerId:int257 = DestroyMessenger
;;

(slice, ((int))) $DestroyMessenger$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2952350305);
    var v'messengerId = sc_0~load_int(257);
    return (sc_0, (v'messengerId));
}

;;
;; Type: AddMessenger
;; Header: 0x986a78c5
;; TLB: add_messenger#986a78c5 protocolAddress:address = AddMessenger
;;

(slice, ((slice))) $AddMessenger$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2557114565);
    var v'protocolAddress = sc_0~__tact_load_address();
    return (sc_0, (v'protocolAddress));
}

;;
;; Type: AddStakeFor
;; Header: 0xcf3d1e0e
;; TLB: add_stake_for#cf3d1e0e beneficiary:address = AddStakeFor
;;

(slice, ((slice))) $AddStakeFor$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3476889102);
    var v'beneficiary = sc_0~__tact_load_address();
    return (sc_0, (v'beneficiary));
}

;;
;; Type: RemoveStake
;; Header: 0xde082cfd
;; TLB: remove_stake#de082cfd receiver:address amount:coins = RemoveStake
;;

(slice, ((slice, int))) $RemoveStake$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3725077757);
    var v'receiver = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'receiver, v'amount));
}

;;
;; Type: CollectFee
;; Header: 0x35c17b48
;; TLB: collect_fee#35c17b48 messengerId:int257 fee:coins = CollectFee
;;

(slice, ((int, int))) $CollectFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 901872456);
    var v'messengerId = sc_0~load_int(257);
    var v'fee = sc_0~load_coins();
    return (sc_0, (v'messengerId, v'fee));
}

;;
;; Type: BuildUDC
;; Header: 0x7d6b998a
;; TLB: build_udc#7d6b998a owner:address = BuildUDC
;;

builder $BuildUDC$_store(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = store_uint(build_0, 2104203658, 32);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

cell $BuildUDC$_store_cell((slice) v) inline {
    return $BuildUDC$_store(begin_cell(), v).end_cell();
}

((slice)) $BuildUDC$_constructor_owner(slice owner) inline {
    return (owner);
}

;;
;; Type: Staked
;; Header: 0xeee1168f
;; TLB: staked#eee1168f amount:coins staker:address beneficiary:address = Staked
;;

builder $Staked$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'staker, v'beneficiary) = v;
    build_0 = store_uint(build_0, 4007728783, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'staker);
    build_0 = __tact_store_address(build_0, v'beneficiary);
    return build_0;
}

cell $Staked$_store_cell((int, slice, slice) v) inline {
    return $Staked$_store(begin_cell(), v).end_cell();
}

((int, slice, slice)) $Staked$_constructor_amount_staker_beneficiary(int amount, slice staker, slice beneficiary) inline {
    return (amount, staker, beneficiary);
}

;;
;; Type: Withdrawn
;; Header: 0x365dacb2
;; TLB: withdrawn#365dacb2 amount:coins receiver:address = Withdrawn
;;

builder $Withdrawn$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'receiver) = v;
    build_0 = store_uint(build_0, 912108722, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'receiver);
    return build_0;
}

cell $Withdrawn$_store_cell((int, slice) v) inline {
    return $Withdrawn$_store(begin_cell(), v).end_cell();
}

((int, slice)) $Withdrawn$_constructor_amount_receiver(int amount, slice receiver) inline {
    return (amount, receiver);
}

;;
;; Type: UserDefaultCallback
;;

builder $UserDefaultCallback$init$_store(builder build_0, (slice, slice, cell) v) inline {
    var (v'master, v'owner, v'parameter) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'parameter);
    return build_0;
}

(cell, cell) $UserDefaultCallback$_init_child(cell sys', slice $master, slice $owner, cell $parameter) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: UserDefaultCallback
    cell mine = __tact_dict_get_code(source, 11736);
    contracts = __tact_dict_set_code(contracts, 11736, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $UserDefaultCallback$init$_store(b, ($master, $owner, $parameter));
    return (mine, b.end_cell());
}

;;
;; Type: Messenger
;;

builder $Messenger$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'sourceAddress, v'messengerId) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'sourceAddress);
    build_0 = build_0.store_int(v'messengerId, 257);
    return build_0;
}

(cell, cell) $Messenger$_init_child(cell sys', slice $owner, slice $sourceAddress, int $messengerId) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Messenger
    cell mine = __tact_dict_get_code(source, 26241);
    contracts = __tact_dict_set_code(contracts, 26241, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Messenger$init$_store(b, ($owner, $sourceAddress, $messengerId));
    return (mine, b.end_cell());
}

;;
;; Type: ChildRouter
;;

builder $ChildRouter$_store(builder build_0, (slice, slice, int, int, cell, cell, int, int, int, cell, int) v) inline {
    var (v'owner, v'sourceAddress, v'messengerId, v'minimumStake, v'stakes, v'stakeShares, v'totalStakeAmount, v'maxUserStakeAmount, v'totalShares, v'messengerState, v'eventId) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'sourceAddress);
    build_0 = build_0.store_int(v'messengerId, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'minimumStake, 256);
    build_1 = build_1.store_dict(v'stakes);
    build_1 = build_1.store_dict(v'stakeShares);
    build_1 = build_1.store_coins(v'totalStakeAmount);
    build_1 = build_1.store_coins(v'maxUserStakeAmount);
    build_1 = build_1.store_uint(v'totalShares, 256);
    build_1 = build_1.store_dict(v'messengerState);
    build_1 = build_1.store_int(v'eventId, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, int, int, cell, cell, int, int, int, cell, int))) $ChildRouter$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'sourceAddress = sc_0~__tact_load_address();
    var v'messengerId = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'minimumStake = sc_1~load_uint(256);
    var v'stakes = sc_1~load_dict();
    var v'stakeShares = sc_1~load_dict();
    var v'totalStakeAmount = sc_1~load_coins();
    var v'maxUserStakeAmount = sc_1~load_coins();
    var v'totalShares = sc_1~load_uint(256);
    var v'messengerState = sc_1~load_dict();
    var v'eventId = sc_1~load_int(257);
    return (sc_0, (v'owner, v'sourceAddress, v'messengerId, v'minimumStake, v'stakes, v'stakeShares, v'totalStakeAmount, v'maxUserStakeAmount, v'totalShares, v'messengerState, v'eventId));
}

(slice, ((slice, slice, int))) $ChildRouter$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'sourceAddress = sc_0~__tact_load_address();
    var v'minimumStake = sc_0~load_int(257);
    return (sc_0, (v'owner, v'sourceAddress, v'minimumStake));
}

(slice, slice, int, int, cell, cell, int, int, int, cell, int) $ChildRouter$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ChildRouter$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, slice sourceAddress, int minimumStake) = $sc~$ChildRouter$init$_load();
        $sc.end_parse();
        return $ChildRouter$_contract_init(owner, sourceAddress, minimumStake);
    }
}

() $ChildRouter$_contract_store((slice, slice, int, int, cell, cell, int, int, int, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $ChildRouter$_store(b, v);
    set_data(b.end_cell());
}