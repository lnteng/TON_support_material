;;
;; Header files for UniversalRouter
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_slice
(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline;

;; __tact_dict_get_slice_slice
slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $EventSignal$_store
builder $EventSignal$_store(builder build_0, (int, cell) v) inline;

;; $EventSignal$_store_cell
cell $EventSignal$_store_cell((int, cell) v) inline;

;; $EventSignal$_load
(slice, ((int, cell))) $EventSignal$_load(slice sc_0) inline;

;; $BuildChildRouter$_store
builder $BuildChildRouter$_store(builder build_0, (slice, int, int, int, cell, slice) v) inline_ref;

;; $BuildChildRouter$_store_cell
cell $BuildChildRouter$_store_cell((slice, int, int, int, cell, slice) v) inline;

;; $CreateBody$_store
builder $CreateBody$_store(builder build_0, (slice, int, int, cell) v) inline;

;; $CreateBody$_store_cell
cell $CreateBody$_store_cell((slice, int, int, cell) v) inline;

;; $CreateBody$_load
(slice, ((slice, int, int, cell))) $CreateBody$_load(slice sc_0) inline;

;; $SubscribeBody$_store
builder $SubscribeBody$_store(builder build_0, (slice, int, int, slice) v) inline;

;; $SubscribeBody$_store_cell
cell $SubscribeBody$_store_cell((slice, int, int, slice) v) inline;

;; $SubscribeBody$_load
(slice, ((slice, int, int, slice))) $SubscribeBody$_load(slice sc_0) inline;

;; $ProtcolRegister$_load
(slice, ((slice, cell, int, int, slice))) $ProtcolRegister$_load(slice sc_0) inline;

;; $DeleteSubscriber$_store
builder $DeleteSubscriber$_store(builder build_0, (slice, slice, int) v) inline;

;; $DeleteSubscriber$_store_cell
cell $DeleteSubscriber$_store_cell((slice, slice, int) v) inline;

;; $DeleteSubscriber$_load
(slice, ((slice, slice, int))) $DeleteSubscriber$_load(slice sc_0) inline;

;; $AddMessenger$_store
builder $AddMessenger$_store(builder build_0, (slice) v) inline;

;; $AddMessenger$_store_cell
cell $AddMessenger$_store_cell((slice) v) inline;

;; $AddMessenger$_load
(slice, ((slice))) $AddMessenger$_load(slice sc_0) inline;

;; $UniversalRouter$_store
builder $UniversalRouter$_store(builder build_0, (slice, int, cell, cell, cell, int) v) inline;

;; $UniversalRouter$_load
(slice, ((slice, int, cell, cell, cell, int))) $UniversalRouter$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $ChildRouter$init$_store
builder $ChildRouter$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $UniversalRouter$init$_load
(slice, ((slice))) $UniversalRouter$init$_load(slice sc_0) inline;

;; $UniversalRouter$_contract_init
(slice, int, cell, cell, cell, int) $UniversalRouter$_contract_init(slice $owner) impure inline_ref;

;; $UniversalRouter$_contract_load
(slice, int, cell, cell, cell, int) $UniversalRouter$_contract_load() impure inline_ref;

;; $UniversalRouter$_contract_store
() $UniversalRouter$_contract_store((slice, int, cell, cell, cell, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $ChildRouter$_init_child
(cell, cell) $ChildRouter$_init_child(cell sys', slice $owner, slice $sourceAddress, int $minimumStake) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $UniversalRouter$_fun_protocolEventTd
((slice, int, cell, cell, cell, int), int) $UniversalRouter$_fun_protocolEventTd((slice, int, cell, cell, cell, int) $self, slice $protocolAddress) impure inline_ref;

;; $UniversalRouter$_fun_getChildRouterInit
((slice, int, cell, cell, cell, int), (cell, cell)) $UniversalRouter$_fun_getChildRouterInit((slice, int, cell, cell, cell, int) $self, slice $sourceAddress) impure inline_ref;

;; $UniversalRouter$_fun_childRouterAddress
((slice, int, cell, cell, cell, int), slice) $UniversalRouter$_fun_childRouterAddress((slice, int, cell, cell, cell, int) $self, slice $sourceAddress) impure inline_ref;

;; $UniversalRouter$_fun_eventId
((slice, int, cell, cell, cell, int), int) $UniversalRouter$_fun_eventId((slice, int, cell, cell, cell, int) $self) impure inline_ref;

;; $UniversalRouter$_fun_getMapChildRouterAddress
((slice, int, cell, cell, cell, int), slice) $UniversalRouter$_fun_getMapChildRouterAddress((slice, int, cell, cell, cell, int) $self, slice $sourceAddress) impure inline_ref;

;; $UniversalRouter$_fun_MapChildRouter
((slice, int, cell, cell, cell, int), cell) $UniversalRouter$_fun_MapChildRouter((slice, int, cell, cell, cell, int) $self) impure inline_ref;

;; $UniversalRouter$_fun_getProtocolAddress
((slice, int, cell, cell, cell, int), slice) $UniversalRouter$_fun_getProtocolAddress((slice, int, cell, cell, cell, int) $self, int $eventId) impure inline_ref;

;; $UniversalRouter$_fun_getBalance
((slice, int, cell, cell, cell, int), int) $UniversalRouter$_fun_getBalance((slice, int, cell, cell, cell, int) $self) impure inline_ref;

;; $UniversalRouter$_fun_forward
((slice, int, cell, cell, cell, int), ()) $UniversalRouter$_fun_forward((slice, int, cell, cell, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $UniversalRouter$_fun_notify
((slice, int, cell, cell, cell, int), ()) $UniversalRouter$_fun_notify((slice, int, cell, cell, cell, int) $self, cell $body) impure inline;

;; $UniversalRouter$_fun_owner
((slice, int, cell, cell, cell, int), slice) $UniversalRouter$_fun_owner((slice, int, cell, cell, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline;

;; $BuildChildRouter$_constructor_sourceAddress_template_maxUserStakeAmount_subscribeFeePerTick_eventId_sourceName
((slice, int, int, int, cell, slice)) $BuildChildRouter$_constructor_sourceAddress_template_maxUserStakeAmount_subscribeFeePerTick_eventId_sourceName(slice sourceAddress, cell template, int maxUserStakeAmount, int subscribeFeePerTick, int eventId, slice sourceName) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $CreateBody$_constructor_walletAddress_deadline_eventId_parameter
((slice, int, int, cell)) $CreateBody$_constructor_walletAddress_deadline_eventId_parameter(slice walletAddress, int deadline, int eventId, cell parameter) inline;

;; $SubscribeBody$_constructor_walletAddress_deadline_eventId_callbackAddress
((slice, int, int, slice)) $SubscribeBody$_constructor_walletAddress_deadline_eventId_callbackAddress(slice walletAddress, int deadline, int eventId, slice callbackAddress) inline;

;; $DeleteSubscriber$_constructor_walletAddress_eventId_callbackAddress
((slice, slice, int)) $DeleteSubscriber$_constructor_walletAddress_eventId_callbackAddress(slice walletAddress, int eventId, slice callbackAddress) inline;

;; $EventSignal$_constructor_eventId_payload
((int, cell)) $EventSignal$_constructor_eventId_payload(int eventId, cell payload) inline;

;; $AddMessenger$_constructor_protocolAddress
((slice)) $AddMessenger$_constructor_protocolAddress(slice protocolAddress) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
