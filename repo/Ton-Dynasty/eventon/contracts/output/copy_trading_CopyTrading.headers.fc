;;
;; Header files for CopyTrading
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $EventSignal$_store
builder $EventSignal$_store(builder build_0, (int, cell) v) inline;

;; $EventSignal$_store_cell
cell $EventSignal$_store_cell((int, cell) v) inline;

;; $EventSignal$_load
(slice, ((int, cell))) $EventSignal$_load(slice sc_0) inline;

;; $EventSourceRegister$_load
(slice, ((cell, int, int, slice))) $EventSourceRegister$_load(slice sc_0) inline;

;; $ProtcolRegister$_store
builder $ProtcolRegister$_store(builder build_0, (slice, cell, int, int, slice) v) inline;

;; $ProtcolRegister$_store_cell
cell $ProtcolRegister$_store_cell((slice, cell, int, int, slice) v) inline;

;; $SetMessenger$_load
(slice, ((slice, int))) $SetMessenger$_load(slice sc_0) inline;

;; $Trade$_store
builder $Trade$_store(builder build_0, (int, int) v) inline;

;; $Trade$_store_cell
cell $Trade$_store_cell((int, int) v) inline;

;; $Trade$_load
(slice, ((int, int))) $Trade$_load(slice sc_0) inline;

;; $SetEventId$_load
(slice, ((int))) $SetEventId$_load(slice sc_0) inline;

;; $CopyTrading$_store
builder $CopyTrading$_store(builder build_0, (slice, slice, slice, slice, int, int, int) v) inline;

;; $CopyTrading$_load
(slice, ((slice, slice, slice, slice, int, int, int))) $CopyTrading$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $CopyTrading$init$_load
(slice, ((slice, slice, slice))) $CopyTrading$init$_load(slice sc_0) inline;

;; $CopyTrading$_contract_init
(slice, slice, slice, slice, int, int, int) $CopyTrading$_contract_init(slice $owner, slice $universalRouterAddress, slice $dex) impure inline_ref;

;; $CopyTrading$_contract_load
(slice, slice, slice, slice, int, int, int) $CopyTrading$_contract_load() impure inline_ref;

;; $CopyTrading$_contract_store
() $CopyTrading$_contract_store((slice, slice, slice, slice, int, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $CopyTrading$_fun_getMessenger
((slice, slice, slice, slice, int, int, int), slice) $CopyTrading$_fun_getMessenger((slice, slice, slice, slice, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $CopyTrading$_fun_forward
((slice, slice, slice, slice, int, int, int), ()) $CopyTrading$_fun_forward((slice, slice, slice, slice, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $CopyTrading$_fun_notify
((slice, slice, slice, slice, int, int, int), ()) $CopyTrading$_fun_notify((slice, slice, slice, slice, int, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $EventSignal$_constructor_eventId_payload
((int, cell)) $EventSignal$_constructor_eventId_payload(int eventId, cell payload) inline;

;; $CopyTrading$_fun_sendAlert
((slice, slice, slice, slice, int, int, int), ()) $CopyTrading$_fun_sendAlert((slice, slice, slice, slice, int, int, int) $self, (int, cell) $msg) impure inline_ref;

;; $CopyTrading$_fun_getEventId
((slice, slice, slice, slice, int, int, int), int) $CopyTrading$_fun_getEventId((slice, slice, slice, slice, int, int, int) $self) impure inline_ref;

;; $CopyTrading$_fun_requireOwner
((slice, slice, slice, slice, int, int, int), ()) $CopyTrading$_fun_requireOwner((slice, slice, slice, slice, int, int, int) $self) impure inline_ref;

;; $CopyTrading$_fun_owner
((slice, slice, slice, slice, int, int, int), slice) $CopyTrading$_fun_owner((slice, slice, slice, slice, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $Trade$_constructor_orderAction_positionSize
((int, int)) $Trade$_constructor_orderAction_positionSize(int orderAction, int positionSize) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

;; $ProtcolRegister$_constructor_sourceAddress_template_maxUserStakeAmount_subscribeFeePerTick_sourceName
((slice, cell, int, int, slice)) $ProtcolRegister$_constructor_sourceAddress_template_maxUserStakeAmount_subscribeFeePerTick_sourceName(slice sourceAddress, cell template, int maxUserStakeAmount, int subscribeFeePerTick, slice sourceName) inline;
