;;
;; Header files for BlacklistPublisher
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $EventSignal$_store
builder $EventSignal$_store(builder build_0, (int, cell) v) inline;

;; $EventSignal$_store_cell
cell $EventSignal$_store_cell((int, cell) v) inline;

;; $EventSourceRegister$_load
(slice, ((cell, int, int, slice))) $EventSourceRegister$_load(slice sc_0) inline;

;; $ProtcolRegister$_store
builder $ProtcolRegister$_store(builder build_0, (slice, cell, int, int, slice) v) inline;

;; $ProtcolRegister$_store_cell
cell $ProtcolRegister$_store_cell((slice, cell, int, int, slice) v) inline;

;; $SetEventId$_load
(slice, ((int))) $SetEventId$_load(slice sc_0) inline;

;; $BlacklistWarning$_load
(slice, ((slice, cell))) $BlacklistWarning$_load(slice sc_0) inline;

;; $BlacklistPublisher$_store
builder $BlacklistPublisher$_store(builder build_0, (slice, slice, int) v) inline;

;; $BlacklistPublisher$_load
(slice, ((slice, slice, int))) $BlacklistPublisher$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $BlacklistPublisher$init$_load
(slice, ((slice, slice))) $BlacklistPublisher$init$_load(slice sc_0) inline;

;; $BlacklistPublisher$_contract_init
(slice, slice, int) $BlacklistPublisher$_contract_init(slice $owner, slice $universalRouterAddress) impure inline_ref;

;; $BlacklistPublisher$_contract_load
(slice, slice, int) $BlacklistPublisher$_contract_load() impure inline_ref;

;; $BlacklistPublisher$_contract_store
() $BlacklistPublisher$_contract_store((slice, slice, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $BlacklistPublisher$_fun_forward
((slice, slice, int), ()) $BlacklistPublisher$_fun_forward((slice, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $BlacklistPublisher$_fun_notify
((slice, slice, int), ()) $BlacklistPublisher$_fun_notify((slice, slice, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $EventSignal$_constructor_eventId_payload
((int, cell)) $EventSignal$_constructor_eventId_payload(int eventId, cell payload) inline;

;; $BlacklistPublisher$_fun_sendAlert
((slice, slice, int), ()) $BlacklistPublisher$_fun_sendAlert((slice, slice, int) $self, (int, cell) $msg) impure inline_ref;

;; $BlacklistPublisher$_fun_getEventId
((slice, slice, int), int) $BlacklistPublisher$_fun_getEventId((slice, slice, int) $self) impure inline_ref;

;; $BlacklistPublisher$_fun_requireOwner
((slice, slice, int), ()) $BlacklistPublisher$_fun_requireOwner((slice, slice, int) $self) impure inline_ref;

;; $BlacklistPublisher$_fun_owner
((slice, slice, int), slice) $BlacklistPublisher$_fun_owner((slice, slice, int) $self) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

;; $ProtcolRegister$_constructor_sourceAddress_template_maxUserStakeAmount_subscribeFeePerTick_sourceName
((slice, cell, int, int, slice)) $ProtcolRegister$_constructor_sourceAddress_template_maxUserStakeAmount_subscribeFeePerTick_sourceName(slice sourceAddress, cell template, int maxUserStakeAmount, int subscribeFeePerTick, slice sourceName) inline;
