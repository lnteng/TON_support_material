;;
;; Header files for ChildRouter
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_uint
(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_uint
int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $EventSignal$_store
builder $EventSignal$_store(builder build_0, (int, cell) v) inline;

;; $EventSignal$_store_cell
cell $EventSignal$_store_cell((int, cell) v) inline;

;; $EventSignal$_load
(slice, ((int, cell))) $EventSignal$_load(slice sc_0) inline;

;; $BuildMessenger$_store
builder $BuildMessenger$_store(builder build_0, (slice, int, int, int, cell, slice) v) inline_ref;

;; $BuildMessenger$_store_cell
cell $BuildMessenger$_store_cell((slice, int, int, int, cell, slice) v) inline;

;; $BuildChildRouter$_load
(slice, ((slice, int, int, int, cell, slice))) $BuildChildRouter$_load(slice sc_0) inline_ref;

;; $CreateBody$_load
(slice, ((slice, int, int, cell))) $CreateBody$_load(slice sc_0) inline;

;; $SubscribeBody$_load
(slice, ((slice, int, int, slice))) $SubscribeBody$_load(slice sc_0) inline;

;; $ProtcolRegisterSuccess$_store
builder $ProtcolRegisterSuccess$_store(builder build_0, (slice, int, int, int, cell, slice) v) inline_ref;

;; $ProtcolRegisterSuccess$_store_cell
cell $ProtcolRegisterSuccess$_store_cell((slice, int, int, int, cell, slice) v) inline;

;; $ProtcolRegisterSuccess$_load
(slice, ((slice, int, int, int, cell, slice))) $ProtcolRegisterSuccess$_load(slice sc_0) inline_ref;

;; $CreateMsgSubscriber$_store
builder $CreateMsgSubscriber$_store(builder build_0, (slice, slice, int) v) inline;

;; $CreateMsgSubscriber$_store_cell
cell $CreateMsgSubscriber$_store_cell((slice, slice, int) v) inline;

;; $CreateUdcSuccess$_store
builder $CreateUdcSuccess$_store(builder build_0, (slice, slice) v) inline;

;; $CreateUdcSuccess$_store_cell
cell $CreateUdcSuccess$_store_cell((slice, slice) v) inline;

;; $DeleteSubscriber$_store
builder $DeleteSubscriber$_store(builder build_0, (slice, slice, int) v) inline;

;; $DeleteSubscriber$_store_cell
cell $DeleteSubscriber$_store_cell((slice, slice, int) v) inline;

;; $DeleteSubscriber$_load
(slice, ((slice, slice, int))) $DeleteSubscriber$_load(slice sc_0) inline;

;; $DestroyMessenger$_load
(slice, ((int))) $DestroyMessenger$_load(slice sc_0) inline;

;; $AddMessenger$_load
(slice, ((slice))) $AddMessenger$_load(slice sc_0) inline;

;; $AddStakeFor$_load
(slice, ((slice))) $AddStakeFor$_load(slice sc_0) inline;

;; $RemoveStake$_load
(slice, ((slice, int))) $RemoveStake$_load(slice sc_0) inline;

;; $CollectFee$_load
(slice, ((int, int))) $CollectFee$_load(slice sc_0) inline;

;; $BuildUDC$_store
builder $BuildUDC$_store(builder build_0, (slice) v) inline;

;; $BuildUDC$_store_cell
cell $BuildUDC$_store_cell((slice) v) inline;

;; $Staked$_store
builder $Staked$_store(builder build_0, (int, slice, slice) v) inline;

;; $Staked$_store_cell
cell $Staked$_store_cell((int, slice, slice) v) inline;

;; $Withdrawn$_store
builder $Withdrawn$_store(builder build_0, (int, slice) v) inline;

;; $Withdrawn$_store_cell
cell $Withdrawn$_store_cell((int, slice) v) inline;

;; $ChildRouter$_store
builder $ChildRouter$_store(builder build_0, (slice, slice, int, int, cell, cell, int, int, int, cell, int) v) inline;

;; $ChildRouter$_load
(slice, ((slice, slice, int, int, cell, cell, int, int, int, cell, int))) $ChildRouter$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $UserDefaultCallback$init$_store
builder $UserDefaultCallback$init$_store(builder build_0, (slice, slice, cell) v) inline;

;; $Messenger$init$_store
builder $Messenger$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $ChildRouter$init$_load
(slice, ((slice, slice, int))) $ChildRouter$init$_load(slice sc_0) inline;

;; $ChildRouter$_contract_init
(slice, slice, int, int, cell, cell, int, int, int, cell, int) $ChildRouter$_contract_init(slice $owner, slice $sourceAddress, int $minimumStake) impure inline_ref;

;; $ChildRouter$_contract_load
(slice, slice, int, int, cell, cell, int, int, int, cell, int) $ChildRouter$_contract_load() impure inline_ref;

;; $ChildRouter$_contract_store
() $ChildRouter$_contract_store((slice, slice, int, int, cell, cell, int, int, int, cell, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $UserDefaultCallback$_init_child
(cell, cell) $UserDefaultCallback$_init_child(cell sys', slice $master, slice $owner, cell $parameter) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Messenger$_init_child
(cell, cell) $Messenger$_init_child(cell sys', slice $owner, slice $sourceAddress, int $messengerId) inline_ref;

;; $ChildRouter$_fun_calculateReward
((slice, slice, int, int, cell, cell, int, int, int, cell, int), int) $ChildRouter$_fun_calculateReward((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, slice $addr) impure inline_ref;

;; $ChildRouter$_fun_messengerInit
((slice, slice, int, int, cell, cell, int, int, int, cell, int), (cell, cell)) $ChildRouter$_fun_messengerInit((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, slice $sourceAddress, int $messengerId) impure inline_ref;

;; $ChildRouter$_fun_messengerAddress
((slice, slice, int, int, cell, cell, int, int, int, cell, int), slice) $ChildRouter$_fun_messengerAddress((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, slice $sourceAddress, int $messengerId) impure inline_ref;

;; $ChildRouter$_fun_udcInit
((slice, slice, int, int, cell, cell, int, int, int, cell, int), (cell, cell)) $ChildRouter$_fun_udcInit((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, slice $owner, cell $parameter) impure inline_ref;

;; $ChildRouter$_fun_udcAddress
((slice, slice, int, int, cell, cell, int, int, int, cell, int), slice) $ChildRouter$_fun_udcAddress((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, slice $owner, cell $parameter) impure inline_ref;

;; $ChildRouter$_fun_messengerId
((slice, slice, int, int, cell, cell, int, int, int, cell, int), int) $ChildRouter$_fun_messengerId((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self) impure inline_ref;

;; $ChildRouter$_fun_getMessengerState
((slice, slice, int, int, cell, cell, int, int, int, cell, int), int) $ChildRouter$_fun_getMessengerState((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, int $messengerId) impure inline_ref;

;; $ChildRouter$_fun_getBalance
((slice, slice, int, int, cell, cell, int, int, int, cell, int), int) $ChildRouter$_fun_getBalance((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self) impure inline_ref;

;; $ChildRouter$_fun_forward
((slice, slice, int, int, cell, cell, int, int, int, cell, int), ()) $ChildRouter$_fun_forward((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $ChildRouter$_fun_notify
((slice, slice, int, int, cell, cell, int, int, int, cell, int), ()) $ChildRouter$_fun_notify((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self, cell $body) impure inline;

;; $ChildRouter$_fun_requireOwner
((slice, slice, int, int, cell, cell, int, int, int, cell, int), ()) $ChildRouter$_fun_requireOwner((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self) impure inline_ref;

;; $ChildRouter$_fun_owner
((slice, slice, int, int, cell, cell, int, int, int, cell, int), slice) $ChildRouter$_fun_owner((slice, slice, int, int, cell, cell, int, int, int, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline;

;; $BuildMessenger$_constructor_sourceAddress_eventId_maxUserStakeAmount_subscribeFeePerTick_template_sourceName
((slice, int, int, int, cell, slice)) $BuildMessenger$_constructor_sourceAddress_eventId_maxUserStakeAmount_subscribeFeePerTick_template_sourceName(slice sourceAddress, int eventId, int maxUserStakeAmount, int subscribeFeePerTick, cell template, slice sourceName) inline;

;; $ProtcolRegisterSuccess$_constructor_sourceAddress_eventId_maxUserStakeAmount_subscribeFeePerTick_template_sourceName
((slice, int, int, int, cell, slice)) $ProtcolRegisterSuccess$_constructor_sourceAddress_eventId_maxUserStakeAmount_subscribeFeePerTick_template_sourceName(slice sourceAddress, int eventId, int maxUserStakeAmount, int subscribeFeePerTick, cell template, slice sourceName) inline;

;; $BuildUDC$_constructor_owner
((slice)) $BuildUDC$_constructor_owner(slice owner) inline;

;; $CreateUdcSuccess$_constructor_walletAddress_callbackAddress
((slice, slice)) $CreateUdcSuccess$_constructor_walletAddress_callbackAddress(slice walletAddress, slice callbackAddress) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $CreateMsgSubscriber$_constructor_walletAddress_callbackAddress_eventId
((slice, slice, int)) $CreateMsgSubscriber$_constructor_walletAddress_callbackAddress_eventId(slice walletAddress, slice callbackAddress, int eventId) inline;

;; $DeleteSubscriber$_constructor_walletAddress_callbackAddress_eventId
((slice, slice, int)) $DeleteSubscriber$_constructor_walletAddress_callbackAddress_eventId(slice walletAddress, slice callbackAddress, int eventId) inline;

;; $EventSignal$_constructor_eventId_payload
((int, cell)) $EventSignal$_constructor_eventId_payload(int eventId, cell payload) inline;

;; $SendParameters$_constructor_to_value_mode_bounce
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline;

;; $Staked$_constructor_amount_staker_beneficiary
((int, slice, slice)) $Staked$_constructor_amount_staker_beneficiary(int amount, slice staker, slice beneficiary) inline;

;; $Withdrawn$_constructor_amount_receiver
((int, slice)) $Withdrawn$_constructor_amount_receiver(int amount, slice receiver) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
