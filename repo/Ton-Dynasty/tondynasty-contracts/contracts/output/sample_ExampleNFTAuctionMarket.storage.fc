;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: SetUpAuction
;; Header: 0xe9d20aef
;; TLB: set_up_auction#e9d20aef nftAddress:address reservePrice:coins buyNowPrice:coins auctionPeriod:uint256 beneficiary:Maybe address = SetUpAuction
;;

(slice, ((slice, int, int, int, slice))) $SetUpAuction$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3922856687);
    var v'nftAddress = sc_0~__tact_load_address();
    var v'reservePrice = sc_0~load_coins();
    var v'buyNowPrice = sc_0~load_coins();
    var v'auctionPeriod = sc_0~load_uint(256);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'beneficiary = sc_1~__tact_load_address_opt();
    return (sc_0, (v'nftAddress, v'reservePrice, v'buyNowPrice, v'auctionPeriod, v'beneficiary));
}

;;
;; Type: ReviseSetUpAuction
;; Header: 0x894cc45a
;; TLB: revise_set_up_auction#894cc45a nftAddress:address reservePrice:coins buyNowPrice:coins auctionPeriod:uint256 beneficiary:Maybe address = ReviseSetUpAuction
;;

(slice, ((slice, int, int, int, slice))) $ReviseSetUpAuction$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2303509594);
    var v'nftAddress = sc_0~__tact_load_address();
    var v'reservePrice = sc_0~load_coins();
    var v'buyNowPrice = sc_0~load_coins();
    var v'auctionPeriod = sc_0~load_uint(256);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'beneficiary = sc_1~__tact_load_address_opt();
    return (sc_0, (v'nftAddress, v'reservePrice, v'buyNowPrice, v'auctionPeriod, v'beneficiary));
}

;;
;; Type: AuctionInfo
;; TLB: _ bidIncreasePercentage:uint256 auctionBidPeriod:uint256 auctionPeriod:uint256 reservePrice:coins buyNowPrice:coins nftHighestBid:coins nftHighestBidder:address nftSeller:address whitelistedBuyer:address nftRecipient:address beneficiary:address = AuctionInfo
;;

builder $AuctionInfo$_store(builder build_0, (int, int, int, int, int, int, slice, slice, slice, slice, slice) v) inline_ref {
    var (v'bidIncreasePercentage, v'auctionBidPeriod, v'auctionPeriod, v'reservePrice, v'buyNowPrice, v'nftHighestBid, v'nftHighestBidder, v'nftSeller, v'whitelistedBuyer, v'nftRecipient, v'beneficiary) = v;
    build_0 = build_0.store_uint(v'bidIncreasePercentage, 256);
    build_0 = build_0.store_uint(v'auctionBidPeriod, 256);
    build_0 = build_0.store_uint(v'auctionPeriod, 256);
    build_0 = build_0.store_coins(v'reservePrice);
    build_0 = build_0.store_coins(v'buyNowPrice);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'nftHighestBid);
    build_1 = __tact_store_address(build_1, v'nftHighestBidder);
    build_1 = __tact_store_address(build_1, v'nftSeller);
    build_1 = __tact_store_address(build_1, v'whitelistedBuyer);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'nftRecipient);
    build_2 = __tact_store_address(build_2, v'beneficiary);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

((int, int, int, int, int, int, slice, slice, slice, slice, slice)) $AuctionInfo$_constructor_bidIncreasePercentage_auctionBidPeriod_auctionPeriod_reservePrice_buyNowPrice_nftHighestBid_nftHighestBidder_nftSeller_whitelistedBuyer_nftRecipient_beneficiary(int bidIncreasePercentage, int auctionBidPeriod, int auctionPeriod, int reservePrice, int buyNowPrice, int nftHighestBid, slice nftHighestBidder, slice nftSeller, slice whitelistedBuyer, slice nftRecipient, slice beneficiary) inline {
    return (bidIncreasePercentage, auctionBidPeriod, auctionPeriod, reservePrice, buyNowPrice, nftHighestBid, nftHighestBidder, nftSeller, whitelistedBuyer, nftRecipient, beneficiary);
}

;;
;; Type: ReviseAuction
;; Header: 0xb78ba468
;; TLB: revise_auction#b78ba468 reviseAuctionInfo:AuctionInfo{bidIncreasePercentage:uint256,auctionBidPeriod:uint256,auctionPeriod:uint256,reservePrice:coins,buyNowPrice:coins,nftHighestBid:coins,nftHighestBidder:address,nftSeller:address,whitelistedBuyer:address,nftRecipient:address,beneficiary:address} = ReviseAuction
;;

builder $ReviseAuction$_store(builder build_0, ((int, int, int, int, int, int, slice, slice, slice, slice, slice)) v) inline {
    var ((v'reviseAuctionInfo'bidIncreasePercentage, v'reviseAuctionInfo'auctionBidPeriod, v'reviseAuctionInfo'auctionPeriod, v'reviseAuctionInfo'reservePrice, v'reviseAuctionInfo'buyNowPrice, v'reviseAuctionInfo'nftHighestBid, v'reviseAuctionInfo'nftHighestBidder, v'reviseAuctionInfo'nftSeller, v'reviseAuctionInfo'whitelistedBuyer, v'reviseAuctionInfo'nftRecipient, v'reviseAuctionInfo'beneficiary)) = v;
    build_0 = store_uint(build_0, 3079382120, 32);
    var build_1 = begin_cell();
    build_1 = $AuctionInfo$_store(build_1, (v'reviseAuctionInfo'bidIncreasePercentage, v'reviseAuctionInfo'auctionBidPeriod, v'reviseAuctionInfo'auctionPeriod, v'reviseAuctionInfo'reservePrice, v'reviseAuctionInfo'buyNowPrice, v'reviseAuctionInfo'nftHighestBid, v'reviseAuctionInfo'nftHighestBidder, v'reviseAuctionInfo'nftSeller, v'reviseAuctionInfo'whitelistedBuyer, v'reviseAuctionInfo'nftRecipient, v'reviseAuctionInfo'beneficiary));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $ReviseAuction$_store_cell(((int, int, int, int, int, int, slice, slice, slice, slice, slice)) v) inline {
    return $ReviseAuction$_store(begin_cell(), v).end_cell();
}

(((int, int, int, int, int, int, slice, slice, slice, slice, slice))) $ReviseAuction$_constructor_reviseAuctionInfo((int, int, int, int, int, int, slice, slice, slice, slice, slice) reviseAuctionInfo) inline {
    return (reviseAuctionInfo);
}

;;
;; Type: BuildNftAuction
;; Header: 0xeb94a059
;; TLB: build_nft_auction#eb94a059 auctionInfo:AuctionInfo{bidIncreasePercentage:uint256,auctionBidPeriod:uint256,auctionPeriod:uint256,reservePrice:coins,buyNowPrice:coins,nftHighestBid:coins,nftHighestBidder:address,nftSeller:address,whitelistedBuyer:address,nftRecipient:address,beneficiary:address} = BuildNftAuction
;;

builder $BuildNftAuction$_store(builder build_0, ((int, int, int, int, int, int, slice, slice, slice, slice, slice)) v) inline {
    var ((v'auctionInfo'bidIncreasePercentage, v'auctionInfo'auctionBidPeriod, v'auctionInfo'auctionPeriod, v'auctionInfo'reservePrice, v'auctionInfo'buyNowPrice, v'auctionInfo'nftHighestBid, v'auctionInfo'nftHighestBidder, v'auctionInfo'nftSeller, v'auctionInfo'whitelistedBuyer, v'auctionInfo'nftRecipient, v'auctionInfo'beneficiary)) = v;
    build_0 = store_uint(build_0, 3952386137, 32);
    var build_1 = begin_cell();
    build_1 = $AuctionInfo$_store(build_1, (v'auctionInfo'bidIncreasePercentage, v'auctionInfo'auctionBidPeriod, v'auctionInfo'auctionPeriod, v'auctionInfo'reservePrice, v'auctionInfo'buyNowPrice, v'auctionInfo'nftHighestBid, v'auctionInfo'nftHighestBidder, v'auctionInfo'nftSeller, v'auctionInfo'whitelistedBuyer, v'auctionInfo'nftRecipient, v'auctionInfo'beneficiary));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $BuildNftAuction$_store_cell(((int, int, int, int, int, int, slice, slice, slice, slice, slice)) v) inline {
    return $BuildNftAuction$_store(begin_cell(), v).end_cell();
}

(((int, int, int, int, int, int, slice, slice, slice, slice, slice))) $BuildNftAuction$_constructor_auctionInfo((int, int, int, int, int, int, slice, slice, slice, slice, slice) auctionInfo) inline {
    return (auctionInfo);
}

;;
;; Type: EndAuction
;; Header: 0x532a792d
;; TLB: end_auction#532a792d nftAddress:address = EndAuction
;;

(slice, ((slice))) $EndAuction$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1395292461);
    var v'nftAddress = sc_0~__tact_load_address();
    return (sc_0, (v'nftAddress));
}

;;
;; Type: TransferNFT
;; Header: 0x8ad9b2de
;; TLB: transfer_nft#8ad9b2de nftAddress:address seller:address query_id:uint64 new_owner:address response_destination:address custom_payload:Maybe ^cell forward_amount:coins forward_payload:remainder<slice> = TransferNFT
;;

(slice, ((slice, slice, int, slice, slice, cell, int, slice))) $TransferNFT$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2329522910);
    var v'nftAddress = sc_0~__tact_load_address();
    var v'seller = sc_0~__tact_load_address();
    var v'query_id = sc_0~load_uint(64);
    var v'new_owner = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'response_destination = sc_1~__tact_load_address();
    var v'custom_payload = sc_1~load_int(1) ? sc_1~load_ref() : null();
    var v'forward_amount = sc_1~load_coins();
    var v'forward_payload = sc_1;
    return (sc_0, (v'nftAddress, v'seller, v'query_id, v'new_owner, v'response_destination, v'custom_payload, v'forward_amount, v'forward_payload));
}

;;
;; Type: Transfer
;; Header: 0x5fcc3d14
;; TLB: transfer#5fcc3d14 query_id:uint64 new_owner:address response_destination:address custom_payload:Maybe ^cell forward_amount:coins forward_payload:remainder<slice> = Transfer
;;

builder $Transfer$_store(builder build_0, (int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'new_owner, v'response_destination, v'custom_payload, v'forward_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 1607220500, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'new_owner);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $Transfer$_store_cell((int, slice, slice, cell, int, slice) v) inline {
    return $Transfer$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(int query_id, slice new_owner, slice response_destination, cell custom_payload, int forward_amount, slice forward_payload) inline {
    return (query_id, new_owner, response_destination, custom_payload, forward_amount, forward_payload);
}

;;
;; Type: OwnershipAssigned
;; Header: 0x05138d91
;; TLB: ownership_assigned#05138d91 query_id:uint64 prev_owner:address forward_payload:remainder<slice> = OwnershipAssigned
;;

(slice, ((int, slice, slice))) $OwnershipAssigned$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 85167505);
    var v'query_id = sc_0~load_uint(64);
    var v'prev_owner = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'prev_owner, v'forward_payload));
}

;;
;; Type: ExampleNFTAuctionMarket
;;

builder $ExampleNFTAuctionMarket$_store(builder build_0, (slice, cell, cell, cell, cell) v) inline {
    var (v'owner, v'nftContractAuctions, v'auctionTransferCheck, v'collectionNftIdToAuction, v'auctionOverCheck) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'nftContractAuctions);
    build_0 = build_0.store_dict(v'auctionTransferCheck);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'collectionNftIdToAuction);
    build_1 = build_1.store_dict(v'auctionOverCheck);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, cell, cell, cell, cell))) $ExampleNFTAuctionMarket$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'nftContractAuctions = sc_0~load_dict();
    var v'auctionTransferCheck = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'collectionNftIdToAuction = sc_1~load_dict();
    var v'auctionOverCheck = sc_1~load_dict();
    return (sc_0, (v'owner, v'nftContractAuctions, v'auctionTransferCheck, v'collectionNftIdToAuction, v'auctionOverCheck));
}

(slice, ((slice))) $ExampleNFTAuctionMarket$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, cell, cell, cell, cell) $ExampleNFTAuctionMarket$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ExampleNFTAuctionMarket$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$ExampleNFTAuctionMarket$init$_load();
        $sc.end_parse();
        return $ExampleNFTAuctionMarket$_contract_init(owner);
    }
}

() $ExampleNFTAuctionMarket$_contract_store((slice, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $ExampleNFTAuctionMarket$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: ExampleNFTAuction
;;

builder $ExampleNFTAuction$init$_store(builder build_0, (slice, slice, slice) v) inline {
    var (v'owner, v'nftAddress, v'seller) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'nftAddress);
    build_0 = __tact_store_address(build_0, v'seller);
    return build_0;
}

(cell, cell) $ExampleNFTAuction$_init_child(cell sys', slice $owner, slice $nftAddress, slice $seller) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: ExampleNFTAuction
    cell mine = __tact_dict_get_code(source, 46968);
    contracts = __tact_dict_set_code(contracts, 46968, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $ExampleNFTAuction$init$_store(b, ($owner, $nftAddress, $seller));
    return (mine, b.end_cell());
}