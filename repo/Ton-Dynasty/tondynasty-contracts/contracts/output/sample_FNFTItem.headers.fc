;;
;; Header files for FNFTItem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Transfer$_load
(slice, ((int, slice, slice, cell, int, slice))) $Transfer$_load(slice sc_0) inline_ref;

;; $OwnershipAssigned$_store
builder $OwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline;

;; $OwnershipAssigned$_store_cell
cell $OwnershipAssigned$_store_cell((int, slice, slice) v) inline;

;; $Excesses$_store
builder $Excesses$_store(builder build_0, (int) v) inline;

;; $Excesses$_store_cell
cell $Excesses$_store_cell((int) v) inline;

;; $GetStaticData$_load
(slice, ((int))) $GetStaticData$_load(slice sc_0) inline;

;; $ReportStaticData$_store
builder $ReportStaticData$_store(builder build_0, (int, int, slice) v) inline;

;; $ReportStaticData$_store_cell
cell $ReportStaticData$_store_cell((int, int, slice) v) inline;

;; $JettonMint$_store
builder $JettonMint$_store(builder build_0, (slice, slice, int, cell, int, slice) v) inline_ref;

;; $JettonMint$_store_cell
cell $JettonMint$_store_cell((slice, slice, int, cell, int, slice) v) inline;

;; $FractionParams$_store
builder $FractionParams$_store(builder build_0, (int, cell) v) inline;

;; $FractionParams$_load
(slice, ((int, cell))) $FractionParams$_load(slice sc_0) inline;

;; $TryRedeem$_store
builder $TryRedeem$_store(builder build_0, (slice) v) inline;

;; $TryRedeem$_store_cell
cell $TryRedeem$_store_cell((slice) v) inline;

;; $Compose$_load
(slice, ((slice))) $Compose$_load(slice sc_0) inline;

;; $FNFTItem$_store
builder $FNFTItem$_store(builder build_0, (slice, int, slice, cell, int, int, (int, cell)) v) inline;

;; $FNFTItem$_load
(slice, ((slice, int, slice, cell, int, int, (int, cell)))) $FNFTItem$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_as_optional
tuple $StateInit$_as_optional((cell, cell) v) inline;

;; $NftData$_to_external
(int, int, slice, slice, cell) $NftData$_to_external(((int, int, slice, slice, cell)) v) inline;

;; $NFTFraction$init$_store
builder $NFTFraction$init$_store(builder build_0, (int, slice, cell) v) inline;

;; $FNFTItem$init$_load
(slice, ((slice, int, slice, cell, (int, cell)))) $FNFTItem$init$_load(slice sc_0) inline;

;; $FNFTItem$_contract_init
(slice, int, slice, cell, int, int, (int, cell)) $FNFTItem$_contract_init(slice $collection_address, int $index, slice $owner, cell $individual_content, (int, cell) $fraction_params) impure inline_ref;

;; $FNFTItem$_contract_load
(slice, int, slice, cell, int, int, (int, cell)) $FNFTItem$_contract_load() impure inline_ref;

;; $FNFTItem$_contract_store
() $FNFTItem$_contract_store((slice, int, slice, cell, int, int, (int, cell)) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $NFTFraction$_init_child
(cell, cell) $NFTFraction$_init_child(cell sys', int $max_supply, slice $owner, cell $jetton_content) inline_ref;

;; $FNFTItem$_fun_get_jetton_master_init
((slice, int, slice, cell, int, int, (int, cell)), (cell, cell)) $FNFTItem$_fun_get_jetton_master_init((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline;

;; $FNFTItem$_fun_ensureUnlocked
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_ensureUnlocked((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline;

;; $FNFTItem$_fun_requireOwner
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_requireOwner((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline_ref;

;; $FNFTItem$_fun_fractionalize_validate
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_fractionalize_validate((slice, int, slice, cell, int, int, (int, cell)) $self, (int, slice, int, slice) $ctx) impure inline;

;; $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload
((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice origin, slice receiver, int amount, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;

;; $FNFTItem$_fun_lock
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_lock((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline;

;; $FNFTItem$_fun_forward
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_forward((slice, int, slice, cell, int, int, (int, cell)) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $FNFTItem$_fun_fractionalize
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_fractionalize((slice, int, slice, cell, int, int, (int, cell)) $self, (int, slice, int, slice) $ctx) impure inline;

;; $FNFTItem$_fun__transfer_validate
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun__transfer_validate((slice, int, slice, cell, int, int, (int, cell)) $self, (int, slice, int, slice) $ctx, (int, slice, slice, cell, int, slice) $msg, int $remain) impure inline;

;; $FNFTItem$_fun__transfer_estimate_rest_value
((slice, int, slice, cell, int, int, (int, cell)), int) $FNFTItem$_fun__transfer_estimate_rest_value((slice, int, slice, cell, int, int, (int, cell)) $self, (int, slice, int, slice) $ctx) impure inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $Excesses$_constructor_query_id
((int)) $Excesses$_constructor_query_id(int query_id) inline;

;; $FNFTItem$_fun_mint
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_mint((slice, int, slice, cell, int, int, (int, cell)) $self, (int, slice, int, slice) $ctx, (int, slice, slice, cell, int, slice) $msg) impure inline;

;; $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload
((int, slice, slice)) $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int query_id, slice prev_owner, slice forward_payload) inline;

;; $FNFTItem$_fun_transfer
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_transfer((slice, int, slice, cell, int, int, (int, cell)) $self, (int, slice, int, slice) $ctx, (int, slice, slice, cell, int, slice) $msg, int $remain) impure inline;

;; $ReportStaticData$_constructor_query_id_index_collection
((int, int, slice)) $ReportStaticData$_constructor_query_id_index_collection(int query_id, int index, slice collection) inline;

;; $FNFTItem$_fun__report_static_data
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun__report_static_data((slice, int, slice, cell, int, int, (int, cell)) $self, (int) $msg) impure inline;

;; $NftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content
((int, int, slice, slice, cell)) $NftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content(int is_initialized, int index, slice collection_address, slice owner_address, cell individual_content) inline;

;; $FNFTItem$_fun__get_nft_data
((slice, int, slice, cell, int, int, (int, cell)), (int, int, slice, slice, cell)) $FNFTItem$_fun__get_nft_data((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline;

;; $FNFTItem$_fun_get_nft_data
((slice, int, slice, cell, int, int, (int, cell)), (int, int, slice, slice, cell)) $FNFTItem$_fun_get_nft_data((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline_ref;

;; $FNFTItem$_fun_unlock
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_unlock((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline;

;; $FNFTItem$_fun_ensureLocked
((slice, int, slice, cell, int, int, (int, cell)), ()) $FNFTItem$_fun_ensureLocked((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline;

;; $FNFTItem$_fun_is_locked
((slice, int, slice, cell, int, int, (int, cell)), int) $FNFTItem$_fun_is_locked((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline_ref;

;; $FNFTItem$_fun_owner
((slice, int, slice, cell, int, int, (int, cell)), slice) $FNFTItem$_fun_owner((slice, int, slice, cell, int, int, (int, cell)) $self) impure inline_ref;

;; $TryRedeem$_constructor_sender
((slice)) $TryRedeem$_constructor_sender(slice sender) inline;
