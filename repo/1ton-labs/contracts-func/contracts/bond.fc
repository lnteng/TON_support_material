#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

(slice, int, cell, cell, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return 
    (
        ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref(), ;; nft_item_code
        ds~load_msg_addr() ;; lending_protocol_address
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, slice lending_protocol_address) impure inline {
    set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_slice(lending_protocol_address)
    .end_cell());
}

{-
// This function initializes the state of an nft item, which will later be stored on the blockchain.
// It takes the following parameters:
// - item_index: The index of the item in the nft items list.
// - nft_item_code: The code of the nft item that will be initialized.
// - lending_protocol_address: The address of the lending protocol.
// The function returns the initialized nft item state.
-}
cell calculate_nft_item_state_init(int item_index, cell nft_item_code, slice lending_protocol_address) {
    cell data = begin_cell()
      .store_uint(item_index, 64)
      .store_slice(my_address())
      .store_slice(lending_protocol_address)
      .end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content, slice lending_protocol_address) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code, lending_protocol_address);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, lending_protocol_address) = load_data();
  
    if (op == 1) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        if (is_last) {
            deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), lending_protocol_address);
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, lending_protocol_address);
        }
        return ();
    }

    if (op == 3) { ;; change owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, lending_protocol_address);
        return ();
    }
    throw(0xffff);
}

;; Get methods
{-
// this function gets the next item in the collection and returns 
// the next item index, the item itself, the owner address, and the lending protocol address
-}
(int, cell, slice, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, lending_protocol_address) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address, lending_protocol_address);
}

{-
// This function gets the address of an NFT item by index.
// The NFT item is specified by the index of the NFT item.
-}
slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, lending_protocol_address) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code, lending_protocol_address);
    return calculate_nft_item_address(workchain(), state_init);
}

{-
// This function takes the index of the NFT and the individual NFT's content, and returns the offchain content for the NFT
// The individual NFT content is stored in the offchain data of the NFT, and the common content is stored in the contract's data.
// The function returns the offchain content, which is a cell containing the offchain tag, the common content, and the individual NFT content.
-}
cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain. 
-}
slice get_version() method_id {
    return "v0.1";
}
