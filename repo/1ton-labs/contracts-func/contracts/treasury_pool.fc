#include "imports/stdlib.fc";
const op::transfer_ownership = 1;
const op::deposit = 2;
const op::withdraw = 3;

int min_tons_for_storage() asm "30000000 PUSHINT"; ;; 0.03 TON

int min_tons_for_withdraw() asm "10000000 PUSHINT"; ;; 0.03 TON

(int, slice, slice, slice, int) load_data() {
    slice ds = get_data().begin_parse();
    var (treasury_admin_address, nft_item_address) = (ds~load_msg_addr(), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (-1, treasury_admin_address, nft_item_address, ds~load_msg_addr(), ds~load_coins());
    } else {
        return (0, treasury_admin_address, nft_item_address, null(), 0); ;; pool not initialized yet
    }
}

() store_data(slice treasury_admin_address, slice nft_item_address, slice owner_address, int balance) impure {
    set_data(
        begin_cell()
                    .store_slice(treasury_admin_address)
                    .store_slice(nft_item_address)
                    .store_slice(owner_address)
                    .store_coins(balance)
                    .end_cell()
    );
}

{-
// this function adds the deposit amount to the balance
// it is used to increase the balance of an account
// sender is the account that is making the deposit
// deposit_amount is the amount of money that the account is depositing
// balance is the current balance of the account
-}
(int) deposit(slice sender, int deposit_amount, int balance) impure {
    throw_unless(500, deposit_amount >= 0);
    int new_balance = balance + deposit_amount;
    return new_balance;
}


{-
// This code withdraws a specified amount.
//
// Arguments:
//     receiver: the address of the receiver
//     withdraw_amount: the amount of tokens to withdraw
//     owner_address: the address of the pool owner
//     balance: the balance of the pool
//
// Returns:
//     the new balance of the pool
-}
(int) withdraw(slice receiver, int withdraw_amount, slice owner_address, int balance) impure {
    throw_unless(501, equal_slices(receiver, owner_address));
    throw_unless(502, balance >= withdraw_amount);
    int send_amount = withdraw_amount + min_tons_for_withdraw();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(receiver)
            .store_coins(send_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; see more detail in message scheme
            .end_cell();
    send_raw_message(msg, 1);
    int new_balance = balance - withdraw_amount;
    return new_balance;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    var (init, treasury_admin_address, nft_item_address, owner_address, balance) = load_data();


    if (~ init) {
        throw_unless(405, equal_slices(treasury_admin_address, sender_address));
        store_data(treasury_admin_address, nft_item_address, in_msg_body~load_msg_addr(), 0);
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_ownership) { ;; handle op::transfer_ownership
        var (new_owner_address) = in_msg_body~load_msg_addr();
        throw_unless(503, equal_slices(sender_address, owner_address));
        store_data(treasury_admin_address, nft_item_address, new_owner_address, balance);
        return ();
    } elseif (op == op::deposit) { ;; handle op::deposit
        int deposit_amount = in_msg_body~load_coins();
        int transfer_amount = msg_value - min_tons_for_storage();
        throw_unless(504, transfer_amount >= deposit_amount);
        var (new_balance) = deposit(sender_address, deposit_amount, balance);
        store_data(treasury_admin_address, nft_item_address, owner_address, new_balance);
        return ();
    } elseif (op == op::withdraw) { ;; handle op::withdraw
        int withdraw_amount = in_msg_body~load_coins();
        int transfer_amount = my_balance - min_tons_for_storage() - min_tons_for_withdraw();
        throw_unless(505, transfer_amount >= withdraw_amount);
        var (new_balance) = withdraw(sender_address, withdraw_amount, owner_address, balance);
        store_data(treasury_admin_address, nft_item_address, owner_address, new_balance);
        return ();
    }

    throw(0xffff);
}

{-
// This code is used to get the pool data, which includes the owner's address
// and the balance of the pool.
-}
(slice, int) get_pool_data() method_id {
    (_, _, _, slice owner_address, int balance) = load_data();
    return (owner_address, balance);
}
