#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions
#include "treasury_utils.fc";
const op::create_pool = 1;

int min_tons_for_storage() asm "30000000 PUSHINT"; ;; 0.03 TON
int min_tons_for_create_pool() asm "30000000 PUSHINT"; ;; 0.03 TON

(int, slice, cell) load_data() impure {
    var ds = get_data().begin_parse();
    var (index, owner_address, pool_code) = (ds~load_uint(64), ds~load_msg_addr(), ds~load_ref()); ;; treasury_pool_code
    ds.end_parse();
    return (index, owner_address, pool_code);
}

() save_data(int index, slice owner_address, cell pool_code) impure {
    set_data(
        begin_cell()
                    .store_uint(index, 64)
                    .store_slice(owner_address)
                    .store_ref(pool_code)
                    .end_cell()
    );
}

{-
// This function creates a new treasury pool, which is a contract that allows users to send tokens to the pool, and receive tokens from the pool in exchange.
// The pool code is the code of the contract that will be deployed to the address of the pool.
// The send amount is the amount of nanograms of the pool currency that will be sent to the pool.
// The pool content is the initial state of the pool. It must contain a public key, and the pool address. In addition, it may contain any other data that the pool code requires.
-}
() create_pool(slice nft_item_address, cell pool_code, int send_amount, cell pool_content) impure {
    cell state_init = calculate_treasury_pool_state_init(my_address(), nft_item_address, pool_code);
    slice pool_address = calculate_treasury_pool_address_by_state(state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(pool_address)
            .store_coins(send_amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(pool_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    var (index, owner_address, pool_code) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == 1) { ;; handle op::create_pool
        var (nft_item_address, amount, content) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins(), in_msg_body~load_ref());
        create_pool(nft_item_address, pool_code, amount, content);
        save_data(index, owner_address, pool_code);
        return ();
    }

    throw(0xffff);
}

{-
// This function is called by a treasury contract to calculate the address of a treasury pool.
// nft_item_address - the address of the NFT item whose address is to be calculated.
// returns the address of the treasury pool.
-}
(slice) get_treasury_pool_address(slice nft_item_address) method_id {
    var (index, owner_address, pool_code) = load_data();
    slice pool_address = calculate_treasury_pool_address(my_address(), nft_item_address, pool_code);
    return pool_address; ;; then return the value
}
