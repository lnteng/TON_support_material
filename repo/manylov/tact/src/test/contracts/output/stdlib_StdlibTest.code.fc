#pragma version >=0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

builder __gen_write_StdlibTest(builder build_0, (int) v) inline {
    var (v'v) = v;
    build_0 = build_0.store_int(v'v, 257);
    return build_0;
}

(slice, ((int))) __gen_read_StdlibTest(slice sc_0) inline {
    var v'v = sc_0~load_int(257);
    return (sc_0, (v'v));
}

(int) $__gen_StdlibTest_init() impure inline_ref {
    var (($self'v)) = (0);
    return ($self'v);
}

(int) __gen_load_StdlibTest() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_StdlibTest();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $__gen_StdlibTest_init();
    }
}

() __gen_store_StdlibTest((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_StdlibTest(b, v);
    set_data(b.end_cell());
}

int $__gen_StdlibTest_sliceEmpty((int) $self, slice $sc) impure inline_ref {
    var (($self'v)) = $self;
    return slice_empty?($sc);
}

_ $__gen_get_sliceEmpty(slice $$sc) method_id(73995) {
    slice $sc = $$sc;
    var self = __gen_load_StdlibTest();
    var res = $__gen_StdlibTest_sliceEmpty(self, $sc);
    return res;
}

int $__gen_StdlibTest_sliceBits((int) $self, slice $sc) impure inline_ref {
    var (($self'v)) = $self;
    return slice_bits($sc);
}

_ $__gen_get_sliceBits(slice $$sc) method_id(75090) {
    slice $sc = $$sc;
    var self = __gen_load_StdlibTest();
    var res = $__gen_StdlibTest_sliceBits(self, $sc);
    return res;
}

int $__gen_StdlibTest_sliceRefs((int) $self, slice $sc) impure inline_ref {
    var (($self'v)) = $self;
    return slice_refs($sc);
}

_ $__gen_get_sliceRefs(slice $$sc) method_id(77445) {
    slice $sc = $$sc;
    var self = __gen_load_StdlibTest();
    var res = $__gen_StdlibTest_sliceRefs(self, $sc);
    return res;
}

(((int)), ()) $__gen_StdlibTest_receive((int) $self) impure inline {
    var ($self'v) = $self;
    return (($self'v), ());
}

((int), int) __gen_router_StdlibTest((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~$__gen_StdlibTest_receive();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_StdlibTest();
    
    ;; Handle operation
    int handled = self~__gen_router_StdlibTest(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_StdlibTest(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmWhptfo85jfiNyGwbjaB8Sw4K1bR9v2Wqi2naxYqepCfD";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
