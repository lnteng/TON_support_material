#pragma version >=0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v) asm "4 UNTUPLE";

(int, int, int, int) __gen_Source_from_tuple(tuple v) inline {
    var (int v'a, int v'b, int v'c, int v'd) = __tact_tuple_destroy_4(v);
    return (v'a, v'b, v'c, v'd);
}

tuple $__gen_Empty_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

tuple __gen_load_Empty() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $__gen_Empty_init();
    }
}

() __gen_store_Empty(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

int $isZero(int $x, int $y, int $z, (int, int, int, int) $m) impure inline_ref {
    var (($m'a, $m'b, $m'c, $m'd)) = $m;
    int $b = ($x + $y);
    $b = ((($b + 1) + $m'a) + $m'b);
    int $c = ($y >> 123);
    int $d = ($x << 10);
    return (((($b > 0) & $z) & ($c == 0)) & ($d == 0));
}

int $__gen_Empty_a(tuple $self, int $x, int $y, int $z, (int, int, int, int) $m) impure inline_ref {
    var ($self) = $self;
    var (($m'a, $m'b, $m'c, $m'd)) = $m;
    return $isZero($x, $y, $z, ($m'a, $m'b, $m'c, $m'd));
}

_ $__gen_get_a(int $$x, int $$y, int $$z, tuple $$m) method_id(97415) {
    int $x = $$x;
    int $y = $$y;
    int $z = $$z;
    (int, int, int, int) $m = __gen_Source_from_tuple($$m);
    var self = __gen_load_Empty();
    var res = $__gen_Empty_a(self, $x, $y, $z, $m);
    return res;
}

(tuple, int) __gen_router_Empty(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_Empty();
    
    ;; Handle operation
    int handled = self~__gen_router_Empty(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_Empty(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmevJcAufvYYaafzMzpw6wHJNmfVhyBDgoFah3UnM8HNxx";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
