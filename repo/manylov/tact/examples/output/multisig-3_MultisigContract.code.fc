#pragma version >=0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

builder __gen_write_Operation(builder build_0, (int, int, slice) v) inline {
    var (v'seqno, v'amount, v'target) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'target);
    return build_0;
}

cell __gen_writecell_Operation((int, int, slice) v) inline {
    return __gen_write_Operation(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice))) __gen_read_Operation(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'amount = sc_0~load_coins();
    var v'target = sc_0~__tact_load_address();
    return (sc_0, (v'seqno, v'amount, v'target));
}

(slice, (((int, int, slice), slice, slice, slice))) __gen_read_Execute(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 520967536);
    var v'operation = sc_0~__gen_read_Operation();
    var v'signature1 = sc_0~load_ref().begin_parse();
    var v'signature2 = sc_0~load_ref().begin_parse();
    var v'signature3 = sc_0~load_ref().begin_parse();
    return (sc_0, (v'operation, v'signature1, v'signature2, v'signature3));
}

builder __gen_write_MultisigContract(builder build_0, (int, int, int, int) v) inline {
    var (v'seqno, v'user1_key, v'user2_key, v'user3_key) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'user1_key, 256);
    build_0 = build_0.store_uint(v'user2_key, 256);
    build_0 = build_0.store_uint(v'user3_key, 256);
    return build_0;
}

(slice, ((int, int, int, int))) __gen_read_MultisigContract(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'user1_key = sc_0~load_uint(256);
    var v'user2_key = sc_0~load_uint(256);
    var v'user3_key = sc_0~load_uint(256);
    return (sc_0, (v'seqno, v'user1_key, v'user2_key, v'user3_key));
}

((int, int, slice)) __gen_Operation_unpack((int, int, slice) v) asm "NOP";

(slice, ((int, int, int))) __gen_read_$init$MultisigContract(slice sc_0) inline {
    var v'key1 = sc_0~load_int(257);
    var v'key2 = sc_0~load_int(257);
    var v'key3 = sc_0~load_int(257);
    return (sc_0, (v'key1, v'key2, v'key3));
}

(int, int, int, int) $__gen_MultisigContract_init(int $key1, int $key2, int $key3) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = (0, null(), null(), null());
    $self'user1_key = $key1;
    $self'user2_key = $key2;
    $self'user3_key = $key3;
    return ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key);
}

(int, int, int, int) __gen_load_MultisigContract() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_MultisigContract();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int key1, int key2, int key3) = $sc~__gen_read_$init$MultisigContract();
        $sc.end_parse();
        return $__gen_MultisigContract_init(key1, key2, key3);
    }
}

() __gen_store_MultisigContract((int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_MultisigContract(b, v);
    set_data(b.end_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value(slice to, int value) inline {
    return (true, to, value, 0, null(), null(), null());
}

((int, int, int, int), ()) $__gen_MultisigContract_execute((int, int, int, int) $self, (int, int, slice) $op) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    var (($op'seqno, $op'amount, $op'target)) = $op;
    $send(__gen_constructor_SendParameters$to_value($op'target, $op'amount));
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), ());
}

int $__gen_MultisigContract_key1((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return $self'user1_key;
}

_ $__gen_get_key1() method_id(107493) {
    var self = __gen_load_MultisigContract();
    var res = $__gen_MultisigContract_key1(self);
    return res;
}

int $__gen_MultisigContract_key2((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return $self'user2_key;
}

_ $__gen_get_key2() method_id(103302) {
    var self = __gen_load_MultisigContract();
    var res = $__gen_MultisigContract_key2(self);
    return res;
}

int $__gen_MultisigContract_key3((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return $self'user3_key;
}

_ $__gen_get_key3() method_id(99239) {
    var self = __gen_load_MultisigContract();
    var res = $__gen_MultisigContract_key3(self);
    return res;
}

int $__gen_MultisigContract_seqno((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return $self'seqno;
}

_ $__gen_get_seqno() method_id(85143) {
    var self = __gen_load_MultisigContract();
    var res = $__gen_MultisigContract_seqno(self);
    return res;
}

((int, int, int, int), ()) $__gen_MultisigContract_receive_comment_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246((int, int, int, int) $self) impure inline {
    var ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key) = $self;
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), ());
}

(((int, int, int, int)), ()) $__gen_MultisigContract_receive_Execute((int, int, int, int) $self, ((int, int, slice), slice, slice, slice) $msg) impure inline {
    var ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key) = $self;
    var (($msg'operation'seqno, $msg'operation'amount, $msg'operation'target), $msg'signature1, $msg'signature2, $msg'signature3) = $msg;
    int $op_hash = cell_hash(__gen_writecell_Operation(($msg'operation'seqno, $msg'operation'amount, $msg'operation'target)));
    int $ok1 = check_signature($op_hash, $msg'signature1, $self'user1_key);
    int $ok2 = check_signature($op_hash, $msg'signature2, $self'user2_key);
    int $ok3 = check_signature($op_hash, $msg'signature3, $self'user3_key);
    throw_unless(17654, ($msg'operation'seqno == $self'seqno));
    throw_unless(48401, (($ok1 & $ok2) & $ok3));
    ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)~$__gen_MultisigContract_execute(__gen_Operation_unpack(($msg'operation'seqno, $msg'operation'amount, $msg'operation'target)));
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), ());
}

((int, int, int, int), int) __gen_router_MultisigContract((int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Execute message
    if (op == 520967536) {
        var msg = in_msg~__gen_read_Execute();
        self~$__gen_MultisigContract_receive_Execute(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            self~$__gen_MultisigContract_receive_comment_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_MultisigContract();
    
    ;; Handle operation
    int handled = self~__gen_router_MultisigContract(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_MultisigContract(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmZgQBkpPYK7oYMNVZxUfe4csDsAXdB5nY9DEHspBf6Go9";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
