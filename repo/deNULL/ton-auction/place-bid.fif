#!/usr/bin/env fift -s
"auction-utils.fif" include

{ ."<auction-id> [<wallet-addr> <bid-amount> [-B <bid-filename>]] [-O <output-boc>]" cr
  ."Prepares an internal message body to be sent to an auction from a wallet with address <wallet-addr>, containing a bid equal to <bid-amount>." cr
  ."<wallet-addr>, <bid-amount> are only needed for blind auctions (auction_type=64..65)." cr
  ."In case of a blind auction, writes the signature of the bid to the internal message: "
  ."the actual bid is stored to <bid-filename>.boc ('bid.boc' by default), to be sent later via decrypt-bid.fif"
} : usage()

// == Parsing command-line arguments

{
  "-B" "--bid-filename" 1 { =: BidFile } option-long()
  "-O" "--output-file" 1 { =: SaveFile } option-long()

  1 { parse-int =: AuctionId } nth-argument()
  2 { =: WalletAddrRaw } nth-argument()
  3 { $>GR =: BidAmount } nth-argument()
} scan-args()
dup 1 < { show-usage() } if // Checks that there's enough arguments
1 > =: IsBlind

// == End of parsing command-line arguments

"bid" =:? BidFile
"bid-query" =:? SaveFile

"" =:? WalletAddrRaw
0 =:? BidAmount

."Placing a new bid to auction #" AuctionId . cr

// Pack the internal message into a request data structure to be signed
<b
  100 32 u,     // op, 100 = place a bid
  now 64 u,     // query_id
  AuctionId 32 u,
  IsBlind {
    newkeypair drop dup <b
      AuctionId 32 u,
      WalletAddrRaw true parse-load-address =: BounceFlag addr,
      BidAmount Gram,
    b> dup 2 boc+>B dup Bx. rot swap B+ cr
    BidFile +".boc" tuck B>file
    ."(Saved bid to file " type .")" cr

    hashu swap ed25519_sign_uint B,
  } if
b> =: MessageBody

."Internal message body: " MessageBody <s csr. cr
MessageBody 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr
