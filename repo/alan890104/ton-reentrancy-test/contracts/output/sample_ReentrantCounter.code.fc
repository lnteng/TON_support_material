#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_ReentrantCounter.headers.fc";
#include "sample_ReentrantCounter.stdlib.fc";
#include "sample_ReentrantCounter.constants.fc";
#include "sample_ReentrantCounter.storage.fc";

;;
;; Contract ReentrantCounter functions
;;

(int, int) $ReentrantCounter$_contract_init(int $id) impure inline_ref {
    var (($self'id, $self'counter)) = (null(), null());
    $self'id = $id;
    $self'counter = 0;
    return ($self'id, $self'counter);
}

((int, int), int) $ReentrantCounter$_fun_counter((int, int) $self) impure inline_ref {
    var (($self'id, $self'counter)) = $self;
    return (($self'id, $self'counter), $self'counter);
}

((int, int), int) $ReentrantCounter$_fun_id((int, int) $self) impure inline_ref {
    var (($self'id, $self'counter)) = $self;
    return (($self'id, $self'counter), $self'id);
}

((int, int), int) $ReentrantCounter$_fun_balance((int, int) $self) impure inline_ref {
    var (($self'id, $self'counter)) = $self;
    return (($self'id, $self'counter), __tact_my_balance());
}

;;
;; Receivers of a Contract ReentrantCounter
;;

((int, int), ()) $ReentrantCounter$_internal_text_10afebcfc3fc2db72c41c6d873a6960471b5941d6ed47dffc695eace74dd6f67((int, int) $self) impure inline {
    var ($self'id, $self'counter) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(26158, ($ctx'value > 100000000000));
    raw_reserve(100000000000, 0);
    $self'counter = 100;
    $global_send($SendParameters$_constructor_to_value_mode(__tact_context_get_sender(), 0, 128));
    return (($self'id, $self'counter), ());
}

(((int, int)), ()) $ReentrantCounter$_internal_binary_Substract((int, int) $self, (int, int) $msg) impure inline {
    var ($self'id, $self'counter) = $self;
    var ($msg'queryId, $msg'amount) = $msg;
    int $x = 0;
    $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), ($msg'amount * 1000000000), 64, __gen_cell_comment_095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4()));
    $self'counter = ($self'counter - $msg'amount);
    return (($self'id, $self'counter), ());
}

(((int, int)), ()) $ReentrantCounter$_internal_binary_Deploy((int, int) $self, (int) $deploy) impure inline {
    var ($self'id, $self'counter) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, $self'counter)~$ReentrantCounter$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, $self'counter), ());
}

;;
;; Get methods of a Contract ReentrantCounter
;;

_ %counter() method_id(104984) {
    var self = $ReentrantCounter$_contract_load();
    var res = self~$ReentrantCounter$_fun_counter();
    return res;
}

_ %id() method_id(105872) {
    var self = $ReentrantCounter$_contract_load();
    var res = self~$ReentrantCounter$_fun_id();
    return res;
}

_ %balance() method_id(104128) {
    var self = $ReentrantCounter$_contract_load();
    var res = self~$ReentrantCounter$_fun_balance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmd2PTiYvxBbwQsDjszZuDadpmb62Bt4QGJj6frnREzibZ";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract ReentrantCounter
;;

((int, int), int) $ReentrantCounter$_contract_router_internal((int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Substract message
    if (op == 2335348584) {
        var msg = in_msg~$Substract$_load();
        self~$ReentrantCounter$_internal_binary_Substract(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$ReentrantCounter$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Add" message
        if (text_op == 0x10afebcfc3fc2db72c41c6d873a6960471b5941d6ed47dffc695eace74dd6f67) {
            self~$ReentrantCounter$_internal_text_10afebcfc3fc2db72c41c6d873a6960471b5941d6ed47dffc695eace74dd6f67();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $ReentrantCounter$_contract_load();
    
    ;; Handle operation
    int handled = self~$ReentrantCounter$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $ReentrantCounter$_contract_store(self);
}
