;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: PriceResponse
;; Header: 0x0aacba7f
;; TLB: price_response#0aacba7f queryId:uint256 success:bool decimals:coins price:coins callback:^cell = PriceResponse
;;

builder $PriceResponse$_store(builder build_0, (int, int, int, int, cell) v) inline {
    var (v'queryId, v'success, v'decimals, v'price, v'callback) = v;
    build_0 = store_uint(build_0, 179092095, 32);
    build_0 = build_0.store_uint(v'queryId, 256);
    build_0 = build_0.store_int(v'success, 1);
    build_0 = build_0.store_coins(v'decimals);
    build_0 = build_0.store_coins(v'price);
    build_0 = build_0.store_ref(v'callback);
    return build_0;
}

cell $PriceResponse$_store_cell((int, int, int, int, cell) v) inline {
    return $PriceResponse$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, cell)) $PriceResponse$_constructor_queryId_price_decimals_success_callback(int queryId, int price, int decimals, int success, cell callback) inline {
    return (queryId, success, decimals, price, callback);
}

;;
;; Type: GetLatestPrice
;; Header: 0x80c55a13
;; TLB: get_latest_price#80c55a13 queryId:uint256 symbol:^string callback:^cell = GetLatestPrice
;;

(slice, ((int, slice, cell))) $GetLatestPrice$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2160417299);
    var v'queryId = sc_0~load_uint(256);
    var v'symbol = sc_0~load_ref().begin_parse();
    var v'callback = sc_0~load_ref();
    return (sc_0, (v'queryId, v'symbol, v'callback));
}

;;
;; Type: PriceInfo
;; TLB: _ price:coins decimals:coins = PriceInfo
;;

((int, int)) $PriceInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'price, int vvv'decimals) = __tact_tuple_destroy_2(v);
    return (vvv'price, vvv'decimals);
}

tuple $PriceInfo$_as_optional((int, int) v) inline {
    var (v'price, v'decimals) = v;
    return __tact_tuple_create_2(v'price, v'decimals);
}

((int, int)) $PriceInfo$_constructor_price_decimals(int price, int decimals) inline {
    return (price, decimals);
}

;;
;; Type: PriceOracle
;;

tuple $PriceOracle$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $PriceOracle$_contract_init();
    }
}

() $PriceOracle$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}