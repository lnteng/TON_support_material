#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Addresses.headers.fc";
#include "sample_Addresses.stdlib.fc";
#include "sample_Addresses.constants.fc";
#include "sample_Addresses.storage.fc";

;;
;; Contract Addresses functions
;;

(slice, slice, slice, slice, slice, slice) $Addresses$_contract_init() impure inline_ref {
    var (($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6)) = (__gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null(), null(), null(), null());
    $self'a3 = __tact_create_address(0, 59648462366785489467430652908958923083039847914122061688607845508479932379560);
    $self'a4 = __tact_create_address(0, 0);
    $self'a5 = my_address();
    $self'a6 = __tact_context_get_sender();
    return ($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6);
}

((slice, slice, slice, slice, slice, slice), slice) $Addresses$_fun_result((slice, slice, slice, slice, slice, slice) $self) impure inline_ref {
    var (($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6)) = $self;
    return (($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6), $self'a1);
}

;;
;; Receivers of a Contract Addresses
;;

((slice, slice, slice, slice, slice, slice), ()) $Addresses$_internal_text_3242cc65952f05d9b07d2b2caad91638a341c8e1f253c238d4de60b90bfd734a((slice, slice, slice, slice, slice, slice) $self) impure inline {
    var ($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6) = $self;
    return (($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6), ());
}

((slice, slice, slice, slice, slice, slice), ()) $Addresses$_internal_text_ae9b15f0d50e95164ef677febc57a5f9ae379b3acf721b694a482c77db65c3d5((slice, slice, slice, slice, slice, slice) $self) impure inline {
    var ($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6) = $self;
    slice $a = __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc();
    __tact_nop();
    __tact_nop();
    __tact_nop();
    __tact_nop();
    __tact_nop();
    return (($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6), ());
}

(((slice, slice, slice, slice, slice, slice)), ()) $Addresses$_internal_binary_Deploy((slice, slice, slice, slice, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6)~$Addresses$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'a1, $self'a2, $self'a3, $self'a4, $self'a5, $self'a6), ());
}

;;
;; Get methods of a Contract Addresses
;;

_ %result() method_id(93778) {
    var self = $Addresses$_contract_load();
    var res = self~$Addresses$_fun_result();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmSNDuLMMDfCg6U2y3phT3H7UjSTqjnod5oycidoUXqmzv";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Addresses
;;

((slice, slice, slice, slice, slice, slice), int) $Addresses$_contract_router_internal((slice, slice, slice, slice, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Addresses$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "show all" message
        if (text_op == 0x3242cc65952f05d9b07d2b2caad91638a341c8e1f253c238d4de60b90bfd734a) {
            self~$Addresses$_internal_text_3242cc65952f05d9b07d2b2caad91638a341c8e1f253c238d4de60b90bfd734a();
            return (self, true);
        }
        
        ;; Receive "show ops" message
        if (text_op == 0xae9b15f0d50e95164ef677febc57a5f9ae379b3acf721b694a482c77db65c3d5) {
            self~$Addresses$_internal_text_ae9b15f0d50e95164ef677febc57a5f9ae379b3acf721b694a482c77db65c3d5();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Addresses$_contract_load();
    
    ;; Handle operation
    int handled = self~$Addresses$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Addresses$_contract_store(self);
}
