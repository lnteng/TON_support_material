;;
;; Header files for Structs
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Point$_store
builder $Point$_store(builder build_0, (int, int) v) inline;

;; $Point$_load
(slice, ((int, int))) $Point$_load(slice sc_0) inline;

;; $Params$_store
builder $Params$_store(builder build_0, (slice, int, (int, int)) v) inline;

;; $Params$_load
(slice, ((slice, int, (int, int)))) $Params$_load(slice sc_0) inline;

;; $Add$_load
(slice, (((int, int)))) $Add$_load(slice sc_0) inline;

;; $Structs$_store
builder $Structs$_store(builder build_0, ((int, int), (slice, int, (int, int))) v) inline;

;; $Structs$_load
(slice, (((int, int), (slice, int, (int, int))))) $Structs$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Point$_to_tuple
tuple $Point$_to_tuple(((int, int)) v) inline;

;; $Point$_to_external
(int, int) $Point$_to_external(((int, int)) v) inline;

;; $Params$_to_external
(slice, int, tuple) $Params$_to_external(((slice, int, (int, int))) v) inline;

;; $Point$_constructor_x_y
((int, int)) $Point$_constructor_x_y(int x, int y) inline;

;; $Params$_constructor_point
((slice, int, (int, int))) $Params$_constructor_point((int, int) point) inline;

;; $Structs$_contract_init
((int, int), (slice, int, (int, int))) $Structs$_contract_init() impure inline_ref;

;; $Structs$_contract_load
((int, int), (slice, int, (int, int))) $Structs$_contract_load() impure inline_ref;

;; $Structs$_contract_store
() $Structs$_contract_store(((int, int), (slice, int, (int, int))) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Structs$_fun_point
(((int, int), (slice, int, (int, int))), (int, int)) $Structs$_fun_point(((int, int), (slice, int, (int, int))) $self) impure inline_ref;

;; $Structs$_fun_params
(((int, int), (slice, int, (int, int))), (slice, int, (int, int))) $Structs$_fun_params(((int, int), (slice, int, (int, int))) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Structs$_fun_forward
(((int, int), (slice, int, (int, int))), ()) $Structs$_fun_forward(((int, int), (slice, int, (int, int))) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Structs$_fun_notify
(((int, int), (slice, int, (int, int))), ()) $Structs$_fun_notify(((int, int), (slice, int, (int, int))) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
