;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Point
;; TLB: _ x:int64 y:int64 = Point
;;

builder $Point$_store(builder build_0, (int, int) v) inline {
    var (v'x, v'y) = v;
    build_0 = build_0.store_int(v'x, 64);
    build_0 = build_0.store_int(v'y, 64);
    return build_0;
}

(slice, ((int, int))) $Point$_load(slice sc_0) inline {
    var v'x = sc_0~load_int(64);
    var v'y = sc_0~load_int(64);
    return (sc_0, (v'x, v'y));
}

tuple $Point$_to_tuple(((int, int)) v) inline {
    var (v'x, v'y) = v;
    return __tact_tuple_create_2(v'x, v'y);
}

(int, int) $Point$_to_external(((int, int)) v) inline {
    var (v'x, v'y) = v; 
    return (v'x, v'y);
}

((int, int)) $Point$_constructor_x_y(int x, int y) inline {
    return (x, y);
}

;;
;; Type: Params
;; TLB: _ name:^string age:Maybe int257 point:Point{x:int64,y:int64} = Params
;;

builder $Params$_store(builder build_0, (slice, int, (int, int)) v) inline {
    var (v'name, v'age, (v'point'x, v'point'y)) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = ~ null?(v'age) ? build_0.store_int(true, 1).store_int(v'age, 257) : build_0.store_int(false, 1);
    build_0 = $Point$_store(build_0, (v'point'x, v'point'y));
    return build_0;
}

(slice, ((slice, int, (int, int)))) $Params$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'age = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'point = sc_0~$Point$_load();
    return (sc_0, (v'name, v'age, v'point));
}

(slice, int, tuple) $Params$_to_external(((slice, int, (int, int))) v) inline {
    var (v'name, v'age, v'point) = v; 
    return (v'name, v'age, $Point$_to_tuple(v'point));
}

((slice, int, (int, int))) $Params$_constructor_point((int, int) point) inline {
    return (__gen_slice_string_2ff4f5783f82974ceb124fcdb94e330d2518eb020332812b3275f3cbd56418ac(), null(), point);
}

;;
;; Type: Add
;; Header: 0xff15e497
;; TLB: add#ff15e497 point:Point{x:int64,y:int64} = Add
;;

(slice, (((int, int)))) $Add$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4279624855);
    var v'point = sc_0~$Point$_load();
    return (sc_0, (v'point));
}

;;
;; Type: Structs
;;

builder $Structs$_store(builder build_0, ((int, int), (slice, int, (int, int))) v) inline {
    var ((v's1'x, v's1'y), (v's2'name, v's2'age, (v's2'point'x, v's2'point'y))) = v;
    build_0 = $Point$_store(build_0, (v's1'x, v's1'y));
    build_0 = $Params$_store(build_0, (v's2'name, v's2'age, (v's2'point'x, v's2'point'y)));
    return build_0;
}

(slice, (((int, int), (slice, int, (int, int))))) $Structs$_load(slice sc_0) inline {
    var v's1 = sc_0~$Point$_load();
    var v's2 = sc_0~$Params$_load();
    return (sc_0, (v's1, v's2));
}

((int, int), (slice, int, (int, int))) $Structs$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Structs$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Structs$_contract_init();
    }
}

() $Structs$_contract_store(((int, int), (slice, int, (int, int))) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Structs$_store(b, v);
    set_data(b.end_cell());
}