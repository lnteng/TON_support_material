;;
;; Header files for Optionals
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $StrctOpts$_store
builder $StrctOpts$_store(builder build_0, (int, int, slice) v) inline;

;; $StrctOpts$_load
(slice, ((int, int, slice))) $StrctOpts$_load(slice sc_0) inline;

;; $StrctOpts$_as_optional
tuple $StrctOpts$_as_optional((int, int, slice) v) inline;

;; $MsgOpts$_load
(slice, ((int, int, slice, tuple))) $MsgOpts$_load(slice sc_0) inline;

;; $StrctOpts$_not_null
((int, int, slice)) $StrctOpts$_not_null(tuple v) inline;

;; $Optionals$_store
builder $Optionals$_store(builder build_0, (int, int, slice, tuple) v) inline;

;; $Optionals$_load
(slice, ((int, int, slice, tuple))) $Optionals$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StrctOpts$_get_sa
_ $StrctOpts$_get_sa((int, int, slice) v) inline;

;; $Optionals$init$_load
(slice, ((int, int, slice))) $Optionals$init$_load(slice sc_0) inline;

;; $StrctOpts$_constructor_sa_sb_sc
((int, int, slice)) $StrctOpts$_constructor_sa_sb_sc(int sa, int sb, slice sc) inline;

;; $Optionals$_contract_init
(int, int, slice, tuple) $Optionals$_contract_init(int $a, int $b, slice $c) impure inline_ref;

;; $Optionals$_contract_load
(int, int, slice, tuple) $Optionals$_contract_load() impure inline_ref;

;; $Optionals$_contract_store
() $Optionals$_contract_store((int, int, slice, tuple) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Optionals$_fun_optInt
((int, int, slice, tuple), int) $Optionals$_fun_optInt((int, int, slice, tuple) $self) impure inline_ref;

;; $Optionals$_fun_optIntVal
((int, int, slice, tuple), int) $Optionals$_fun_optIntVal((int, int, slice, tuple) $self) impure inline_ref;

;; $Optionals$_fun_optNested
((int, int, slice, tuple), int) $Optionals$_fun_optNested((int, int, slice, tuple) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Optionals$_fun_forward
((int, int, slice, tuple), ()) $Optionals$_fun_forward((int, int, slice, tuple) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Optionals$_fun_notify
((int, int, slice, tuple), ()) $Optionals$_fun_notify((int, int, slice, tuple) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
