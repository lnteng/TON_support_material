#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Integers.headers.fc";
#include "sample_Integers.stdlib.fc";
#include "sample_Integers.storage.fc";

;;
;; Contract Integers functions
;;

(int, int) $Integers$_contract_init() impure inline_ref {
    var (($self'i1, $self'i2)) = (3001, 57);
    return ($self'i1, $self'i2);
}

;;
;; Receivers of a Contract Integers
;;

((int, int), ()) $Integers$_internal_text_ae9b15f0d50e95164ef677febc57a5f9ae379b3acf721b694a482c77db65c3d5((int, int) $self) impure inline {
    var ($self'i1, $self'i2) = $self;
    int $i = (- 12);
    __tact_nop();
    $i = (($self'i1 * 3) + ($self'i2 - $i));
    __tact_nop();
    $i = ($self'i1 % 10);
    __tact_nop();
    $i = ($self'i1 / 1000);
    __tact_nop();
    $i = ($self'i1 >> 3);
    __tact_nop();
    $i = ($self'i1 << 2);
    __tact_nop();
    $i = min($self'i2, 11);
    __tact_nop();
    $i = max($self'i2, 66);
    __tact_nop();
    $i = abs(((- 1) * $self'i2));
    __tact_nop();
    __tact_nop();
    __tact_nop();
    __tact_nop();
    __tact_nop();
    return (($self'i1, $self'i2), ());
}

(((int, int)), ()) $Integers$_internal_binary_Deploy((int, int) $self, (int) $deploy) impure inline {
    var ($self'i1, $self'i2) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'i1, $self'i2)~$Integers$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'i1, $self'i2), ());
}

;;
;; Get methods of a Contract Integers
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmeVXVzpNoVYBdW5SuodRimjRedCiex6d8WvULw1czXK6Y";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Integers
;;

((int, int), int) $Integers$_contract_router_internal((int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Integers$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "show ops" message
        if (text_op == 0xae9b15f0d50e95164ef677febc57a5f9ae379b3acf721b694a482c77db65c3d5) {
            self~$Integers$_internal_text_ae9b15f0d50e95164ef677febc57a5f9ae379b3acf721b694a482c77db65c3d5();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Integers$_contract_load();
    
    ;; Handle operation
    int handled = self~$Integers$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Integers$_contract_store(self);
}
