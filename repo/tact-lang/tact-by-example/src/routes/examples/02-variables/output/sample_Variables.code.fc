#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Variables.headers.fc";
#include "sample_Variables.stdlib.fc";
#include "sample_Variables.storage.fc";

;;
;; Contract Variables functions
;;

(int, int) $Variables$_contract_init(int $arg1) impure inline_ref {
    var (($self'contractVar1, $self'contractVar2)) = (1260000000, null());
    $self'contractVar2 = min($arg1, (18446744073709551616 - 1));
    return ($self'contractVar1, $self'contractVar2);
}

((int, int), int) $Variables$_fun_sum((int, int) $self, int $arg1) impure inline_ref {
    var (($self'contractVar1, $self'contractVar2)) = $self;
    int $localVar1 = (100 * 1000);
    $localVar1 = ($localVar1 * 2);
    return (($self'contractVar1, $self'contractVar2), (($arg1 + $self'contractVar1) + $localVar1));
}

;;
;; Receivers of a Contract Variables
;;

((int, int), ()) $Variables$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae((int, int) $self) impure inline {
    var ($self'contractVar1, $self'contractVar2) = $self;
    int $localVar1 = (100 * 1000);
    $localVar1 = ($localVar1 * 2);
    $self'contractVar1 = ($self'contractVar1 + 1);
    $self'contractVar2 = ($self'contractVar2 + 1);
    return (($self'contractVar1, $self'contractVar2), ());
}

(((int, int)), ()) $Variables$_internal_binary_Deploy((int, int) $self, (int) $deploy) impure inline {
    var ($self'contractVar1, $self'contractVar2) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'contractVar1, $self'contractVar2)~$Variables$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'contractVar1, $self'contractVar2), ());
}

;;
;; Get methods of a Contract Variables
;;

_ %sum(int $$arg1) method_id(117759) {
    int $arg1 = $$arg1;
    var self = $Variables$_contract_load();
    var res = self~$Variables$_fun_sum($arg1);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNNwRBbyQ66WGaFUkfU25hyqGwDHNSGHzma4u2jt7t8L2";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Variables
;;

((int, int), int) $Variables$_contract_router_internal((int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Variables$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "increment" message
        if (text_op == 0xc4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae) {
            self~$Variables$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Variables$_contract_load();
    
    ;; Handle operation
    int handled = self~$Variables$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Variables$_contract_store(self);
}
