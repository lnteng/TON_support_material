#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_TodoChild.headers.fc";
#include "sample_TodoChild.stdlib.fc";
#include "sample_TodoChild.constants.fc";
#include "sample_TodoChild.storage.fc";

;;
;; Contract TodoChild functions
;;

(int) $TodoChild$_contract_init(int $seqno) impure inline_ref {
    var (($self'seqno)) = (null());
    $self'seqno = $seqno;
    return ($self'seqno);
}

;;
;; Receivers of a Contract TodoChild
;;

(((int)), ()) $TodoChild$_internal_binary_HiFromParent((int) $self, (slice) $msg) impure inline {
    var ($self'seqno) = $self;
    var ($msg'greeting) = $msg;
    __tact_nop();
    __tact_nop();
    ($self'seqno)~$TodoChild$_fun_reply($HiFromChild$_store_cell($HiFromChild$_constructor_fromSeqno_greeting($self'seqno, __gen_slice_string_4af908d8133363c1cbf5a61a3a83e4a1accbd2f1a0207785fb9971a6a55cdd33())));
    return (($self'seqno), ());
}

;;
;; Get methods of a Contract TodoChild
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmP3aUgqJFN4RrWDcmhwSR7vCozA2Bg6UcbTVWKuQdorhv";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TodoChild
;;

((int), int) $TodoChild$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive HiFromParent message
    if (op == 3517475402) {
        var msg = in_msg~$HiFromParent$_load();
        self~$TodoChild$_internal_binary_HiFromParent(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TodoChild$_contract_load();
    
    ;; Handle operation
    int handled = self~$TodoChild$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TodoChild$_contract_store(self);
}
