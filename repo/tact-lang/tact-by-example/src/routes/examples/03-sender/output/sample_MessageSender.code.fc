#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_MessageSender.headers.fc";
#include "sample_MessageSender.stdlib.fc";
#include "sample_MessageSender.storage.fc";

;;
;; Contract MessageSender functions
;;

(slice, slice) $MessageSender$_contract_init() impure inline_ref {
    var (($self'deployer, $self'lastSender)) = (null(), null());
    $self'deployer = __tact_context_get_sender();
    $self'lastSender = __tact_create_address(0, 0);
    return ($self'deployer, $self'lastSender);
}

;;
;; Receivers of a Contract MessageSender
;;

((slice, slice), ()) $MessageSender$_internal_text_d623f849b4fdbd3b191bf824681b73d4e86be3c8fdef47553046d4496da289ff((slice, slice) $self) impure inline {
    var ($self'deployer, $self'lastSender) = $self;
    if (( __tact_slice_eq_bits($self'deployer, __tact_context_get_sender()) )) {
        __tact_nop();
    } else {
        __tact_nop();
    }
    return (($self'deployer, $self'lastSender), ());
}

((slice, slice), ()) $MessageSender$_internal_text_551f6c3e8d7ae7d9b3ac53bca9b6f82cff322fb16113820776d14a3f93b93951((slice, slice) $self) impure inline {
    var ($self'deployer, $self'lastSender) = $self;
    if (( ~ __tact_slice_eq_bits($self'lastSender, __tact_context_get_sender()) )) {
        $self'lastSender = __tact_context_get_sender();
        __tact_nop();
    }
    return (($self'deployer, $self'lastSender), ());
}

(((slice, slice)), ()) $MessageSender$_internal_binary_Deploy((slice, slice) $self, (int) $deploy) impure inline {
    var ($self'deployer, $self'lastSender) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'deployer, $self'lastSender)~$MessageSender$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'deployer, $self'lastSender), ());
}

;;
;; Get methods of a Contract MessageSender
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmX8YgzSto4JgKz37AGXcn6UySz7ta5v5UW7rBTj3Y34tz";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MessageSender
;;

((slice, slice), int) $MessageSender$_contract_router_internal((slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$MessageSender$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "who" message
        if (text_op == 0xd623f849b4fdbd3b191bf824681b73d4e86be3c8fdef47553046d4496da289ff) {
            self~$MessageSender$_internal_text_d623f849b4fdbd3b191bf824681b73d4e86be3c8fdef47553046d4496da289ff();
            return (self, true);
        }
        
        ;; Receive "hello" message
        if (text_op == 0x551f6c3e8d7ae7d9b3ac53bca9b6f82cff322fb16113820776d14a3f93b93951) {
            self~$MessageSender$_internal_text_551f6c3e8d7ae7d9b3ac53bca9b6f82cff322fb16113820776d14a3f93b93951();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MessageSender$_contract_load();
    
    ;; Handle operation
    int handled = self~$MessageSender$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MessageSender$_contract_store(self);
}
