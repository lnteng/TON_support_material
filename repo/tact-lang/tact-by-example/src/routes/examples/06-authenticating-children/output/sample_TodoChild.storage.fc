;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: HiFromParent
;; Header: 0xd1a86a4a
;; TLB: hi_from_parent#d1a86a4a greeting:^string = HiFromParent
;;

(slice, ((slice))) $HiFromParent$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3517475402);
    var v'greeting = sc_0~load_ref().begin_parse();
    return (sc_0, (v'greeting));
}

;;
;; Type: HiFromChild
;; Header: 0x49c35a2a
;; TLB: hi_from_child#49c35a2a fromSeqno:uint64 greeting:^string = HiFromChild
;;

builder $HiFromChild$_store(builder build_0, (int, slice) v) inline {
    var (v'fromSeqno, v'greeting) = v;
    build_0 = store_uint(build_0, 1237539370, 32);
    build_0 = build_0.store_uint(v'fromSeqno, 64);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'greeting).end_cell());
    return build_0;
}

cell $HiFromChild$_store_cell((int, slice) v) inline {
    return $HiFromChild$_store(begin_cell(), v).end_cell();
}

((int, slice)) $HiFromChild$_constructor_fromSeqno_greeting(int fromSeqno, slice greeting) inline {
    return (fromSeqno, greeting);
}

;;
;; Type: TodoChild
;;

builder $TodoChild$_store(builder build_0, (slice, int) v) inline {
    var (v'parent, v'seqno) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_uint(v'seqno, 64);
    return build_0;
}

(slice, ((slice, int))) $TodoChild$_load(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_uint(64);
    return (sc_0, (v'parent, v'seqno));
}

(slice, ((slice, int))) $TodoChild$init$_load(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_int(257);
    return (sc_0, (v'parent, v'seqno));
}

(slice, int) $TodoChild$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TodoChild$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice parent, int seqno) = $sc~$TodoChild$init$_load();
        $sc.end_parse();
        return $TodoChild$_contract_init(parent, seqno);
    }
}

() $TodoChild$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TodoChild$_store(b, v);
    set_data(b.end_cell());
}