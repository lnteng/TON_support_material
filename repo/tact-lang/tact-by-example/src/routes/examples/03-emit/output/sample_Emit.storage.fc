;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: TransferEvent
;; Header: 0x2e0f251b
;; TLB: transfer_event#2e0f251b amount:coins recipient:address = TransferEvent
;;

builder $TransferEvent$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'recipient) = v;
    build_0 = store_uint(build_0, 772744475, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'recipient);
    return build_0;
}

cell $TransferEvent$_store_cell((int, slice) v) inline {
    return $TransferEvent$_store(begin_cell(), v).end_cell();
}

((int, slice)) $TransferEvent$_constructor_amount_recipient(int amount, slice recipient) inline {
    return (amount, recipient);
}

;;
;; Type: StakeEvent
;; Header: 0xadec2622
;; TLB: stake_event#adec2622 amount:coins = StakeEvent
;;

builder $StakeEvent$_store(builder build_0, (int) v) inline {
    var (v'amount) = v;
    build_0 = store_uint(build_0, 2917934626, 32);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $StakeEvent$_store_cell((int) v) inline {
    return $StakeEvent$_store(begin_cell(), v).end_cell();
}

((int)) $StakeEvent$_constructor_amount(int amount) inline {
    return (amount);
}

;;
;; Type: Emit
;;

tuple $Emit$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Emit$_contract_init();
    }
}

() $Emit$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}