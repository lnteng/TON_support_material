;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: CanPayout
;; Header: 0xc41949df
;; TLB: can_payout#c41949df amount:int257 = CanPayout
;;

builder $CanPayout$_store(builder build_0, (int) v) inline {
    var (v'amount) = v;
    build_0 = store_uint(build_0, 3289991647, 32);
    build_0 = build_0.store_int(v'amount, 257);
    return build_0;
}

cell $CanPayout$_store_cell((int) v) inline {
    return $CanPayout$_store(begin_cell(), v).end_cell();
}

((int)) $CanPayout$_constructor_amount(int amount) inline {
    return (amount);
}

;;
;; Type: CanPayoutResponse
;; Header: 0xffeb40de
;; TLB: can_payout_response#ffeb40de amount:int257 address:address ok:bool = CanPayoutResponse
;;

(slice, ((int, slice, int))) $CanPayoutResponse$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4293607646);
    var v'amount = sc_0~load_int(257);
    var v'address = sc_0~__tact_load_address();
    var v'ok = sc_0~load_int(1);
    return (sc_0, (v'amount, v'address, v'ok));
}

;;
;; Type: Beacon
;;

builder $Beacon$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'master, v'owner) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(cell, cell) $Beacon$_init_child(cell sys', slice $master, slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Beacon
    cell mine = __tact_dict_get_code(source, 41210);
    contracts = __tact_dict_set_code(contracts, 41210, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Beacon$init$_store(b, ($master, $owner));
    return (mine, b.end_cell());
}

;;
;; Type: Payouts
;;

builder $Payouts$_store(builder build_0, (slice, int) v) inline {
    var (v'owner, v'publicKey) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'publicKey, 257);
    return build_0;
}

(slice, ((slice, int))) $Payouts$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'publicKey = sc_0~load_int(257);
    return (sc_0, (v'owner, v'publicKey));
}

(slice, ((slice, int))) $Payouts$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'publicKey = sc_0~load_int(257);
    return (sc_0, (v'owner, v'publicKey));
}

(slice, int) $Payouts$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Payouts$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int publicKey) = $sc~$Payouts$init$_load();
        $sc.end_parse();
        return $Payouts$_contract_init(owner, publicKey);
    }
}

() $Payouts$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Payouts$_store(b, v);
    set_data(b.end_cell());
}