;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Increment
;; Header: 0x20064f3b
;; TLB: increment#20064f3b key:int257 value:int257 = Increment
;;

(slice, ((int, int))) $Increment$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 537284411);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(257);
    return (sc_0, (v'key, v'value));
}

;;
;; Type: Toggle
;; Header: 0x4077d4c8
;; TLB: toggle#4077d4c8 key:int257 = Toggle
;;

(slice, ((int))) $Toggle$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1081595080);
    var v'key = sc_0~load_int(257);
    return (sc_0, (v'key));
}

;;
;; Type: Persist
;; Header: 0xe29d0faa
;; TLB: persist#e29d0faa key:int257 content:Maybe ^cell = Persist
;;

(slice, ((int, cell))) $Persist$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3801943978);
    var v'key = sc_0~load_int(257);
    var v'content = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'content));
}

;;
;; Type: Reset
;; Header: 0x6668efb2
;; TLB: reset#6668efb2 key:int257 = Reset
;;

(slice, ((int))) $Reset$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1718153138);
    var v'key = sc_0~load_int(257);
    return (sc_0, (v'key));
}

;;
;; Type: Something
;; TLB: _ value:int257 = Something
;;

builder $Something$_store(builder build_0, (int) v) inline {
    var (v'value) = v;
    build_0 = build_0.store_int(v'value, 257);
    return build_0;
}

cell $Something$_store_cell((int) v) inline {
    return $Something$_store(begin_cell(), v).end_cell();
}

((int)) $Something$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'value) = __tact_tuple_destroy_1(v);
    return (vvv'value);
}

cell $Something$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $Something$_store_cell($Something$_not_null(v));
}

;;
;; Type: IncrementContract
;;

builder $IncrementContract$_store(builder build_0, (cell, cell, cell, cell, cell) v) inline {
    var (v'counters, v'counters2, v'counters3, v'counters4, v'counters5) = v;
    build_0 = build_0.store_dict(v'counters);
    build_0 = build_0.store_dict(v'counters2);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'counters3);
    build_1 = build_1.store_dict(v'counters4);
    build_1 = build_1.store_dict(v'counters5);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((cell, cell, cell, cell, cell))) $IncrementContract$_load(slice sc_0) inline {
    var v'counters = sc_0~load_dict();
    var v'counters2 = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'counters3 = sc_1~load_dict();
    var v'counters4 = sc_1~load_dict();
    var v'counters5 = sc_1~load_dict();
    return (sc_0, (v'counters, v'counters2, v'counters3, v'counters4, v'counters5));
}

(cell, cell, cell, cell, cell) $IncrementContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$IncrementContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $IncrementContract$_contract_init();
    }
}

() $IncrementContract$_contract_store((cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $IncrementContract$_store(b, v);
    set_data(b.end_cell());
}