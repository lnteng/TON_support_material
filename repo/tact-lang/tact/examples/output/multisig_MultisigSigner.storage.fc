;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_body(int value, slice to, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Request
;; Header: 0xfe519883
;; TLB: request#fe519883 requested:address to:address value:coins timeout:uint32 bounce:bool mode:uint8 body:Maybe ^cell = Request
;;

builder $Request$_store(builder build_0, (slice, slice, int, int, int, int, cell) v) inline_ref {
    var (v'requested, v'to, v'value, v'timeout, v'bounce, v'mode, v'body) = v;
    build_0 = store_uint(build_0, 4266760323, 32);
    build_0 = __tact_store_address(build_0, v'requested);
    build_0 = __tact_store_address(build_0, v'to);
    build_0 = build_0.store_coins(v'value);
    build_0 = build_0.store_uint(v'timeout, 32);
    build_0 = build_0.store_int(v'bounce, 1);
    build_0 = build_0.store_uint(v'mode, 8);
    build_0 = ~ null?(v'body) ? build_0.store_int(true, 1).store_ref(v'body) : build_0.store_int(false, 1);
    return build_0;
}

(slice, ((slice, slice, int, int, int, int, cell))) $Request$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4266760323);
    var v'requested = sc_0~__tact_load_address();
    var v'to = sc_0~__tact_load_address();
    var v'value = sc_0~load_coins();
    var v'timeout = sc_0~load_uint(32);
    var v'bounce = sc_0~load_int(1);
    var v'mode = sc_0~load_uint(8);
    var v'body = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'requested, v'to, v'value, v'timeout, v'bounce, v'mode, v'body));
}

(slice, slice, int, int, int, int, cell) $Request$_to_external(((slice, slice, int, int, int, int, cell)) v) inline {
    var (v'requested, v'to, v'value, v'timeout, v'bounce, v'mode, v'body) = v; 
    return (v'requested, v'to, v'value, v'timeout, v'bounce, v'mode, v'body);
}

;;
;; Type: Signed
;; Header: 0x83ea5599
;; TLB: signed#83ea5599 request:Request{requested:address,to:address,value:coins,timeout:uint32,bounce:bool,mode:uint8,body:Maybe ^cell} = Signed
;;

builder $Signed$_store(builder build_0, ((slice, slice, int, int, int, int, cell)) v) inline {
    var ((v'request'requested, v'request'to, v'request'value, v'request'timeout, v'request'bounce, v'request'mode, v'request'body)) = v;
    build_0 = store_uint(build_0, 2213172633, 32);
    build_0 = $Request$_store(build_0, (v'request'requested, v'request'to, v'request'value, v'request'timeout, v'request'bounce, v'request'mode, v'request'body));
    return build_0;
}

cell $Signed$_store_cell(((slice, slice, int, int, int, int, cell)) v) inline {
    return $Signed$_store(begin_cell(), v).end_cell();
}

(((slice, slice, int, int, int, int, cell))) $Signed$_constructor_request((slice, slice, int, int, int, int, cell) request) inline {
    return (request);
}

;;
;; Type: MultisigSigner
;;

builder $MultisigSigner$_store(builder build_0, (slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) v) inline {
    var (v'master, v'members, v'weight, v'requiredWeight, v'completed, (v'request'requested, v'request'to, v'request'value, v'request'timeout, v'request'bounce, v'request'mode, v'request'body)) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = build_0.store_dict(v'members);
    build_0 = build_0.store_int(v'weight, 257);
    build_0 = build_0.store_int(v'requiredWeight, 257);
    build_0 = build_0.store_int(v'completed, 1);
    var build_1 = begin_cell();
    build_1 = $Request$_store(build_1, (v'request'requested, v'request'to, v'request'value, v'request'timeout, v'request'bounce, v'request'mode, v'request'body));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)))) $MultisigSigner$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'members = sc_0~load_dict();
    var v'weight = sc_0~load_int(257);
    var v'requiredWeight = sc_0~load_int(257);
    var v'completed = sc_0~load_int(1);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'request = sc_1~$Request$_load();
    return (sc_0, (v'master, v'members, v'weight, v'requiredWeight, v'completed, v'request));
}

(slice, ((slice, cell, int, (slice, slice, int, int, int, int, cell)))) $MultisigSigner$init$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'members = sc_0~load_dict();
    var v'requiredWeight = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'request = sc_1~$Request$_load();
    return (sc_0, (v'master, v'members, v'requiredWeight, v'request));
}

(slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) $MultisigSigner$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MultisigSigner$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice master, cell members, int requiredWeight, (slice, slice, int, int, int, int, cell) request) = $sc~$MultisigSigner$init$_load();
        $sc.end_parse();
        return $MultisigSigner$_contract_init(master, members, requiredWeight, request);
    }
}

() $MultisigSigner$_contract_store((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MultisigSigner$_store(b, v);
    set_data(b.end_cell());
}