;;
;; Type: Large
;;

builder $Large$_store(builder build_0, (cell, cell, cell, cell) v) inline {
    var (v'cell1, v'cell2, v'cell3, v'cell4) = v;
    build_0 = build_0.store_ref(v'cell1);
    build_0 = build_0.store_ref(v'cell2);
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(v'cell3);
    build_1 = build_1.store_ref(v'cell4);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((cell, cell, cell, cell))) $Large$_load(slice sc_0) inline {
    var v'cell1 = sc_0~load_ref();
    var v'cell2 = sc_0~load_ref();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'cell3 = sc_1~load_ref();
    var v'cell4 = sc_1~load_ref();
    return (sc_0, (v'cell1, v'cell2, v'cell3, v'cell4));
}

(cell, cell, cell, cell) $Large$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Large$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Large$_contract_init();
    }
}

() $Large$_contract_store((cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Large$_store(b, v);
    set_data(b.end_cell());
}