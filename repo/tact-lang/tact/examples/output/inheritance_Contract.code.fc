#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "inheritance_Contract.headers.fc";
#include "inheritance_Contract.stdlib.fc";
#include "inheritance_Contract.storage.fc";

;;
;; Contract Contract functions
;;

tuple $Contract$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, int) $Contract$_fun_executeAbs(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 1000);
}

(tuple, int) $Contract$_fun_execute(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 2);
}

(tuple, int) $Contract$_fun_ex(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, $self~$Contract$_fun_execute());
}

(tuple, int) $Contract$_fun_ex2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, $self~$Contract$_fun_executeAbs());
}

(tuple, int) $Contract$_fun_const1(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 10);
}

(tuple, int) $Contract$_fun_const2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 20);
}

(tuple, int) $Contract$_fun_const3(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 30);
}

(tuple, int) $Contract$_fun_const4(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 40);
}

(tuple, int) $Contract$_fun_loadC2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 50);
}

(tuple, int) $Contract$_fun_const5(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, $self~$Contract$_fun_loadC2());
}

;;
;; Receivers of a Contract Contract
;;

;;
;; Get methods of a Contract Contract
;;

_ %ex() method_id(68416) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_ex();
    return res;
}

_ %ex2() method_id(124794) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_ex2();
    return res;
}

_ %const1() method_id(95714) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const1();
    return res;
}

_ %const2() method_id(83329) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const2();
    return res;
}

_ %const3() method_id(87456) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const3();
    return res;
}

_ %const4() method_id(75079) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const4();
    return res;
}

_ %const5() method_id(79206) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const5();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmc5qCBr9qjGPcw6KaT7LSCcxeckW35Q3gyTETWq6YLVPR";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Contract
;;

(tuple, int) $Contract$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Contract$_contract_load();
    
    ;; Handle operation
    int handled = self~$Contract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Contract$_contract_store(self);
}
