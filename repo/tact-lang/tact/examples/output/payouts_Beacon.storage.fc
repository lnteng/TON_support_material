;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: CanPayout
;; Header: 0xc41949df
;; TLB: can_payout#c41949df amount:int257 = CanPayout
;;

(slice, ((int))) $CanPayout$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3289991647);
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

;;
;; Type: CanPayoutResponse
;; Header: 0xffeb40de
;; TLB: can_payout_response#ffeb40de amount:int257 address:address ok:bool = CanPayoutResponse
;;

builder $CanPayoutResponse$_store(builder build_0, (int, slice, int) v) inline {
    var (v'amount, v'address, v'ok) = v;
    build_0 = store_uint(build_0, 4293607646, 32);
    build_0 = build_0.store_int(v'amount, 257);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_int(v'ok, 1);
    return build_0;
}

cell $CanPayoutResponse$_store_cell((int, slice, int) v) inline {
    return $CanPayoutResponse$_store(begin_cell(), v).end_cell();
}

((int, slice, int)) $CanPayoutResponse$_constructor_ok_amount_address(int ok, int amount, slice address) inline {
    return (amount, address, ok);
}

;;
;; Type: Beacon
;;

builder $Beacon$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'master, v'owner, v'completed) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'completed, 1);
    return build_0;
}

(slice, ((slice, slice, int))) $Beacon$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'owner = sc_0~__tact_load_address();
    var v'completed = sc_0~load_int(1);
    return (sc_0, (v'master, v'owner, v'completed));
}

(slice, ((slice, slice))) $Beacon$init$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'master, v'owner));
}

(slice, slice, int) $Beacon$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Beacon$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice master, slice owner) = $sc~$Beacon$init$_load();
        $sc.end_parse();
        return $Beacon$_contract_init(master, owner);
    }
}

() $Beacon$_contract_store((slice, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Beacon$_store(b, v);
    set_data(b.end_cell());
}