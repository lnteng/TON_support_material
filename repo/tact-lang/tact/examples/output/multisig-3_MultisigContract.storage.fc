;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice to, int value) inline {
    return (true, to, value, 0, null(), null(), null());
}

;;
;; Type: Operation
;; TLB: _ seqno:uint32 amount:coins target:address = Operation
;;

builder $Operation$_store(builder build_0, (int, int, slice) v) inline {
    var (v'seqno, v'amount, v'target) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'target);
    return build_0;
}

cell $Operation$_store_cell((int, int, slice) v) inline {
    return $Operation$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice))) $Operation$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'amount = sc_0~load_coins();
    var v'target = sc_0~__tact_load_address();
    return (sc_0, (v'seqno, v'amount, v'target));
}

((int, int, slice)) $Operation$_tensor_cast((int, int, slice) v) asm "NOP";

;;
;; Type: Execute
;; Header: 0x1f0d5570
;; TLB: execute#1f0d5570 operation:Operation{seqno:uint32,amount:coins,target:address} signature1:^slice signature2:^slice signature3:^slice = Execute
;;

(slice, (((int, int, slice), slice, slice, slice))) $Execute$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 520967536);
    var v'operation = sc_0~$Operation$_load();
    var v'signature1 = sc_0~load_ref().begin_parse();
    var v'signature2 = sc_0~load_ref().begin_parse();
    var v'signature3 = sc_0~load_ref().begin_parse();
    return (sc_0, (v'operation, v'signature1, v'signature2, v'signature3));
}

;;
;; Type: MultisigContract
;;

builder $MultisigContract$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'seqno, v'user1_key, v'user2_key, v'user3_key) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'user1_key, 256);
    build_0 = build_0.store_uint(v'user2_key, 256);
    build_0 = build_0.store_uint(v'user3_key, 256);
    return build_0;
}

(slice, ((int, int, int, int))) $MultisigContract$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'user1_key = sc_0~load_uint(256);
    var v'user2_key = sc_0~load_uint(256);
    var v'user3_key = sc_0~load_uint(256);
    return (sc_0, (v'seqno, v'user1_key, v'user2_key, v'user3_key));
}

(slice, ((int, int, int))) $MultisigContract$init$_load(slice sc_0) inline {
    var v'key1 = sc_0~load_int(257);
    var v'key2 = sc_0~load_int(257);
    var v'key3 = sc_0~load_int(257);
    return (sc_0, (v'key1, v'key2, v'key3));
}

(int, int, int, int) $MultisigContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MultisigContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int key1, int key2, int key3) = $sc~$MultisigContract$init$_load();
        $sc.end_parse();
        return $MultisigContract$_contract_init(key1, key2, key3);
    }
}

() $MultisigContract$_contract_store((int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MultisigContract$_store(b, v);
    set_data(b.end_cell());
}