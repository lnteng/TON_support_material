;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: EchoMessage
;; Header: 0x7ba20dc1
;; TLB: echo_message#7ba20dc1  = EchoMessage
;;

builder $EchoMessage$_store(builder build_0, tuple v) inline {
    build_0 = store_uint(build_0, 2074217921, 32);
    return build_0;
}

cell $EchoMessage$_store_cell(tuple v) inline {
    return $EchoMessage$_store(begin_cell(), v).end_cell();
}

(slice, (tuple)) $EchoMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2074217921);
    return (sc_0, null());
}

;;
;; Type: Echo
;;

(slice, ((int))) $Echo$init$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    return (sc_0, (v'a));
}

tuple $Echo$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int a) = $sc~$Echo$init$_load();
        $sc.end_parse();
        return $Echo$_contract_init(a);
    }
}

() $Echo$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}