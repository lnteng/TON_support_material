#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;;
;; Header files for Echo
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $EchoMessage$_store
builder $EchoMessage$_store(builder build_0, tuple v) inline;

;; $EchoMessage$_store_cell
cell $EchoMessage$_store_cell(tuple v) inline;

;; $EchoMessage$_load
(slice, (tuple)) $EchoMessage$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Echo$init$_load
(slice, ((int))) $Echo$init$_load(slice sc_0) inline;

;; $Echo$_contract_init
tuple $Echo$_contract_init(int $a) impure inline_ref;

;; $Echo$_contract_load
tuple $Echo$_contract_load() impure inline_ref;

;; $Echo$_contract_store
() $Echo$_contract_store(tuple v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Slice$_fun_asCell
cell $Slice$_fun_asCell(slice $self) impure inline;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $Echo$_fun_hello
(tuple, slice) $Echo$_fun_hello(tuple $self, slice $src) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Echo$_fun_forward
(tuple, ()) $Echo$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Echo$_fun_reply
(tuple, ()) $Echo$_fun_reply(tuple $self, cell $body) impure inline;
