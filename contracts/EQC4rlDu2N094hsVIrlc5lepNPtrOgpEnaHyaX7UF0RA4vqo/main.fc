#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

() save_data(int counter, slice sender, slice owner) impure inline {
  set_data(begin_cell()
    .store_uint(counter, 32)
    .store_slice(sender)
    .store_slice(owner)
  .end_cell());
}

(int, slice, slice) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
    ds~load_uint(32),
    ds~load_msg_addr(),
    ds~load_msg_addr()
  );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  var (current_total, _last_sender, owner_address) = load_data();
  int op = in_msg_body~load_uint(32);

  if (op == 1) {
    int inc = in_msg_body~load_uint(32);
    save_data(current_total + inc, sender_address, owner_address);
    return ();
  }

  if (op == 2) { ;; deposit
    save_data(current_total + 1, sender_address, owner_address);
    return ();
  }

  if (op == 3) { ;; withdraw
    throw_unless(103, equal_slice_bits(sender_address, owner_address));

    int withdraw_amount = in_msg_body~load_coins();
    var [balance, _] = get_balance();

    throw_unless(104, balance >= withdraw_amount);

    int msg_mode = 1; ;; Ordinaray 0 + PayFees separately 1

    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(sender_address)
      .store_coins(min(withdraw_amount, balance - const::min_tons_for_storage))
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    send_raw_message(msg.end_cell(), msg_mode);
    save_data(0, owner_address, owner_address);

    return();
  }

  throw(777);
}


(int, slice, slice) get_contract_storage_data() method_id {
  var (count, address, owner) = load_data();
  return (count, address, owner);
}

int get_my_balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}
