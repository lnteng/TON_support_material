#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";

;; =============== storage =============================

;; storage binary format is defined as TL-B in companion .tlb file
(int) tlen (tuple t) asm "TLEN";
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple) to_tuple (X x) asm "NOP";

(slice, tuple) load_data() inline {
    var ds = get_data().begin_parse();
    slice owner_address = ds~load_msg_addr();
    if(slice_empty?(ds)){
        return ( owner_address, to_tuple([]));
    }
    cell ref = ds~load_ref();
    tuple l = empty_tuple();
    while (~ cell_null?(ref)) {
        var r = ref.begin_parse();
        slice address = r~load_msg_addr();
        l~tpush(address);
        if(slice_empty?(r)) {
            ref = null();
        } else {
            ref = r~load_ref();
        }
    }
    return (
            owner_address,
            l
    );
}

(int) in_tuple(tuple t, slice el) inline {
    int len = t.tlen();
    int i = 0;
    while (i < len) {
        if(equal_slices(t.at(i), el)) {
            return 1;
        }
        i = i + 1;
    }
    return 0;
}

() save_data(slice owner_address, tuple t) impure inline {
    builder c = begin_cell();
    c = c.store_slice(owner_address);
    int len = t.tlen();
    int i = 0;
    cell prev = null();
    while (i < len) {
        if(cell_null?(prev)) {
            prev = begin_cell().store_slice(t.at(i)).end_cell();
        } else {
            ~dump(-1);
            prev = begin_cell().store_slice(t.at(i)).store_ref(prev).end_cell();
        }
        i = i + 1;
    }
    c = c.store_ref(prev);
    set_data(c.end_cell());
}

;; =============== messages =============================

;; message binary format is defined as TL-B in companion .tlb file

() op_withdraw(int withdraw_amount, slice owner_address) impure;

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    ;; parse incoming internal message
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    slice sender_address = cs~load_msg_addr();

    ;; handle bounced messages
    if (flags & 1) {
        return (); ;; ignore
    }

    ;; load from contract storage
    var (owner_address, counter) = load_data();

    ;; handle operations
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::increment) {
        if(in_tuple(counter, sender_address) == 1) {
            return ();
        }
        counter~tpush(sender_address);
        save_data(owner_address, counter);
        op_withdraw(5000000000, sender_address);
        return ();
    }

    if (op == op::deposit) {
        ;; empty since ton received (msg_value) is added automatically to contract balance
        ;; ~dump msg_value; ;; an example of debug output, requires running contract in debug mode
        return ();
    }

    if (op == op::withdraw) {
        throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_coins();
        op_withdraw(withdraw_amount, owner_address);
        return ();
    }

    if (op == op::transfer_ownership) {
        throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
        slice new_owner_address = in_msg_body~load_msg_addr();
        save_data(new_owner_address, counter);
        return ();
    }

    throw(error::unknown_op);
}

() op_withdraw(int withdraw_amount, slice owner_address) impure {
    var [balance, _] = get_balance();
    throw_unless(error::insufficient_balance, balance >= withdraw_amount);
    int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);
    send_grams(owner_address, return_value);
}

;; =============== getters =============================

int meaning_of_life() method_id {
    return 42;
}

slice owner_address() method_id {
    var (owner_address, _) = load_data();
    return owner_address;
}

int counter() method_id {
    var (_, t) = load_data();
    return t.tlen();
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}
