#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

const int percent_devider = 10000;

;; Default SBT
global int storage::index;
global int init?;
global slice storage::collection_address;
global slice storage::owner_address;
global slice storage::authority_address;  ;;
global cell storage::content;
global int storage::revoked_at;
;; Custom
global slice storage::jetton_address;     ;; jetton wallet address
global int storage::purchased_jettons;    ;; total purchased tokens
global int storage::withdrawed_jettons;   ;; withdrawed tokens
global int storage::unlock_start;         ;; time of first unlock (in seconds)
global int storage::initial_unlock;       ;; percent of tokens unlocked at first
global int storage::cycle_length;         ;; time between unlocks in seconds
global int storage::cycles_number;        ;; number of unlocks including initial


() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::index              = ds~load_uint(64);
    storage::collection_address = ds~load_msg_addr();
    init?                       = false;

    if (ds.slice_bits() > 0) {
        init?                      = true;
        storage::owner_address     = ds~load_msg_addr();
        storage::content           = ds~load_ref();
        storage::authority_address = ds~load_msg_addr();
        storage::revoked_at        = ds~load_uint(64);

        slice content_parsed = storage::content.begin_parse();
        storage::jetton_address     = content_parsed~load_msg_addr();
        storage::purchased_jettons  = content_parsed~load_coins();
        storage::withdrawed_jettons = content_parsed~load_coins();
        storage::unlock_start       = content_parsed~load_uint(32);
        storage::initial_unlock     = content_parsed~load_uint(16);
        storage::cycle_length       = content_parsed~load_uint(32);
        storage::cycles_number      = content_parsed~load_uint(16);
    }
}


() save_data() impure {
    storage::content = begin_cell()
                            .store_slice(storage::jetton_address)
                            .store_coins(storage::purchased_jettons)
                            .store_coins(storage::withdrawed_jettons)
                            .store_uint(storage::unlock_start, 32)
                            .store_uint(storage::initial_unlock, 16)
                            .store_uint(storage::cycle_length, 32)
                            .store_uint(storage::cycles_number, 16)
                       .end_cell();
    set_data(
            begin_cell()
                .store_uint(storage::index, 64)
                .store_slice(storage::collection_address)
                .store_slice(storage::owner_address)
                .store_ref(storage::content)
                .store_slice(storage::authority_address)
                .store_uint(storage::revoked_at, 64)
            .end_cell()
    );
}


() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var body = begin_cell().store_uint(op, 32).store_uint(query_id, 64);
    if (~ builder_null?(payload)) {
        body = body.store_builder(payload);
    }

    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(body.end_cell());

    send_raw_message(msg.end_cell(), send_mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Default SBT start
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(storage::collection_address, sender_address));

        storage::owner_address      = in_msg_body~load_msg_addr();
        storage::authority_address  = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
        storage::revoked_at         = 0;

        slice content_parsed = in_msg_body~load_ref().begin_parse();
        content_parsed~skip_bits(64);
        storage::jetton_address     = content_parsed~load_msg_addr();
        storage::purchased_jettons  = content_parsed~load_coins();
        storage::withdrawed_jettons = content_parsed~load_coins();
        storage::unlock_start       = content_parsed~load_uint(32);
        storage::initial_unlock     = content_parsed~load_uint(16);
        storage::cycle_length       = content_parsed~load_uint(32);
        storage::cycles_number      = content_parsed~load_uint(16);

        save_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        op = in_msg_body~load_uint(32);

        if (op == op::ownership_proof) {
            int query_id = in_msg_body~load_uint(64);
            send_msg(storage::owner_address, 0, op::ownership_proof_bounced, query_id, null(), 64);
        }
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::request_owner) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
                    .store_uint(storage::index, 256)
                    .store_slice(sender_address)
                    .store_slice(storage::owner_address)
                    .store_ref(body)
                    .store_uint(storage::revoked_at, 64)
                    .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(storage::content);
        }

        send_msg(dest, 0, op::owner_info, query_id, msg, 64);
        return ();
    }

    if (op == op::prove_ownership) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
                .store_uint(storage::index, 256)
                .store_slice(storage::owner_address)
                .store_ref(body)
                .store_uint(storage::revoked_at, 64)
                .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(storage::content);
        }

        send_msg(dest, 0, op::ownership_proof, query_id, msg, 64);
        return ();
    }

    if (op == op::get_static_data) {
        var msg = begin_cell().store_uint(storage::index, 256).store_slice(storage::collection_address);

        send_msg(sender_address, 0, op::report_static_data, query_id, msg, 64);
        return ();
    }

    if (op == op::revoke) {
        throw_unless(401, equal_slices(storage::authority_address, sender_address));
        throw_unless(403, storage::revoked_at == 0);

        storage::revoked_at = now();
        save_data();
        return ();
    }

    if (op == op::take_excess) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        ;; reserve amount for storage
        raw_reserve(min_tons_for_storage(), 0);

        send_msg(sender_address, 0, op::excesses, query_id, null(), 128);
        return ();
    }

    if (op == op::transfer) {
        throw(413);
    }
    ;; default SBT end

    int now_time = now();
    
    if (op == op::claim) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        int available_percent = 0;
        if (now_time > storage::unlock_start) {
            available_percent += storage::initial_unlock;
        }
        else {
            throw(414);
        }
        
        ;; int percent_per_cycle = (percent_devider - storage::initial_unlock) / storage::cycles_number;
        ;; int unlock_time = storage::unlock_start + storage::cycle_length;
        ;; int cycles_left = storage::cycles_number;
        ;; while ((now_time > unlock_time) & (cycles_left != 0)) {
        ;;     available_percent += percent_per_cycle;
        ;;     unlock_time += storage::cycle_length;
        ;;     cycles_left -= 1;
        ;; }
        available_percent += (percent_devider - storage::initial_unlock) * min(storage::cycles_number, (now() - storage::unlock_start) / storage::cycle_length) / storage::cycles_number;
        
        int available_jettons = ((percent_devider - available_percent < 10) ? 
                                 (storage::purchased_jettons - storage::withdrawed_jettons) :
                                 (storage::purchased_jettons * available_percent / percent_devider - storage::withdrawed_jettons));
        
        if (available_jettons > 0) {
            builder payload = begin_cell()
                                .store_coins(available_jettons)
                                .store_slice(storage::owner_address)
                                .store_slice(storage::owner_address)
                                .store_uint(0, 1)
                                .store_coins(1)
                                .store_uint(0, 1);
            send_msg(storage::jetton_address, 0, op::transfer_jetton, query_id, payload, 64);
            storage::withdrawed_jettons += available_jettons;
            save_data();
            return ();
        }
        else {
            throw(414);
        }
    }

    if (op == op::destroy) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));
        ;; throw_unless(415, storage::withdrawed_jettons == storage::purchased_jettons);

        int remaining_jettons = storage::purchased_jettons - storage::withdrawed_jettons; 
        if (remaining_jettons > 0) {
            builder payload = begin_cell()
                                .store_coins(remaining_jettons)
                                .store_slice(storage::owner_address);
            send_msg(storage::jetton_address, 38000000, op::burn_jetton, query_id, payload, 0);
        }

        send_msg(sender_address, 0, op::excesses, query_id, null(), 128);
        storage::owner_address = null_addr();
        storage::authority_address = null_addr();
        save_data();
        return ();
    }

    throw(0xffff);
}


;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    load_data();
    return (init?, storage::index, storage::collection_address, storage::owner_address, storage::content);
}

slice get_authority_address() method_id {
    load_data();
    return storage::authority_address;
}

int get_revoked_time() method_id {
    load_data();
    return storage::revoked_at;
}


(int, slice, slice, int, int, int, int, int, int) get_sale_data() method_id {
    load_data();
    return (
        storage::index,
        storage::owner_address,
        storage::jetton_address,
        storage::purchased_jettons,
        storage::withdrawed_jettons,
        storage::unlock_start,
        storage::initial_unlock,
        storage::cycle_length,
        storage::cycles_number 
    );      
}
