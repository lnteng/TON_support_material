;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ProvideWalletAddress
;; Header: 0x2c76b973
;; TLB: provide_wallet_address#2c76b973 query_id:uint64 owner_address:address include_address:bool = ProvideWalletAddress
;;

builder $ProvideWalletAddress$_store(builder build_0, (int, slice, int) v) inline {
    var (v'query_id, v'owner_address, v'include_address) = v;
    build_0 = store_uint(build_0, 745978227, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'owner_address);
    build_0 = build_0.store_int(v'include_address, 1);
    return build_0;
}

cell $ProvideWalletAddress$_store_cell((int, slice, int) v) inline {
    return $ProvideWalletAddress$_store(begin_cell(), v).end_cell();
}

((int, slice, int)) $ProvideWalletAddress$_constructor_query_id_owner_address_include_address(int query_id, slice owner_address, int include_address) inline {
    return (query_id, owner_address, include_address);
}

;;
;; Type: TakeWalletAddress
;; Header: 0xd1735400
;; TLB: take_wallet_address#d1735400 query_id:uint64 wallet_address:address owner_address:Maybe ^cell = TakeWalletAddress
;;

(slice, ((int, slice, cell))) $TakeWalletAddress$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3513996288);
    var v'query_id = sc_0~load_uint(64);
    var v'wallet_address = sc_0~__tact_load_address();
    var v'owner_address = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'query_id, v'wallet_address, v'owner_address));
}

;;
;; Type: Transfer
;; Header: 0x0f8a7ea5
;; TLB: transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = Transfer
;;

builder $Transfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $Transfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $Transfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: Data
;; TLB: _ owner:address jetton_wallet:address master:address = Data
;;

(slice, slice, slice) $Data$_to_external(((slice, slice, slice)) v) inline {
    var (v'owner, v'jetton_wallet, v'master) = v; 
    return (v'owner, v'jetton_wallet, v'master);
}

((slice, slice, slice)) $Data$_constructor_owner_jetton_wallet_master(slice owner, slice jetton_wallet, slice master) inline {
    return (owner, jetton_wallet, master);
}

;;
;; Type: TokenMaster
;;

builder $TokenMaster$_store(builder build_0, (slice, slice, slice, int) v) inline {
    var (v'owner, v'master, v'jetton_wallet, v'active) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'jetton_wallet);
    build_0 = build_0.store_int(v'active, 1);
    return build_0;
}

(slice, ((slice, slice, slice, int))) $TokenMaster$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'master = sc_0~__tact_load_address();
    var v'jetton_wallet = sc_0~__tact_load_address();
    var v'active = sc_0~load_int(1);
    return (sc_0, (v'owner, v'master, v'jetton_wallet, v'active));
}

(slice, ((slice, slice))) $TokenMaster$init$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'master, v'owner));
}

(slice, slice, slice, int) $TokenMaster$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TokenMaster$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice master, slice owner) = $sc~$TokenMaster$init$_load();
        $sc.end_parse();
        return $TokenMaster$_contract_init(master, owner);
    }
}

() $TokenMaster$_contract_store((slice, slice, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TokenMaster$_store(b, v);
    set_data(b.end_cell());
}