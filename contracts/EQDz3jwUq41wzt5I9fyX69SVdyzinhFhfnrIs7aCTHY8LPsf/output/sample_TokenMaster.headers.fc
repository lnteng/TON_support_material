;;
;; Header files for TokenMaster
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ProvideWalletAddress$_store
builder $ProvideWalletAddress$_store(builder build_0, (int, slice, int) v) inline;

;; $ProvideWalletAddress$_store_cell
cell $ProvideWalletAddress$_store_cell((int, slice, int) v) inline;

;; $TakeWalletAddress$_load
(slice, ((int, slice, cell))) $TakeWalletAddress$_load(slice sc_0) inline;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $TokenMaster$_store
builder $TokenMaster$_store(builder build_0, (slice, slice, slice, int) v) inline;

;; $TokenMaster$_load
(slice, ((slice, slice, slice, int))) $TokenMaster$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Data$_to_external
(slice, slice, slice) $Data$_to_external(((slice, slice, slice)) v) inline;

;; $TokenMaster$init$_load
(slice, ((slice, slice))) $TokenMaster$init$_load(slice sc_0) inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $ProvideWalletAddress$_constructor_query_id_owner_address_include_address
((int, slice, int)) $ProvideWalletAddress$_constructor_query_id_owner_address_include_address(int query_id, slice owner_address, int include_address) inline;

;; $TokenMaster$_contract_init
(slice, slice, slice, int) $TokenMaster$_contract_init(slice $master, slice $owner) impure inline_ref;

;; $TokenMaster$_contract_load
(slice, slice, slice, int) $TokenMaster$_contract_load() impure inline_ref;

;; $TokenMaster$_contract_store
() $TokenMaster$_contract_store((slice, slice, slice, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $Transfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;

;; $TokenMaster$_fun_send_jetton
((slice, slice, slice, int), ()) $TokenMaster$_fun_send_jetton((slice, slice, slice, int) $self, slice $to, int $value, int $mode, int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload) impure inline_ref;

;; $Data$_constructor_owner_jetton_wallet_master
((slice, slice, slice)) $Data$_constructor_owner_jetton_wallet_master(slice owner, slice jetton_wallet, slice master) inline;

;; $TokenMaster$_fun_data
((slice, slice, slice, int), (slice, slice, slice)) $TokenMaster$_fun_data((slice, slice, slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TokenMaster$_fun_forward
((slice, slice, slice, int), ()) $TokenMaster$_fun_forward((slice, slice, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TokenMaster$_fun_reply
((slice, slice, slice, int), ()) $TokenMaster$_fun_reply((slice, slice, slice, int) $self, cell $body) impure inline;

;; $TokenMaster$_fun_notify
((slice, slice, slice, int), ()) $TokenMaster$_fun_notify((slice, slice, slice, int) $self, cell $body) impure inline;

;; $TokenMaster$_fun_requireOwner
((slice, slice, slice, int), ()) $TokenMaster$_fun_requireOwner((slice, slice, slice, int) $self) impure inline_ref;

;; $TokenMaster$_fun_owner
((slice, slice, slice, int), slice) $TokenMaster$_fun_owner((slice, slice, slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
