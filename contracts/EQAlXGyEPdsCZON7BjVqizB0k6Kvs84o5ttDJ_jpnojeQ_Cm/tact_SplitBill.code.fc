#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_SplitBill.headers.fc";
#include "tact_SplitBill.stdlib.fc";
#include "tact_SplitBill.constants.fc";
#include "tact_SplitBill.storage.fc";

;;
;; Contract SplitBill functions
;;

tuple $SplitBill$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

;;
;; Receivers of a Contract SplitBill
;;

(tuple, ()) $SplitBill$_internal_text_2efdb37cbdb781814a131babc0336274ab949e70db6476603d92cd106962dace(tuple $self) impure inline {
    var $self = $self;
    int $splitValue = ($Context$_get_value(__tact_context_get()) / 1000);
    int $refundValue = ($Context$_get_value(__tact_context_get()) - $splitValue);
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body(__tact_context_get_sender(), true, $refundValue, (2 + 1), __gen_cell_comment_e1df4a1ac0d8590f03c6f9ee0699a027c563db531fdd147a6a002661adc2f584()));
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body(__gen_slice_address_60dec7a5d12feb9b97d0f9458934c413565e00e88fcbcebb53ea237d994410c0(), true, $splitValue, (2 + 1), __gen_cell_comment_5b25cb0e95f950b2a8f9842847fdd40cf0a89ce80f69663df32223daab36e859()));
    return ($self, ());
}

(tuple, ()) $SplitBill$_internal_text_c8ecc385e2cb12b3f52c435b816a58250ae64c7250a7fb2a24a010cd4c0346c2(tuple $self) impure inline {
    var $self = $self;
    __tact_nop();
    return ($self, ());
}

((tuple), ()) $SplitBill$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$SplitBill$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract SplitBill
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmSH13VsyC61D9bgv3zdspN4PJGaa77kqMzq7L8ucZptea";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SplitBill
;;

(tuple, int) $SplitBill$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SplitBill$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Refund 99.9%" message
        if (text_op == 0x2efdb37cbdb781814a131babc0336274ab949e70db6476603d92cd106962dace) {
            self~$SplitBill$_internal_text_2efdb37cbdb781814a131babc0336274ab949e70db6476603d92cd106962dace();
            return (self, true);
        }
        
        ;; Receive "Gas" message
        if (text_op == 0xc8ecc385e2cb12b3f52c435b816a58250ae64c7250a7fb2a24a010cd4c0346c2) {
            self~$SplitBill$_internal_text_c8ecc385e2cb12b3f52c435b816a58250ae64c7250a7fb2a24a010cd4c0346c2();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SplitBill$_contract_load();
    
    ;; Handle operation
    int handled = self~$SplitBill$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SplitBill$_contract_store(self);
}
