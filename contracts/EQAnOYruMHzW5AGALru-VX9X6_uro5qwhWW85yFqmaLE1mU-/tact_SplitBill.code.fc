#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_SplitBill.headers.fc";
#include "tact_SplitBill.stdlib.fc";
#include "tact_SplitBill.constants.fc";
#include "tact_SplitBill.storage.fc";

;;
;; Contract SplitBill functions
;;

tuple $SplitBill$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, (int, int)) $SplitBill$_fun_refund(tuple $self, int $value) impure inline_ref {
    var ($self) = $self;
    int $take = ($value / 1000);
    int $refund = ($value - $take);
    return ($self, $Refundable$_constructor_amount_take($refund, $take));
}

(tuple, int) $SplitBill$_fun_refundAmount(tuple $self, int $value) impure inline_ref {
    var ($self) = $self;
    var ($refund'amount, $refund'take) = $self~$SplitBill$_fun_refund($value);
    return ($self, $refund'amount);
}

(tuple, int) $SplitBill$_fun_balance(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_my_balance());
}

;;
;; Receivers of a Contract SplitBill
;;

((tuple), ()) %$SplitBill$_internal_empty(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

(tuple, ()) $SplitBill$_internal_text_98399ebe61358a139492a35f6b030a9577fa173ec8c9085f69a6ff99bbd7a389(tuple $self) impure inline {
    var $self = $self;
    var ($refund'amount, $refund'take) = $self~$SplitBill$_fun_refund($Context$_get_value(__tact_context_get()));
    $global_send($SendParameters$_constructor_to_value_mode(__gen_slice_address_60dec7a5d12feb9b97d0f9458934c413565e00e88fcbcebb53ea237d994410c0(), $refund'take, 1));
    $global_send($SendParameters$_constructor_to_value_mode(__tact_context_get_sender(), $refund'amount, 1));
    return ($self, ());
}

((tuple), ()) $SplitBill$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$SplitBill$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract SplitBill
;;

_ %refundAmount(int $$value) method_id(122837) {
    int $value = $$value;
    var self = $SplitBill$_contract_load();
    var res = self~$SplitBill$_fun_refundAmount($value);
    return res;
}

_ %balance() method_id(104128) {
    var self = $SplitBill$_contract_load();
    var res = self~$SplitBill$_fun_balance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmPEY6rjbyr7CeASBjQzpxGAB5fBrV6wxTT6a5cHMKpo7b";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SplitBill
;;

(tuple, int) $SplitBill$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$SplitBill$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SplitBill$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "split" message
        if (text_op == 0x98399ebe61358a139492a35f6b030a9577fa173ec8c9085f69a6ff99bbd7a389) {
            self~$SplitBill$_internal_text_98399ebe61358a139492a35f6b030a9577fa173ec8c9085f69a6ff99bbd7a389();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SplitBill$_contract_load();
    
    ;; Handle operation
    int handled = self~$SplitBill$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SplitBill$_contract_store(self);
}
