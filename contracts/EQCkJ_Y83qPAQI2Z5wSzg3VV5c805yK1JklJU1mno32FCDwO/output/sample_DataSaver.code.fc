#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_DataSaver.headers.fc";
#include "sample_DataSaver.stdlib.fc";
#include "sample_DataSaver.storage.fc";

;;
;; Contract DataSaver functions
;;

(int, cell, cell, cell) $DataSaver$_contract_init() impure inline_ref {
    var (($self'index, $self'owner, $self'holder, $self'data)) = (0, null(), null(), null());
    return ($self'index, $self'owner, $self'holder, $self'data);
}

((int, cell, cell, cell), (slice, slice)) $DataSaver$_fun_get_data((int, cell, cell, cell) $self, int $index) impure inline_ref {
    var (($self'index, $self'owner, $self'holder, $self'data)) = $self;
    return (($self'index, $self'owner, $self'holder, $self'data), $Data$_not_null($Data$_load_opt(__tact_dict_get_int_cell($self'data, 257, $index))));
}

((int, cell, cell, cell), (int, cell)) $DataSaver$_fun_get_address((int, cell, cell, cell) $self) impure inline_ref {
    var (($self'index, $self'owner, $self'holder, $self'data)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    return (($self'index, $self'owner, $self'holder, $self'data), $Holder$_not_null($Holder$_load_opt(__tact_dict_get_slice_cell($self'holder, 267, $ctx'sender))));
}

;;
;; Receivers of a Contract DataSaver
;;

(((int, cell, cell, cell)), ()) $DataSaver$_internal_binary_DataInput((int, cell, cell, cell) $self, (slice, slice) $msg) impure inline {
    var ($self'index, $self'owner, $self'holder, $self'data) = $self;
    var ($msg'key, $msg'data) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $self'index = ($self'index + 1);
    $self'owner~__tact_dict_set_int_slice(257, $self'index, $ctx'sender);
    if (null?($Holder$_load_opt(__tact_dict_get_slice_cell($self'holder, 267, $ctx'sender)))) {
        cell $init_map = null();
        $init_map~__tact_dict_set_int_int(257, 0, $self'index, 257);
        var ($_holder'total, $_holder'holder) = $Holder$_constructor_total_holder(1, $init_map);
        $self'holder~__tact_dict_set_slice_cell(267, $ctx'sender, $Holder$_store_cell(($_holder'total, $_holder'holder)));
    } else {
        var ($_holder'total, $_holder'holder) = $Holder$_not_null($Holder$_load_opt(__tact_dict_get_slice_cell($self'holder, 267, $ctx'sender)));
        $_holder'holder~__tact_dict_set_int_int(257, $_holder'total, $self'index, 257);
        $_holder'total = ($_holder'total + 1);
        $self'holder~__tact_dict_set_slice_cell(267, $ctx'sender, $Holder$_store_cell(($_holder'total, $_holder'holder)));
    }
    var ($data'key, $data'data) = $Data$_constructor_key_data($msg'key, $msg'data);
    $self'data~__tact_dict_set_int_cell(257, $self'index, $Data$_store_cell(($data'key, $data'data)));
    return (($self'index, $self'owner, $self'holder, $self'data), ());
}

(((int, cell, cell, cell)), ()) $DataSaver$_internal_binary_DataInputTest((int, cell, cell, cell) $self, (slice, slice) $msg) impure inline {
    var ($self'index, $self'owner, $self'holder, $self'data) = $self;
    var ($msg'key, $msg'data) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $self'index = ($self'index + 1);
    $self'owner~__tact_dict_set_int_slice(257, $self'index, $ctx'sender);
    if (null?($Holder$_load_opt(__tact_dict_get_slice_cell($self'holder, 267, $ctx'sender)))) {
        cell $init_map = null();
        $init_map~__tact_dict_set_int_int(257, 0, $self'index, 257);
        var ($_holder'total, $_holder'holder) = $Holder$_constructor_total_holder(1, $init_map);
        $self'holder~__tact_dict_set_slice_cell(267, $ctx'sender, $Holder$_store_cell(($_holder'total, $_holder'holder)));
    } else {
        var ($_holder'total, $_holder'holder) = $Holder$_not_null($Holder$_load_opt(__tact_dict_get_slice_cell($self'holder, 267, $ctx'sender)));
        $_holder'holder~__tact_dict_set_int_int(257, $_holder'total, $self'index, 257);
        $_holder'total = ($_holder'total + 1);
    }
    var ($data'key, $data'data) = $Data$_constructor_key_data($msg'key, $msg'data);
    $self'data~__tact_dict_set_int_cell(257, $self'index, $Data$_store_cell(($data'key, $data'data)));
    return (($self'index, $self'owner, $self'holder, $self'data), ());
}

;;
;; Get methods of a Contract DataSaver
;;

_ %get_data(int $$index) method_id(78985) {
    int $index = $$index;
    var self = $DataSaver$_contract_load();
    var res = self~$DataSaver$_fun_get_data($index);
    return $Data$_to_external(res);
}

_ %get_address() method_id(91527) {
    var self = $DataSaver$_contract_load();
    var res = self~$DataSaver$_fun_get_address();
    return $Holder$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmaS3ntQNdD9p6CwNRmd2SscXNs5RDoGyt1KtGaqowMf8d";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract DataSaver
;;

((int, cell, cell, cell), int) $DataSaver$_contract_router_internal((int, cell, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive DataInput message
    if (op == 3684417297) {
        var msg = in_msg~$DataInput$_load();
        self~$DataSaver$_internal_binary_DataInput(msg);
        return (self, true);
    }
    
    ;; Receive DataInputTest message
    if (op == 3590725090) {
        var msg = in_msg~$DataInputTest$_load();
        self~$DataSaver$_internal_binary_DataInputTest(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $DataSaver$_contract_load();
    
    ;; Handle operation
    int handled = self~$DataSaver$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $DataSaver$_contract_store(self);
}
