;; ;; Standard library for funC

int now() asm "NOW";
int slice_hash(slice s) asm "HASHSU";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
cell get_data() asm "c4 PUSH";
() set_data(cell c) impure asm "c4 POP";
() accept_message() impure asm "ACCEPT";
slice begin_parse(cell c) asm "CTOS";
() end_parse(slice s) impure asm "ENDS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, cell) load_dict(slice s) asm( -> 1 0) "LDDICT";
int slice_bits(slice s) asm "SBITS";
builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
builder store_dict(builder b, cell c) asm(c b) "STDICT";
(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";
cell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";
(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";
(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN" "NULLSWAPIFNOT2";
(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTIGETNEXT" "NULLSWAPIFNOT2";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

