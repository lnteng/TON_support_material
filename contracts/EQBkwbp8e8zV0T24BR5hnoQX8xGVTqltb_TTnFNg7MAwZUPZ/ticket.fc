;;             Fortuna.ton
;;  Ticket smart contract by TONLab.pro
;;  Implements NFT Item Interface

;;
;;  Storage
;;
;;  uint16 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  uint32 last_draw_time
;;  ^Cell individual_content
;;

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";

const int minimum_ticket_balance = 25000000;

(int, int, slice, slice, int) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(16), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_uint(32));
    } else {
      return (0, index, collection_address, null(), 0);
    }
}

() store_data(int index, slice collection_address, slice owner_address, int last_draw_time) impure {
    set_data(
        begin_cell()
            .store_uint(index, 16)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_uint(last_draw_time, 32)
            .end_cell()
    );
}

() send_transfer_notification(slice to_address, slice from_address, int my_balance, int query_id, int fwd_fee) impure inline {
    int rest_amount = my_balance - minimum_ticket_balance - fwd_fee;
    throw_unless(402, rest_amount >= 0);
    var msg = begin_cell()
               .store_uint(0x10, 6)
               .store_slice(to_address)
               .store_coins(rest_amount)
               .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
               .store_uint(op::ownership_assigned, 32)
               .store_uint(query_id, 64)
               .store_slice(from_address);
    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; always ignore bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    (int init?, int index, slice collection_address, slice owner_address, int last_draw_time) = load_data();

    if (equal_slices(collection_address, sender_address)) {
        if (~ init?) {
            slice new_owner_address = in_msg_body~load_msg_addr();
            send_transfer_notification(new_owner_address, collection_address, my_balance, 0, fwd_fee);
            store_data(index, collection_address, new_owner_address, in_msg_body~load_uint(32));
            return ();
        }
        int op = in_msg_body~load_uint(32);
        int query_id = in_msg_body~load_uint(64);

        if (op == op::transfer) {
            slice new_owner_address = in_msg_body~load_msg_addr();
            int draw_time = in_msg_body~load_uint(32);
            force_chain(new_owner_address);
            send_transfer_notification(new_owner_address, collection_address, my_balance, query_id, fwd_fee);
            store_data(index, collection_address, new_owner_address, draw_time);
            return ();
        }

        if (op == op::owner_request) {
            cell prize = in_msg_body~load_ref();
            var msg = begin_cell()
                       .store_uint(0x18, 6)
                       .store_slice(sender_address)
                       .store_coins(0)
                       .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                       .store_uint(op::owner_response, 32)
                       .store_uint(query_id, 64)
                       .store_uint(index, 16)
                       .store_slice(owner_address)
                       .store_ref(prize)
                      .end_cell();
                        
            send_raw_message(msg, 64);
            return ();
        }
        throw(0xffff);
    } 
    ;; ticket stays in the wallet, so owner can immitate the transfer
    throw_unless(405, init?);
    throw_unless(401, equal_slices(sender_address, owner_address));
    throw_unless(499, last_draw_time < now());
    int rest = my_balance - minimum_ticket_balance - fwd_fee;

    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(rest)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses, 32)
                .store_uint(0, 64)
              .end_cell();

    send_raw_message(msg, 1);
    store_data(index, collection_address, collection_address, last_draw_time);
    return ();
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, int last_draw_time) = load_data();

    if (last_draw_time < now()) {
        owner_address = collection_address;
    }

    slice str_index = to_string(index);
    cell content = begin_cell()
                     .store_slice(str_index)
                     .store_slice(".json")
                   .end_cell();

    return (init?, index, collection_address, owner_address, content);
}

int get_draw_time() method_id {
    var (_, _, _, _, last_draw_time) = load_data();
    return last_draw_time;
}
