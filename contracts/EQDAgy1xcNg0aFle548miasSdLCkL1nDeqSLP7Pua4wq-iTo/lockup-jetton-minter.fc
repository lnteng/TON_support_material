;; Based on "jetton-minter-ICO.fc":
;; https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-minter-ICO.fc

;; Jettons minter smart contract

;; storage scheme: 
{-
Storage =
	total_supply:Coins | <= 124 bits
	admin_address:MsgAddress | < 600 bits
	content:^Cell
	jetton_wallet_code:^Cell
	purchase_price: uint | 128 bits
	purchase_lockup: uint | 48 bits
-}

int purchase_price_bitlength() asm "128 PUSHINT";
slice withdraw_message() asm "x{576974686472617720544f4e2066726f6d204a6574746f6e2073616c6573} PUSHSLICE";
;; Hex string for: "Withdraw TON from Jetton sales"

(int, slice, cell, cell, int, int) load_data() inline {
	slice ds = get_data().begin_parse();
	return (
		ds~load_grams(), ;; total_supply
		ds~load_msg_addr(), ;; admin_address
		ds~load_ref(), ;; content
		ds~load_ref(), ;; jetton_wallet_code
		ds~load_uint(purchase_price_bitlength()), ;; purchase_price
		ds~load_uint(lockup_bitlength()) ;; purchase_lockup
	);
}

() save_data(
	int total_supply, slice admin_address,
	cell content, cell jetton_wallet_code,
	int purchase_price, int purchase_lockup
) impure inline {
	set_data(begin_cell()
			.store_grams(total_supply)
			.store_slice(admin_address)
			.store_ref(content)
			.store_ref(jetton_wallet_code)
			.store_uint(purchase_price, purchase_price_bitlength())
			.store_uint(purchase_lockup, lockup_bitlength())
			.end_cell()
	);
}

() mint_tokens(
	slice to_address, cell jetton_wallet_code,
	int amount, cell master_msg
) impure {
	cell state_init = calculate_jetton_wallet_state_init(
		to_address, my_address(), jetton_wallet_code);
	slice to_wallet_address = calculate_jetton_wallet_address(state_init);

	var msg = begin_cell()
		.store_uint(0x18, 6)
		.store_slice(to_wallet_address)
		.store_grams(amount)
		.store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
		.store_ref(state_init)
		.store_ref(master_msg);
	send_raw_message(msg.end_cell(), 1);
	;; pay transfer fees separately, revert on errors
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
	slice cs = in_msg_full.begin_parse();
	int flags = cs~load_uint(4);

	if (flags & 1) { ;; ignore all bounced messages
		return ();
	}
	slice sender_address = cs~load_msg_addr();

	(int total_supply, slice admin_address,
	 cell content, cell jetton_wallet_code,
	 int purchase_price, int purchase_lockup) = load_data();

	if (in_msg_body.slice_empty?()) { ;; buy jettons for Toncoin

		int amount = 50000000; ;; for mint message
		int spend_amount = msg_value - amount;
		int jetton_amount = spend_amount * 1000000000 / purchase_price;
		throw_unless(76, jetton_amount > 0);

		{-
		internal_transfer V2 =
			op.internal_transfer: uint32
			query_id: uint64
			amount: (VarUInteger 16)
			from: MsgAddress
			response_address: MsgAddress
			lockup: uint<lockup_bitlength()>
			forward_ton_amount: (VarUInteger 16)
			forward_payload: (Either Cell ^Cell) 
		-}
		var master_msg = begin_cell()
			.store_uint(op::internal_transfer(), 32)
			.store_uint(0, 64) ;; quert_id
			.store_grams(jetton_amount)
			.store_slice(my_address()) ;; from_address
			.store_slice(sender_address) ;; response_address
			.store_uint(purchase_lockup, lockup_bitlength())
			.store_grams(0) ;; no forward_amount
			.store_uint(0, 1) ;; forward_payload in this slice, not separate cell
			.end_cell();

		mint_tokens(sender_address, jetton_wallet_code, amount, master_msg);
		save_data(
			total_supply + jetton_amount, admin_address,
			content, jetton_wallet_code,
			purchase_price, purchase_lockup
		);
		return ();
	}

	int op = in_msg_body~load_uint(32);
	int query_id = in_msg_body~load_uint(64);

	if (op == op::burn_notification()) {
		int jetton_amount = in_msg_body~load_grams();
		slice from_address = in_msg_body~load_msg_addr();
		throw_unless(74,
			slice_data_equal?(
				calculate_user_jetton_wallet_address(
					from_address, my_address(), jetton_wallet_code
				),
				sender_address
			)
		);
		save_data(
			total_supply - jetton_amount, admin_address,
			content, jetton_wallet_code,
			purchase_price, purchase_lockup
		);
		slice response_address = in_msg_body~load_msg_addr();
		if (response_address.preload_uint(2) != 0) {
			var msg = begin_cell()
				.store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
				.store_slice(response_address)
				.store_grams(0)
				.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
				.store_uint(op::excesses(), 32)
				.store_uint(query_id, 64);
			send_raw_message(msg.end_cell(), 2 + 64);
		}
		return ();
	}

	;; The rest of operations are only available to admin
	throw_unless(73, slice_data_equal?(sender_address, admin_address));

	if (op == op::mint()) {
		slice to_address = in_msg_body~load_msg_addr();
		int amount = in_msg_body~load_grams();
		cell master_msg = in_msg_body~load_ref();

		slice master_msg_cs = master_msg.begin_parse();
		master_msg_cs~skip_bits(32 + 64); ;; op + query_id
		int jetton_amount = master_msg_cs~load_grams();
		mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
		save_data(
			total_supply + jetton_amount, admin_address,
			content, jetton_wallet_code,
			purchase_price, purchase_lockup
		);
		return ();
	}

	if (op == op::withdraw()) {
		int amount = in_msg_body~load_grams();
		var msg = begin_cell()
			.store_uint(0x18, 6)
			.store_slice(admin_address)
			.store_grams(amount)
			.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
			;; .store_uint(0, 32) - should be included if necessary by off-chain code in in_msg_body
			.store_slice(in_msg_body); ;; optional - for adding some text to withdrawals
		send_raw_message(msg.end_cell(), 0);
		
		return ();
	}

	if ((op < 3) | (7 < op)) {
		;; Unknown op-code
		throw(0xffff);
	}

	if (op == 3) { ;; change admin	
		admin_address = in_msg_body~load_msg_addr();
	} elseif (op == 4) { ;; change content, !!! allow?
		content = in_msg_body~load_ref();
	} elseif (op == 5) { ;; change purchase price
		purchase_price = in_msg_body~load_uint(purchase_price_bitlength());
	} elseif (op == 6) { ;; change purchase lockup
		purchase_lockup = in_msg_body~load_uint(lockup_bitlength());
	} ;; else op == 7 => do nothing, just for deployment
	save_data(
		total_supply, admin_address,
		content, jetton_wallet_code,
		purchase_price, purchase_lockup
	);	
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
	(int total_supply, slice admin_address,
	 cell content, cell jetton_wallet_code,
	 int purchase_price, int purchase_lockup) = load_data();
	
	return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
	(int total_supply, slice admin_address,
	 cell content, cell jetton_wallet_code,
	 int purchase_price, int purchase_lockup) = load_data();
	
	return calculate_user_jetton_wallet_address(
		owner_address, my_address(), jetton_wallet_code);
}

