global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;
global int __tact_randomized;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_if(137, h == 1279);
    throw_unless(136, h == 1024);
    return address;
}

forall X -> X __tact_not_null(X x) inline {
    throw_if(128, null?(x)); return x;
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set(d, kl, k, v), ());
    }
}

slice __tact_dict_get_int_slice(cell d, int kl, int k) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

int __tact_slice_eq_bits(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

forall X0 -> tuple __tact_tuple_create_1((X0) v) asm "1 TUPLE";

forall X0 -> (X0) __tact_tuple_destroy_1(tuple v) asm "1 UNTUPLE";