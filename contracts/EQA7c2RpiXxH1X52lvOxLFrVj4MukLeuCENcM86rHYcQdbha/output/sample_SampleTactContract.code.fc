#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_SampleTactContract.headers.fc";
#include "sample_SampleTactContract.stdlib.fc";
#include "sample_SampleTactContract.storage.fc";

;;
;; Contract SampleTactContract functions
;;

(int, slice) $SampleTactContract$_contract_init(slice $owner) impure inline_ref {
    var (($self'counter, $self'owner)) = (null(), null());
    $self'owner = $owner;
    $self'counter = 0;
    return ($self'counter, $self'owner);
}

((int, slice), ()) $SampleTactContract$_fun_requireOwner((int, slice) $self) impure inline_ref {
    var (($self'counter, $self'owner)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'counter, $self'owner), ());
}

((int, slice), ()) $SampleTactContract$_fun_add((int, slice) $self, int $v) impure inline_ref {
    var (($self'counter, $self'owner)) = $self;
    ($self'counter, $self'owner)~$SampleTactContract$_fun_requireOwner();
    $self'counter = ($self'counter + $v);
    return (($self'counter, $self'owner), ());
}

((int, slice), int) $SampleTactContract$_fun_counter((int, slice) $self) impure inline_ref {
    var (($self'counter, $self'owner)) = $self;
    return (($self'counter, $self'owner), $self'counter);
}

((int, slice), int) $SampleTactContract$_fun_balance((int, slice) $self) impure inline_ref {
    var (($self'counter, $self'owner)) = $self;
    return (($self'counter, $self'owner), __tact_my_balance());
}

((int, slice), int) $SampleTactContract$_fun_meaning_of_life((int, slice) $self) impure inline_ref {
    var (($self'counter, $self'owner)) = $self;
    return (($self'counter, $self'owner), 42);
}

((int, slice), slice) $SampleTactContract$_fun_owner((int, slice) $self) impure inline_ref {
    var (($self'counter, $self'owner)) = $self;
    return (($self'counter, $self'owner), $self'owner);
}

;;
;; Receivers of a Contract SampleTactContract
;;

(((int, slice)), ()) $SampleTactContract$_internal_binary_Add((int, slice) $self, (int) $msg) impure inline {
    var ($self'counter, $self'owner) = $self;
    var ($msg'amount) = $msg;
    ($self'counter, $self'owner)~$SampleTactContract$_fun_add($msg'amount);
    return (($self'counter, $self'owner), ());
}

(((int, slice)), ()) $SampleTactContract$_internal_binary_Withdraw((int, slice) $self, (int) $msg) impure inline {
    var ($self'counter, $self'owner) = $self;
    var ($msg'amount) = $msg;
    ($self'counter, $self'owner)~$SampleTactContract$_fun_requireOwner();
    throw_unless(8610, (__tact_my_balance() > $msg'amount));
    $global_send($SendParameters$_constructor_to_value_bounce($self'owner, $msg'amount, false));
    return (($self'counter, $self'owner), ());
}

((int, slice), ()) $SampleTactContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae((int, slice) $self) impure inline {
    var ($self'counter, $self'owner) = $self;
    ($self'counter, $self'owner)~$SampleTactContract$_fun_add(1);
    return (($self'counter, $self'owner), ());
}

((int, slice), ()) $SampleTactContract$_internal_text_de670fee8c5612197d3fd2b409468ac62a0804f9c19613ac4bd324771e908c78((int, slice) $self) impure inline {
    var ($self'counter, $self'owner) = $self;
    $self'counter = ($self'counter - 1);
    return (($self'counter, $self'owner), ());
}

(((int, slice)), ()) $SampleTactContract$_internal_binary_ChangeOwner((int, slice) $self, (int, slice) $msg) impure inline {
    var ($self'counter, $self'owner) = $self;
    var ($msg'queryId, $msg'newOwner) = $msg;
    ($self'counter, $self'owner)~$SampleTactContract$_fun_requireOwner();
    $self'owner = $msg'newOwner;
    ($self'counter, $self'owner)~$SampleTactContract$_fun_reply($ChangeOwnerOk$_store_cell($ChangeOwnerOk$_constructor_queryId_newOwner($msg'queryId, $msg'newOwner)));
    return (($self'counter, $self'owner), ());
}

;;
;; Get methods of a Contract SampleTactContract
;;

_ %counter() method_id(104984) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_counter();
    return res;
}

_ %balance() method_id(104128) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_balance();
    return res;
}

_ %meaning_of_life() method_id(109816) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_meaning_of_life();
    return res;
}

_ %owner() method_id(83229) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable.transferable.v2"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmR2NRNTGAu6BGQAYuPZGX8hXsTwwtYBinJQDDjq3qMSP1";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleTactContract
;;

((int, slice), int) $SampleTactContract$_contract_router_internal((int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Add message
    if (op == 2278832834) {
        var msg = in_msg~$Add$_load();
        self~$SampleTactContract$_internal_binary_Add(msg);
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 1616450832) {
        var msg = in_msg~$Withdraw$_load();
        self~$SampleTactContract$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 2174598809) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$SampleTactContract$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "increment" message
        if (text_op == 0xc4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae) {
            self~$SampleTactContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae();
            return (self, true);
        }
        
        ;; Receive "dec" message
        if (text_op == 0xde670fee8c5612197d3fd2b409468ac62a0804f9c19613ac4bd324771e908c78) {
            self~$SampleTactContract$_internal_text_de670fee8c5612197d3fd2b409468ac62a0804f9c19613ac4bd324771e908c78();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleTactContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleTactContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleTactContract$_contract_store(self);
}
