;; NFT collection smart contract

int op::purchase() asm "4110930755 PUSHINT";
int op::open_public_sale() asm "3101433344 PUSHINT";
int op::stop_sale() asm "1577967552 PUSHINT";             
int op::set_price() asm "3753240056 PUSHINT";
int op::change_owner() asm "158404494 PUSHINT";
int op::set_marketplace() asm "86243551 PUSHINT";
int op::set_manager_address() asm "2981795979 PUSHINT";
int op::change_nft_content() asm "4246298277 PUSHINT";
int op::change_royalty_params() asm "1000412852 PUSHINT";
int op::deploy_nft() asm "3525083831 PUSHINT";
int op::get_royalty_params() asm "0x693d3950 PUSHINT";
int op::report_royalty_params() asm "0xa8cb00ad PUSHINT";
int op::transfer() asm "0x5fcc3d14 PUSHINT";

int error::invalid_mint_limit() asm "72 PUSHINT";
int error::invalid_price() asm "73 PUSHINT";
int error::sale_closed() asm "74 PUSHINT";
int error::insufficient_funds() asm "75 PUSHINT";
int error::random_logic_error() asm "76 PUSHINT";
int error::unauthorized() asm "90 PUSHINT";


int equal_slices (slice a, slice b) asm "SDEQ";
int tuple_length( tuple t ) asm "TLEN";

int min_gas_price() asm "10000000 PUSHINT";

int workchain() asm "0 PUSHINT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

(slice, int, cell, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; marketplace_data
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}

(slice, slice, int, int, int, int, int, int, cell) load_marketplace_data(cell data) {
  var ds = data.begin_parse();
  return (
    ds~load_msg_addr(),
    ds~load_msg_addr(),
    ds~load_uint(1),
    ds~load_uint(16),
    ds~load_uint(16),
    ds~load_coins(),
    ds~load_uint(7),
    ds~load_uint(16),
    ds~load_ref()
  );
}

() save_data(slice owner_address, int next_item_index, slice manager_address, slice marketplace_address, int sale_opened, int next_sale_index, int sale_limit, int sale_price, int marketplace_fee_percentage, int total_supply, cell sale_cache, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(
      begin_cell()
        .store_slice(manager_address)
        .store_slice(marketplace_address)
        .store_uint(sale_opened, 1)
        .store_uint(next_sale_index, 16)
        .store_uint(sale_limit, 16)
        .store_coins(sale_price)
        .store_uint(marketplace_fee_percentage, 7)
        .store_uint(total_supply, 16)
        .store_ref(sale_cache)
      .end_cell()
    )
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}


(int, cell) allocate_index(int remaining, cell cache) {
  randomize_lt();
  int index = rand(remaining);

  int value = 0;
  ;; Pick id
  (slice existing, int found) = cache.udict_get?(32, index);
  if (found) {
    value = existing~load_uint(32);
  } else {
    throw(error::random_logic_error());
  }

  ;; Dict continuity
  (slice tailValue, int foundTail) = cache.udict_get?(32, remaining - 1);
  if (foundTail) {
    cache~udict_set(32, index, tailValue);
  } else {
    throw(error::random_logic_error());
  }
  ;; Cleanup tail
  cache~udict_delete?(32, remaining - 1);

  return (value, cache);
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

(int, int) encode_number_to_text(int number) inline {
  int len = 0;
  int value = 0;
  int mult = 1;
  do {
    (number, int res) = number.divmod(10);
    value = value + (res + 48) * mult;
    mult = mult * 256;
    len = len + 1;
  } until (number == 0);
  return (len, value);
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() mint(slice owner, int item_index, int coins_for_nft_storage, cell nft_item_code) impure {
    (int len, int txt) = encode_number_to_text(item_index);

    var nft_content_uri = begin_cell()
      .store_uint(txt, len * 8)        ;; (number)
      .store_uint(0x2e6a736f6e, 5 * 8) ;; .json
      .end_cell();

    var nft_content = begin_cell()
      .store_slice(owner)
      .store_ref(nft_content_uri)
      .end_cell();

    deploy_nft_item(item_index, nft_item_code, coins_for_nft_storage, nft_content);
}

() send_nft(slice nft, slice to, slice response_destination, int query_id) impure inline {
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_slice(to)  ;; new_owner_address
                .store_slice(response_destination)  ;; response_address
                .store_int(0, 1)  ;; empty custom_payload
                .store_coins(0)   ;; forward amount to new_owner_address
                .store_int(0, 1) ;; empty forward_payload
                .end_cell()
            );

    send_raw_message(msg.end_cell(), 128);
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() send_empty_message(
  slice to_addr,
  int value,
  int mode
) impure inline {
  send_raw_message(
    begin_cell()
      .store_uint(0x10, 6)
      .store_slice(to_addr)
      .store_grams(value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell(),
    mode
  );
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, marketplace_data, content, nft_item_code, royalty_params) = load_data();

    (slice manager_address, slice marketplace_address, int sale_opened, int next_sale_index, int sale_limit, int sale_price, int marketplace_fee_percentage, int total_supply, cell sale_cache) = load_marketplace_data(marketplace_data);

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }    

    if (op == op::deploy_nft()) { ;; batch deploy of new nfts
      throw_unless(error::unauthorized(), equal_slices(owner_address,sender_address));
      int counter = 0;
      int coins_for_nft_storage = in_msg_body~load_coins();
      int nfts_number = in_msg_body~load_uint(16);
      throw_unless(error::invalid_mint_limit(), next_item_index + nfts_number <= total_supply);
      throw_unless(error::invalid_mint_limit(), nfts_number <= 100);
      do {
        var f? = nfts_number > 0;
        if (f?) {
          mint(my_address(), next_item_index, coins_for_nft_storage, nft_item_code);
          next_item_index += 1;
          nfts_number -= 1;
        }
      } until ( ~ f?);
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return ();
    }

    if (op == op::purchase()) {
      throw_unless(error::sale_closed(), sale_opened);
      throw_unless(error::insufficient_funds(), msg_value >= sale_price);
      throw_unless(error::invalid_mint_limit(), next_sale_index < sale_limit);
    
      int marketplace_fee = sale_price * marketplace_fee_percentage / 100;
      int owner_revenue = sale_price - marketplace_fee;
      
      (int index_to_sell, sale_cache) = allocate_index(total_supply - next_sale_index, sale_cache);
      slice nft = get_nft_address_by_index(index_to_sell);

      next_sale_index += 1;

      send_empty_message(marketplace_address, marketplace_fee, 1);
      send_empty_message(owner_address, owner_revenue, 1);
      send_nft(nft, sender_address, sender_address, query_id);

      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return();
    }

    if (op == op::open_public_sale()) {
      throw_unless(error::unauthorized(), equal_slices(sender_address, manager_address));
      sale_opened = 1;
      sale_limit = in_msg_body~load_uint(16);
      throw_unless(error::invalid_mint_limit(), sale_limit <= next_item_index);
      throw_unless(error::invalid_mint_limit(), sale_limit > next_sale_index);
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return();
    }

    if (op == op::stop_sale()) {
      throw_unless(error::unauthorized(), equal_slices(sender_address, manager_address));
      sale_opened = 0;
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return();
    }

    if (op == op::set_price()) {
      throw_unless(error::unauthorized(),  equal_slices(sender_address, manager_address));
      int new_sale_price = in_msg_body~load_coins();
      if (~ equal_slices(sender_address, marketplace_address)) {
        throw_unless(error::invalid_price(), new_sale_price >= sale_price);
      }
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, new_sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return();
    }

    if (op == op::set_manager_address()) {
      throw_unless(error::unauthorized(),  equal_slices(sender_address, manager_address));
      manager_address = in_msg_body~load_msg_addr();
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return();
    }

    if (op == op::set_marketplace()) {
      throw_unless(error::unauthorized(),  equal_slices(sender_address, marketplace_address));
      marketplace_address = in_msg_body~load_msg_addr();
      int new_marketplace_fee_percentage = in_msg_body~load_uint(7);
      throw_unless(error::invalid_price(), new_marketplace_fee_percentage <= marketplace_fee_percentage);
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, new_marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return();
    }
    
    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == op::change_owner()) { ;; change owner
      owner_address = in_msg_body~load_msg_addr();
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return ();
    }

    if (op == op::change_nft_content()) { ;; change nft content
      content = in_msg_body~load_ref();
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return ();
    }

    if (op == op::change_royalty_params()) { ;; change royalty params
      royalty_params = in_msg_body~load_ref();
      save_data(owner_address, next_item_index, manager_address, marketplace_address, sale_opened, next_sale_index, sale_limit, sale_price, marketplace_fee_percentage, total_supply, sale_cache, content, nft_item_code, royalty_params);
      return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, _, content, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, _, royalty) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, _, content, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

cell get_marketplace_data() method_id {
  var (_, _, marketplace_data, _, _, _) = load_data();
  return marketplace_data;
}