#include "imports/stdlib.fc";

const op::transfer_notification = 0x7362d09c;

global slice admin_wallet;
global slice jetton_wallet;
global int jetton_balance;


() save_data() impure {
    set_data(
        begin_cell()
        .store_slice(admin_wallet)
        .store_slice(jetton_wallet)
        .store_coins(jetton_balance)
            .end_cell()
    );
}

() load_data() impure {
    var ds = get_data().begin_parse();

    admin_wallet = ds~load_msg_addr();
    jetton_wallet = ds~load_msg_addr();
    jetton_balance = ds~load_coins();

    ds.end_parse();
}


() withdraw(slice sender_address, slice in_msg_body) impure inline {
    if equal_slices(sender_address, admin_wallet) {
        cell msg_body = begin_cell()
            .store_uint(0xf8a7ea5, 32)
            .store_uint(0, 64)
            .store_coins(jetton_balance)
            .store_slice(sender_address)
            .store_slice(sender_address)
            .store_uint(0, 1)
            .store_coins(1)
            .store_uint(1, 1)
            .store_ref(
                begin_cell()
                    .store_slice(in_msg_body)
                    .end_cell()
            )
            .end_cell();

        builder msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_wallet)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 2 + 128);
        jetton_balance = 0;

        save_data();
    }
}

() recieve_tokens(slice sender_address, slice in_msg_body) impure inline {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    jetton_balance = jetton_balance + jetton_amount;
    slice from_address = in_msg_body~load_msg_addr();

    ifnot (equal_slices(sender_address, jetton_wallet)) {
        if (equal_slices(from_address, admin_wallet)) {
            jetton_wallet = sender_address;
            save_data();
        }
        return ();
    }

    int random_num = rand(100);

    if ((jetton_balance >= jetton_amount * 2) & (random_num >= 50)) {
        cell msg_body = begin_cell()
            .store_uint(0xf8a7ea5, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount * 2)
            .store_slice(from_address)
            .store_slice(from_address)
            .store_uint(0, 1)
            .store_coins(1)
            .store_uint(1, 1)
            .store_ref(
                begin_cell()
                    .store_slice(in_msg_body)
                    .end_cell()
            )
            .end_cell();

        builder msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 64);
        jetton_balance = jetton_balance - (jetton_amount * 2);
    }

    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { return (); } ;; ignore all bounced messages

    load_data();

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    
    if (op == op::transfer_notification) {
        recieve_tokens(sender_address, in_msg_body);
        return ();
    }

    int action = in_msg_body~load_uint(8);
    if(action == "w"u) {
        withdraw(sender_address, in_msg_body);
        return ();
    }

    return ();
}

(int) get_jetton_balance() method_id {
    load_data();
    return jetton_balance;
}

(slice) get_admin_wallet() method_id {
    load_data();
    return admin_wallet;
}

(slice) get_jetton_wallet() method_id {
    load_data();
    return jetton_wallet;
}