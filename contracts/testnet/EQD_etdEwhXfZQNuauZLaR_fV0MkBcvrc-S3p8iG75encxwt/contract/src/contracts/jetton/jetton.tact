import "@stdlib/ownable";
import "./messages.tact";
import "./wallets.tact";
struct JettonData {
  totalSupply: Int;
  mintable: Bool;
  owner: Address;
  content: Cell;
  walletCode: Cell;
}
message TokenUpdateContent {
  content: Cell;
}
@interface("org.ton.jetton.master")
trait Jetton with Ownable {
  totalSupply: Int; // Already set initially
  mintable: Bool;
  owner: Address;
  content: Cell;
  maxSupply: Int?; // This is not in the TEP-74 interface

  receive(msg: TokenUpdateContent){
    self.requireOwner(); // Allow changing content only by owner
    self.content = msg.content; // Update content
  }

  receive(msg: TokenBurnNotification){
    self.requireWallet(msg.owner); // Check wallet
    self.totalSupply = (self.totalSupply - msg.amount); // Update supply

    if (msg.response_destination != null) {
      // Cashback
      send(SendParameters{
          to: msg.response_destination!!,
          value: 0,
          bounce: false,
          mode: (SendRemainingValue + SendIgnoreErrors),
          body: TokenExcesses{queryId: msg.queryId}.toCell()
        }
      );
    }
  }

  // @to The Address receive the Jetton token after minting
  // @amount The amount of Jetton token being minted
  // @response_destination The previous owner address
   fun mint(to: Address, amount: Int, response_destination: Address) {
    require(self.maxSupply == null ||
        (self.totalSupply + amount) <= self.maxSupply!!,
      "The total supply will be overlapping."
    );
    self.totalSupply = (self.totalSupply + amount); // Update total supply

    let winit: StateInit = self.getJettonWalletInit(to); // Create message
    send(SendParameters{
        to: contractAddress(winit),
        value: 0,
        bounce: false,
        mode: SendRemainingValue,
        body: TokenTransferInternal{
          queryId: 0,
          amount: amount,
          from: myAddress(),
          response_destination: response_destination,
          forward_ton_amount: 0,
          forward_payload: emptySlice()
        }.toCell(),
        code: winit.code,
        data: winit.data
      }
    );
  }

   fun requireWallet(owner: Address) {
    let ctx: Context = context();
    let winit: StateInit = self.getJettonWalletInit(owner);
    require(contractAddress(winit) == ctx.sender, "Invalid sender");
  }

  virtual fun getJettonWalletInit(address: Address): StateInit {
    return initOf JettonDefaultWallet(myAddress(), address);
  }

  // ====== Get Methods ====== //

  get fun get_jetton_data(): JettonData {
    let code: Cell = self.getJettonWalletInit(myAddress()).code;
    return
      JettonData{
        totalSupply: self.totalSupply,
        mintable: self.mintable,
        owner: self.owner,
        content: self.content,
        walletCode: code
      };
  }

  get fun get_wallet_address(owner: Address): Address {
    let winit: StateInit = self.getJettonWalletInit(owner);
    return contractAddress(winit);
  }
}