;;
;; Header files for LotteryStartTactContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $JoinInfo$_store
builder $JoinInfo$_store(builder build_0, (slice, int) v) inline;

;; $JoinInfo$_store_cell
cell $JoinInfo$_store_cell((slice, int) v) inline;

;; $JoinInfo$_load
(slice, ((slice, int))) $JoinInfo$_load(slice sc_0) inline;

;; $DrawInfo$_store
builder $DrawInfo$_store(builder build_0, (int) v) inline;

;; $DrawInfo$_store_cell
cell $DrawInfo$_store_cell((int) v) inline;

;; $DrawInfo$_load
(slice, ((int))) $DrawInfo$_load(slice sc_0) inline;

;; $WinnerInfo$_store
builder $WinnerInfo$_store(builder build_0, (slice, int) v) inline;

;; $WinnerInfo$_store_cell
cell $WinnerInfo$_store_cell((slice, int) v) inline;

;; $WinnerInfo$_not_null
((slice, int)) $WinnerInfo$_not_null(tuple v) inline;

;; $WinnerInfo$_store_opt
cell $WinnerInfo$_store_opt(tuple v) inline;

;; $WinnerInfo$_load
(slice, ((slice, int))) $WinnerInfo$_load(slice sc_0) inline;

;; $ClearInfo$_load
(slice, ((int))) $ClearInfo$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $LotteryStartTactContract$_store
builder $LotteryStartTactContract$_store(builder build_0, (slice, int, cell, int) v) inline;

;; $LotteryStartTactContract$_load
(slice, ((slice, int, cell, int))) $LotteryStartTactContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $LotteryStartTactContract$init$_load
(slice, ((slice, int))) $LotteryStartTactContract$init$_load(slice sc_0) inline;

;; $LotteryPlayTactContract$init$_store
builder $LotteryPlayTactContract$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $LotteryStartTactContract$_contract_init
(slice, int, cell, int) $LotteryStartTactContract$_contract_init(slice $owner, int $transno) impure inline_ref;

;; $LotteryStartTactContract$_contract_load
(slice, int, cell, int) $LotteryStartTactContract$_contract_load() impure inline_ref;

;; $LotteryStartTactContract$_contract_store
() $LotteryStartTactContract$_contract_store((slice, int, cell, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $LotteryStartTactContract$_fun_pushWinner
((slice, int, cell, int), ()) $LotteryStartTactContract$_fun_pushWinner((slice, int, cell, int) $self, (slice, int) $winner) impure inline_ref;

;; $LotteryStartTactContract$_fun_clearWinner
((slice, int, cell, int), ()) $LotteryStartTactContract$_fun_clearWinner((slice, int, cell, int) $self, (int) $winner) impure inline_ref;

;; $LotteryStartTactContract$_fun_balance
((slice, int, cell, int), int) $LotteryStartTactContract$_fun_balance((slice, int, cell, int) $self) impure inline_ref;

;; $LotteryStartTactContract$_fun_address
((slice, int, cell, int), slice) $LotteryStartTactContract$_fun_address((slice, int, cell, int) $self) impure inline_ref;

;; $LotteryStartTactContract$_fun_owner
((slice, int, cell, int), slice) $LotteryStartTactContract$_fun_owner((slice, int, cell, int) $self) impure inline_ref;

;; $LotteryStartTactContract$_fun_transno
((slice, int, cell, int), int) $LotteryStartTactContract$_fun_transno((slice, int, cell, int) $self) impure inline_ref;

;; $LotteryStartTactContract$_fun_winnerQuantity
((slice, int, cell, int), int) $LotteryStartTactContract$_fun_winnerQuantity((slice, int, cell, int) $self) impure inline_ref;

;; $LotteryStartTactContract$_fun_winnerList
((slice, int, cell, int), cell) $LotteryStartTactContract$_fun_winnerList((slice, int, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $LotteryStartTactContract$_fun_forward
((slice, int, cell, int), ()) $LotteryStartTactContract$_fun_forward((slice, int, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $LotteryStartTactContract$_fun_reply
((slice, int, cell, int), ()) $LotteryStartTactContract$_fun_reply((slice, int, cell, int) $self, cell $body) impure inline;

;; $LotteryStartTactContract$_fun_notify
((slice, int, cell, int), ()) $LotteryStartTactContract$_fun_notify((slice, int, cell, int) $self, cell $body) impure inline;

;; $LotteryPlayTactContract$_init_child
(cell, cell) $LotteryPlayTactContract$_init_child(cell sys', slice $owner, slice $father, int $seqno) inline_ref;

;; $SendParameters$_constructor_to_body_value_mode_bounce_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode_bounce_code_data(slice to, cell body, int value, int mode, int bounce, cell code, cell data) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
