#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_LuckyWallet.headers.fc";
#include "sample_LuckyWallet.stdlib.fc";
#include "sample_LuckyWallet.constants.fc";
#include "sample_LuckyWallet.storage.fc";

;;
;; Contract LuckyWallet functions
;;

(slice, int, int, slice, cell) $LuckyWallet$_contract_init(slice $collection_address, int $item_index) impure inline_ref {
    var (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content)) = (null(), null(), null(), null(), null());
    throw_unless(33170, ( __tact_slice_eq_bits($collection_address, __tact_context_get_sender()) ));
    $self'collection_address = $collection_address;
    $self'item_index = $item_index;
    tuple $sb = __tact_string_builder_start_string();
    $sb~__tact_string_builder_append(__gen_slice_string_7ca4179185a84c879806ec30a1f5fa692451a7fb8dfcf32a967a2cb475822481());
    $self'individual_content = __tact_string_builder_end($sb);
    $self'is_initialized = false;
    return ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content);
}

((slice, int, int, slice, cell), (int, int, slice, slice, cell)) $LuckyWallet$_fun_get_nft_data((slice, int, int, slice, cell) $self) impure inline_ref {
    var (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content)) = $self;
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content($self'is_initialized, $self'item_index, $self'collection_address, __tact_not_null($self'owner), $self'individual_content));
}

((slice, int, int, slice, cell), int) $LuckyWallet$_fun_lucky((slice, int, int, slice, cell) $self) impure inline_ref {
    var (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content)) = $self;
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), true);
}

;;
;; Receivers of a Contract LuckyWallet
;;

(((slice, int, int, slice, cell)), ()) %$LuckyWallet$_internal_empty((slice, int, int, slice, cell) $self) impure inline {
    var ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content) = $self;
    throw(0);
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), ());
}

((slice, int, int, slice, cell), ()) $LuckyWallet$_internal_any((slice, int, int, slice, cell) $self, slice $msg) impure inline {
    var ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content) = $self;
    throw(0);
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), ());
}

((slice, int, int, slice, cell), ()) $LuckyWallet$_internal_any_text((slice, int, int, slice, cell) $self, slice $str) impure inline {
    var ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content) = $self;
    if (( __tact_slice_eq_bits_nullable_one($self'owner, __tact_context_get_sender()) )) {
        raw_reserve(20000000, 0);
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 128, __gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2()));
    }
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), ());
}

(((slice, int, int, slice, cell)), ()) $LuckyWallet$_internal_binary_LuckySend((slice, int, int, slice, cell) $self, (slice, int, int, cell, cell, cell) $msg) impure inline {
    var ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content) = $self;
    var ($msg'to, $msg'value, $msg'mode, $msg'body, $msg'code, $msg'data) = $msg;
    throw_unless(36287, ( __tact_slice_eq_bits_nullable_one($self'owner, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode_body_code_data($msg'to, $msg'value, $msg'mode, $msg'body, $msg'code, $msg'data));
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), ());
}

(((slice, int, int, slice, cell)), ()) $LuckyWallet$_internal_binary_Transfer((slice, int, int, slice, cell) $self, (int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content) = $self;
    var ($msg'query_id, $msg'new_owner, $msg'response_destination, $msg'custom_payload, $msg'forward_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $msgValue = $ctx'value;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (20000000 - min($tonBalanceBeforeMsg, 20000000));
    $msgValue = ($msgValue - ($storageFee + 20000000));
    if (($self'is_initialized == false)) {
        throw_unless(37345, ( __tact_slice_eq_bits($self'collection_address, $ctx'sender) ));
        $self'is_initialized = true;
        $self'owner = $msg'new_owner;
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_not_null($msg'response_destination), $msgValue, 1, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    } else {
        throw_unless(14534, ( __tact_slice_eq_bits(__tact_not_null($self'owner), $ctx'sender) ));
        $self'owner = $msg'new_owner;
        if (($msg'forward_amount > 0)) {
            $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'new_owner, $msg'forward_amount, 1, true, $OwnershipAssigned$_store_cell($OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload($msg'query_id, $ctx'sender, $msg'forward_payload))));
        }
        $msgValue = ($msgValue - $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)));
        if ((~ null?($msg'response_destination))) {
            $global_send($SendParameters$_constructor_to_value_mode_bounce_body(__tact_not_null($msg'response_destination), ($msgValue - $msg'forward_amount), 1, true, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
        }
    }
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), ());
}

(((slice, int, int, slice, cell)), ()) $LuckyWallet$_internal_binary_GetStaticData((slice, int, int, slice, cell) $self, (int) $msg) impure inline {
    var ($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content) = $self;
    var ($msg'query_id) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, 64, true, $ReportStaticData$_store_cell($ReportStaticData$_constructor_query_id_index_id_collection($msg'query_id, $self'item_index, $self'collection_address))));
    return (($self'collection_address, $self'item_index, $self'is_initialized, $self'owner, $self'individual_content), ());
}

;;
;; Get methods of a Contract LuckyWallet
;;

_ %get_nft_data() method_id(102351) {
    var self = $LuckyWallet$_contract_load();
    var res = self~$LuckyWallet$_fun_get_nft_data();
    return $GetNftData$_to_external(res);
}

_ %lucky() method_id(104082) {
    var self = $LuckyWallet$_contract_load();
    var res = self~$LuckyWallet$_fun_lucky();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRErkGxdyTvSWS2Zu2g3Unf3x1YX6sxJZCZNghNX6QTyM";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract LuckyWallet
;;

((slice, int, int, slice, cell), int) $LuckyWallet$_contract_router_internal((slice, int, int, slice, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$LuckyWallet$_internal_empty();
        return (self, true);
    }
    
    ;; Receive LuckySend message
    if (op == 1911) {
        var msg = in_msg~$LuckySend$_load();
        self~$LuckyWallet$_internal_binary_LuckySend(msg);
        return (self, true);
    }
    
    ;; Receive Transfer message
    if (op == 1607220500) {
        var msg = in_msg~$Transfer$_load();
        self~$LuckyWallet$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive GetStaticData message
    if (op == 801842850) {
        var msg = in_msg~$GetStaticData$_load();
        self~$LuckyWallet$_internal_binary_GetStaticData(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        if (slice_bits(in_msg) >= 32) {
            self~$LuckyWallet$_internal_any_text(in_msg.skip_bits(32));
            return (self, true);
        }
    }
    
    ;; Receiver fallback
    self~$LuckyWallet$_internal_any(in_msg);
    return (self, true);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $LuckyWallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$LuckyWallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $LuckyWallet$_contract_store(self);
}
