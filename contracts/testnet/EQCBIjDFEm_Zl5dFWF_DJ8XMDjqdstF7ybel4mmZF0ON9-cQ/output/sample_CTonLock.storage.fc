;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode(slice to, int value, int bounce, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 query_id:uint64 amount:coins sender:address response_destination:Maybe address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'sender, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'sender);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $TokenTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_sender_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice sender, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, sender, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: SetLocker
;; Header: 0x10df73d6
;; TLB: set_locker#10df73d6 length:uint128 keys:dict<int, int> lockerInfo:dict<int, int> = SetLocker
;;

(slice, ((int, cell, cell))) $SetLocker$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 283079638);
    var v'length = sc_0~load_uint(128);
    var v'keys = sc_0~load_dict();
    var v'lockerInfo = sc_0~load_dict();
    return (sc_0, (v'length, v'keys, v'lockerInfo));
}

;;
;; Type: TokenWithdraw
;; Header: 0xe21f25d5
;; TLB: token_withdraw#e21f25d5 amount:uint256 jettonWalletAddress:address receiver:address = TokenWithdraw
;;

(slice, ((int, slice, slice))) $TokenWithdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3793692117);
    var v'amount = sc_0~load_uint(256);
    var v'jettonWalletAddress = sc_0~__tact_load_address();
    var v'receiver = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'jettonWalletAddress, v'receiver));
}

;;
;; Type: LockerInfo
;; TLB: _ owner:address totalAmountLocked:uint256 totalAmountBalance:uint256 lockerLength:uint256 lockerMap:dict<int, int> = LockerInfo
;;

(slice, int, int, int, cell) $LockerInfo$_to_external(((slice, int, int, int, cell)) v) inline {
    var (v'owner, v'totalAmountLocked, v'totalAmountBalance, v'lockerLength, v'lockerMap) = v; 
    return (v'owner, v'totalAmountLocked, v'totalAmountBalance, v'lockerLength, v'lockerMap);
}

((slice, int, int, int, cell)) $LockerInfo$_constructor_owner_totalAmountLocked_totalAmountBalance_lockerLength_lockerMap(slice owner, int totalAmountLocked, int totalAmountBalance, int lockerLength, cell lockerMap) inline {
    return (owner, totalAmountLocked, totalAmountBalance, lockerLength, lockerMap);
}

;;
;; Type: CTonLock
;;

builder $CTonLock$_store(builder build_0, (slice, int, int, int, cell, cell) v) inline {
    var (v'owner, v'totalAmountLocked, v'totalAmountBalance, v'lockerLength, v'lockerTimeMap, v'lockerMap) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'totalAmountLocked, 256);
    build_0 = build_0.store_uint(v'totalAmountBalance, 256);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'lockerLength, 256);
    build_1 = build_1.store_dict(v'lockerTimeMap);
    build_1 = build_1.store_dict(v'lockerMap);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, int, int, cell, cell))) $CTonLock$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'totalAmountLocked = sc_0~load_uint(256);
    var v'totalAmountBalance = sc_0~load_uint(256);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'lockerLength = sc_1~load_uint(256);
    var v'lockerTimeMap = sc_1~load_dict();
    var v'lockerMap = sc_1~load_dict();
    return (sc_0, (v'owner, v'totalAmountLocked, v'totalAmountBalance, v'lockerLength, v'lockerTimeMap, v'lockerMap));
}

(slice, ((slice, int))) $CTonLock$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'totalAmount = sc_0~load_int(257);
    return (sc_0, (v'owner, v'totalAmount));
}

(slice, int, int, int, cell, cell) $CTonLock$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$CTonLock$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int totalAmount) = $sc~$CTonLock$init$_load();
        $sc.end_parse();
        return $CTonLock$_contract_init(owner, totalAmount);
    }
}

() $CTonLock$_contract_store((slice, int, int, int, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $CTonLock$_store(b, v);
    set_data(b.end_cell());
}