#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "verifier_VftMasterContract.headers.fc";
#include "verifier_VftMasterContract.stdlib.fc";
#include "verifier_VftMasterContract.storage.fc";

;;
;; Contract VftMasterContract functions
;;

(slice, int) $VftMasterContract$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner, $self'statementsCount)) = (null(), 0);
    $self'owner = $owner;
    return ($self'owner, $self'statementsCount);
}

((slice, int), slice) $VftMasterContract$_fun_balance((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'statementsCount)) = $self;
    return (($self'owner, $self'statementsCount), $Int$_fun_toCoinsString(__tact_my_balance()));
}

((slice, int), int) $VftMasterContract$_fun_statementsCount((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'statementsCount)) = $self;
    return (($self'owner, $self'statementsCount), $self'statementsCount);
}

((slice, int), slice) $VftMasterContract$_fun_statementAddress((slice, int) $self, int $idx) impure inline_ref {
    var (($self'owner, $self'statementsCount)) = $self;
    return (($self'owner, $self'statementsCount), $global_contractAddress($VftStatementContract$_init_child(__tact_context_sys, $self'owner, $idx, true)));
}

((slice, int), slice) $VftMasterContract$_fun_owner((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'statementsCount)) = $self;
    return (($self'owner, $self'statementsCount), $self'owner);
}

;;
;; Receivers of a Contract VftMasterContract
;;

(((slice, int)), ()) $VftMasterContract$_internal_binary_NewParentStatement((slice, int) $self, ((slice, slice)) $msg) impure inline {
    var ($self'owner, $self'statementsCount) = $self;
    var (($msg'data'statement, $msg'data'url)) = $msg;
    var ($init'code, $init'data) = $VftStatementContract$_init_child(__tact_context_sys, $self'owner, $self'statementsCount, true);
    $global_send($SendParameters$_constructor_to_body_value_mode_code_data($global_contractAddress(($init'code, $init'data)), $SetStatementData$_store_cell($SetStatementData$_constructor_owner_data(__tact_context_get_sender(), ($msg'data'statement, $msg'data'url))), 10000000, 2, $init'code, $init'data));
    ($self'owner, $self'statementsCount)~$VftMasterContract$_fun_reply($ChildCreated$_store_cell($ChildCreated$_constructor_idx($self'statementsCount)));
    $self'statementsCount = ($self'statementsCount + 1);
    return (($self'owner, $self'statementsCount), ());
}

(((slice, int)), ()) %$VftMasterContract$_internal_empty((slice, int) $self) impure inline {
    var ($self'owner, $self'statementsCount) = $self;
    __tact_nop();
    return (($self'owner, $self'statementsCount), ());
}

((slice, int), ()) $VftMasterContract$_internal_text_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec((slice, int) $self) impure inline {
    var ($self'owner, $self'statementsCount) = $self;
    throw_unless(27921, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000), (64 + 2)));
    return (($self'owner, $self'statementsCount), ());
}

(((slice, int)), ()) $VftMasterContract$_internal_binary_Withdraw((slice, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'statementsCount) = $self;
    var ($msg'amount) = $msg;
    throw_unless(27921, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    int $amount = min($msg'amount, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000));
    throw_unless(54615, ($amount > 0));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $amount, (64 + 2)));
    return (($self'owner, $self'statementsCount), ());
}

(((slice, int)), ()) $VftMasterContract$_internal_binary_Deploy((slice, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'statementsCount) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'statementsCount)~$VftMasterContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'statementsCount), ());
}

;;
;; Get methods of a Contract VftMasterContract
;;

_ %balance() method_id(104128) {
    var self = $VftMasterContract$_contract_load();
    var res = self~$VftMasterContract$_fun_balance();
    return res;
}

_ %statementsCount() method_id(101745) {
    var self = $VftMasterContract$_contract_load();
    var res = self~$VftMasterContract$_fun_statementsCount();
    return res;
}

_ %statementAddress(int $$idx) method_id(94018) {
    int $idx = $$idx;
    var self = $VftMasterContract$_contract_load();
    var res = self~$VftMasterContract$_fun_statementAddress($idx);
    return res;
}

_ %owner() method_id(83229) {
    var self = $VftMasterContract$_contract_load();
    var res = self~$VftMasterContract$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmapu8AyKwV5dNUjmv1iwUgLjLkMm8kVwQaAqJYtAxANqg";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract VftMasterContract
;;

((slice, int), int) $VftMasterContract$_contract_router_internal((slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive NewParentStatement message
    if (op == 3763849665) {
        var msg = in_msg~$NewParentStatement$_load();
        self~$VftMasterContract$_internal_binary_NewParentStatement(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$VftMasterContract$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 195467089) {
        var msg = in_msg~$Withdraw$_load();
        self~$VftMasterContract$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$VftMasterContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdraw safe" message
        if (text_op == 0xbeb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec) {
            self~$VftMasterContract$_internal_text_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $VftMasterContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$VftMasterContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $VftMasterContract$_contract_store(self);
}
