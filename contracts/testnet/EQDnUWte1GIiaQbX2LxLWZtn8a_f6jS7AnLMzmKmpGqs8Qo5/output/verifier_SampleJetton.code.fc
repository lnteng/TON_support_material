#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "verifier_SampleJetton.headers.fc";
#include "verifier_SampleJetton.stdlib.fc";
#include "verifier_SampleJetton.storage.fc";

;;
;; Contract SampleJetton functions
;;

(int, slice, cell, int, int, slice) $SampleJetton$_contract_init(slice $owner, cell $content, int $marketing_fee, slice $marketing_wallet) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = (null(), null(), null(), null(), null(), null());
    $self'total_supply = 0;
    $self'owner = $owner;
    $self'mintable = true;
    $self'content = $content;
    $self'marketing_fee = $marketing_fee;
    $self'marketing_wallet = $marketing_wallet;
    return ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet);
}

((int, slice, cell, int, int, slice), int) $SampleJetton$_fun_get_marketing_fee((int, slice, cell, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), $self'marketing_fee);
}

((int, slice, cell, int, int, slice), slice) $SampleJetton$_fun_get_marketing_wallet((int, slice, cell, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), $self'marketing_wallet);
}

((int, slice, cell, int, int, slice), (cell, cell)) $SampleJetton$_fun_getJettonWalletInit((int, slice, cell, int, int, slice) $self, slice $address) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), $JettonDefaultWallet$_init_child(__tact_context_sys, $address, my_address()));
}

((int, slice, cell, int, int, slice), ()) $SampleJetton$_fun_mint((int, slice, cell, int, int, slice) $self, slice $to, int $amount, slice $response_destination) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    throw_unless(18668, $self'mintable);
    $self'total_supply = ($self'total_supply + $amount);
    var ($winit'code, $winit'data) = ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)~$SampleJetton$_fun_getJettonWalletInit($to);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body_code_data($global_contractAddress(($winit'code, $winit'data)), 0, true, 64, $TokenTransferInternal$_store_cell($TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(0, $amount, my_address(), $response_destination, 0, $Cell$_fun_asSlice(end_cell(begin_cell())))), $winit'code, $winit'data));
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

((int, slice, cell, int, int, slice), ()) $SampleJetton$_fun_requireSenderAsWalletOwner((int, slice, cell, int, int, slice) $self, slice $owner) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    var ($winit'code, $winit'data) = ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)~$SampleJetton$_fun_getJettonWalletInit($owner);
    throw_unless(4429, ( __tact_slice_eq_bits($ctx'sender, $global_contractAddress(($winit'code, $winit'data))) ));
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

((int, slice, cell, int, int, slice), (int, int, slice, cell, cell)) $SampleJetton$_fun_get_jetton_data((int, slice, cell, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code($self'total_supply, $self'mintable, $self'owner, $self'content, $StateInit$_get_code($JettonDefaultWallet$_init_child(__tact_context_sys, $self'owner, my_address()))));
}

((int, slice, cell, int, int, slice), slice) $SampleJetton$_fun_get_wallet_address((int, slice, cell, int, int, slice) $self, slice $owner) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), $global_contractAddress($JettonDefaultWallet$_init_child(__tact_context_sys, $owner, my_address())));
}

((int, slice, cell, int, int, slice), ()) $SampleJetton$_fun_requireOwner((int, slice, cell, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

((int, slice, cell, int, int, slice), slice) $SampleJetton$_fun_owner((int, slice, cell, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)) = $self;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), $self'owner);
}

;;
;; Receivers of a Contract SampleJetton
;;

(((int, slice, cell, int, int, slice)), ()) $SampleJetton$_internal_binary_Mint((int, slice, cell, int, int, slice) $self, (int, slice) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($msg'amount, $msg'receiver) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(14534, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(3688, $self'mintable);
    ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)~$SampleJetton$_fun_mint($msg'receiver, $msg'amount, $self'owner);
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

((int, slice, cell, int, int, slice), ()) $SampleJetton$_internal_text_fcbeb9a480966477480639c7cea4a578aa6a113b2903b26d01bc384663eceef6((int, slice, cell, int, int, slice) $self) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(14534, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(3688, $self'mintable);
    ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)~$SampleJetton$_fun_mint($ctx'sender, 100, $self'owner);
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

(((int, slice, cell, int, int, slice)), ()) $SampleJetton$_internal_binary_UpdateMarketingWallet((int, slice, cell, int, int, slice) $self, (slice) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($msg'marketing_wallet) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(14534, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(52782, (~ null?($msg'marketing_wallet)));
    $self'marketing_wallet = $msg'marketing_wallet;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

(((int, slice, cell, int, int, slice)), ()) $SampleJetton$_internal_binary_UpdateMarketingFee((int, slice, cell, int, int, slice) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($msg'marketing_fee) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(14534, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(27664, ( (($msg'marketing_fee > 0)) ? (($msg'marketing_fee < 21000000000)) : (false) ));
    $self'marketing_fee = $msg'marketing_fee;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

(((int, slice, cell, int, int, slice)), ()) $SampleJetton$_internal_binary_TokenUpdateContent((int, slice, cell, int, int, slice) $self, (cell) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($msg'content) = $msg;
    ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)~$SampleJetton$_fun_requireOwner();
    $self'content = $msg'content;
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

(((int, slice, cell, int, int, slice)), ()) $SampleJetton$_internal_binary_TokenBurnNotification((int, slice, cell, int, int, slice) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination) = $msg;
    ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet)~$SampleJetton$_fun_requireSenderAsWalletOwner(__tact_not_null($msg'response_destination));
    $self'total_supply = ($self'total_supply - $msg'amount);
    if ((~ null?($msg'response_destination))) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body(__tact_not_null($msg'response_destination), 0, false, 64, $TokenExcesses$_store_cell($TokenExcesses$_constructor_query_id($msg'query_id))));
    }
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

(((int, slice, cell, int, int, slice)), ()) $SampleJetton$_internal_binary_ProvideWalletAddress((int, slice, cell, int, int, slice) $self, (int, slice, int) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet) = $self;
    var ($msg'query_id, $msg'owner_address, $msg'include_address) = $msg;
    throw_unless(23951, ($Context$_get_value(__tact_context_get()) >= 6100000));
    var ($init'code, $init'data) = $JettonDefaultWallet$_init_child(__tact_context_sys, $msg'owner_address, my_address());
    if ($msg'include_address) {
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 64, $TakeWalletAddress$_store_cell($TakeWalletAddress$_constructor_query_id_wallet_address_owner_address($msg'query_id, $global_contractAddress(($init'code, $init'data)), $Cell$_fun_asSlice(end_cell(__tact_store_address(__tact_store_bool(begin_cell(), true), $msg'owner_address)))))));
    } else {
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 64, $TakeWalletAddress$_store_cell($TakeWalletAddress$_constructor_query_id_wallet_address_owner_address($msg'query_id, $global_contractAddress(($init'code, $init'data)), $Cell$_fun_asSlice(end_cell(__tact_store_bool(begin_cell(), false)))))));
    }
    return (($self'total_supply, $self'owner, $self'content, $self'mintable, $self'marketing_fee, $self'marketing_wallet), ());
}

;;
;; Get methods of a Contract SampleJetton
;;

_ %get_marketing_fee() method_id(110150) {
    var self = $SampleJetton$_contract_load();
    var res = self~$SampleJetton$_fun_get_marketing_fee();
    return res;
}

_ %get_marketing_wallet() method_id(65636) {
    var self = $SampleJetton$_contract_load();
    var res = self~$SampleJetton$_fun_get_marketing_wallet();
    return res;
}

_ %get_jetton_data() method_id(106029) {
    var self = $SampleJetton$_contract_load();
    var res = self~$SampleJetton$_fun_get_jetton_data();
    return $JettonData$_to_external(res);
}

_ %get_wallet_address(slice $$owner) method_id(103289) {
    slice $owner = __tact_verify_address($$owner);
    var self = $SampleJetton$_contract_load();
    var res = self~$SampleJetton$_fun_get_wallet_address($owner);
    return res;
}

_ %owner() method_id(83229) {
    var self = $SampleJetton$_contract_load();
    var res = self~$SampleJetton$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.jetton.master"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmPdpcmZzQLg7Mvp7JjRhxaF2iu3L8GhR4HRzpNwwzPqrB";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleJetton
;;

((int, slice, cell, int, int, slice), int) $SampleJetton$_contract_router_internal((int, slice, cell, int, int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Mint message
    if (op == 4235234258) {
        var msg = in_msg~$Mint$_load();
        self~$SampleJetton$_internal_binary_Mint(msg);
        return (self, true);
    }
    
    ;; Receive UpdateMarketingWallet message
    if (op == 2928423358) {
        var msg = in_msg~$UpdateMarketingWallet$_load();
        self~$SampleJetton$_internal_binary_UpdateMarketingWallet(msg);
        return (self, true);
    }
    
    ;; Receive UpdateMarketingFee message
    if (op == 2925949378) {
        var msg = in_msg~$UpdateMarketingFee$_load();
        self~$SampleJetton$_internal_binary_UpdateMarketingFee(msg);
        return (self, true);
    }
    
    ;; Receive TokenUpdateContent message
    if (op == 2937889386) {
        var msg = in_msg~$TokenUpdateContent$_load();
        self~$SampleJetton$_internal_binary_TokenUpdateContent(msg);
        return (self, true);
    }
    
    ;; Receive TokenBurnNotification message
    if (op == 2078119902) {
        var msg = in_msg~$TokenBurnNotification$_load();
        self~$SampleJetton$_internal_binary_TokenBurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive ProvideWalletAddress message
    if (op == 745978227) {
        var msg = in_msg~$ProvideWalletAddress$_load();
        self~$SampleJetton$_internal_binary_ProvideWalletAddress(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Mint: 100" message
        if (text_op == 0xfcbeb9a480966477480639c7cea4a578aa6a113b2903b26d01bc384663eceef6) {
            self~$SampleJetton$_internal_text_fcbeb9a480966477480639c7cea4a578aa6a113b2903b26d01bc384663eceef6();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleJetton$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleJetton$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleJetton$_contract_store(self);
}
