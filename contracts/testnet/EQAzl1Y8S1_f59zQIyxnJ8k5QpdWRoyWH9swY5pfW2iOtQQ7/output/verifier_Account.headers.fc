;;
;; Header files for Account
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (int, slice, slice, cell, int, slice) v) inline_ref;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((int, slice, slice, cell, int, slice) v) inline;

;; $Issue$_store
builder $Issue$_store(builder build_0, (int, int) v) inline;

;; $Issue$_store_cell
cell $Issue$_store_cell((int, int) v) inline;

;; $Dispose$_store
builder $Dispose$_store(builder build_0, (slice) v) inline;

;; $Dispose$_store_cell
cell $Dispose$_store_cell((slice) v) inline;

;; $Deposit$_load
(slice, ((int))) $Deposit$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $AccountIssue$_store
builder $AccountIssue$_store(builder build_0, (int, int, int, slice, slice) v) inline;

;; $AccountIssue$_store_cell
cell $AccountIssue$_store_cell((int, int, int, slice, slice) v) inline;

;; $AccountIssue$_load
(slice, ((int, int, int, slice, slice))) $AccountIssue$_load(slice sc_0) inline;

;; $AccountDispose$_load
(slice, ((slice))) $AccountDispose$_load(slice sc_0) inline;

;; $AccountProportion$_load
(slice, ((int))) $AccountProportion$_load(slice sc_0) inline;

;; $BankIssueCredit$_load
(slice, ((int, slice, int))) $BankIssueCredit$_load(slice sc_0) inline;

;; $GetNft$_load
(slice, ((slice, int, slice))) $GetNft$_load(slice sc_0) inline;

;; $Destroy$_load
(slice, (tuple)) $Destroy$_load(slice sc_0) inline;

;; $Account$_store
builder $Account$_store(builder build_0, (slice, slice, int) v) inline;

;; $Account$_load
(slice, ((slice, slice, int))) $Account$_load(slice sc_0) inline;

;; $Account$init$_load
(slice, ((slice, slice))) $Account$init$_load(slice sc_0) inline;

;; $Account$_contract_init
(slice, slice, int) $Account$_contract_init(slice $owner, slice $bank) impure inline_ref;

;; $Account$_contract_load
(slice, slice, int) $Account$_contract_load() impure inline_ref;

;; $Account$_contract_store
() $Account$_contract_store((slice, slice, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Account$_fun_owner
((slice, slice, int), slice) $Account$_fun_owner((slice, slice, int) $self) impure inline_ref;

;; $Account$_fun_bank
((slice, slice, int), slice) $Account$_fun_bank((slice, slice, int) $self) impure inline_ref;

;; $Account$_fun_balance
((slice, slice, int), int) $Account$_fun_balance((slice, slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload
((int, slice, slice, cell, int, slice)) $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload(int queryId, slice newOwner, slice responseDestination, cell customPayload, int forwardAmount, slice forwardPayload) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline;

;; $Issue$_constructor_premium_proportion
((int, int)) $Issue$_constructor_premium_proportion(int premium, int proportion) inline;

;; $Dispose$_constructor_owner
((slice)) $Dispose$_constructor_owner(slice owner) inline;
