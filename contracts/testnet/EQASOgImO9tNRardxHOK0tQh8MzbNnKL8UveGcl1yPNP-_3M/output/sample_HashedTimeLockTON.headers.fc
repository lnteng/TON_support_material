;;
;; Header files for HashedTimeLockTON
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $HTLC$_load
(slice, ((int, int, int, int, slice, slice, int, int))) $HTLC$_load(slice sc_0) inline_ref;

;; $HTLC$_as_optional
tuple $HTLC$_as_optional((int, int, int, int, slice, slice, int, int) v) inline;

;; $HTLC$_load_opt
tuple $HTLC$_load_opt(cell cl) inline;

;; $TonTransferInitiated$_load
(slice, ((int, int, int, int, slice, slice, slice))) $TonTransferInitiated$_load(slice sc_0) inline_ref;

;; $Create$_load
(slice, (((int, int, int, int, slice, slice, slice)))) $Create$_load(slice sc_0) inline;

;; $TonTransferClaimed$_load
(slice, ((int, slice, int))) $TonTransferClaimed$_load(slice sc_0) inline;

;; $Redeem$_load
(slice, (((int, slice, int)))) $Redeem$_load(slice sc_0) inline;

;; $TonTransferRefunded$_load
(slice, ((int, slice, int))) $TonTransferRefunded$_load(slice sc_0) inline;

;; $Refund$_load
(slice, (((int, slice, int)))) $Refund$_load(slice sc_0) inline;

;; $HashedTimeLockTON$_store
builder $HashedTimeLockTON$_store(builder build_0, (cell) v) inline;

;; $HashedTimeLockTON$_load
(slice, ((cell))) $HashedTimeLockTON$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $HTLC$_not_null
((int, int, int, int, slice, slice, int, int)) $HTLC$_not_null(tuple v) inline;

;; $HTLC$_to_tuple
tuple $HTLC$_to_tuple(((int, int, int, int, slice, slice, int, int)) v) inline;

;; $HTLC$_to_opt_tuple
tuple $HTLC$_to_opt_tuple(tuple v) inline;

;; $HTLC$_to_opt_external
tuple $HTLC$_to_opt_external(tuple v) inline;

;; $HashedTimeLockTON$_contract_init
(cell) $HashedTimeLockTON$_contract_init() impure inline_ref;

;; $HashedTimeLockTON$_contract_load
(cell) $HashedTimeLockTON$_contract_load() impure inline_ref;

;; $HashedTimeLockTON$_contract_store
() $HashedTimeLockTON$_contract_store((cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $HashedTimeLockTON$_fun_contractExists
((cell), int) $HashedTimeLockTON$_fun_contractExists((cell) $self, int $hashlock) impure inline_ref;

;; $HTLC$_constructor_hashlock_secret_amount_timelock_sender__receiver_redeemed_refunded
((int, int, int, int, slice, slice, int, int)) $HTLC$_constructor_hashlock_secret_amount_timelock_sender__receiver_redeemed_refunded(int hashlock, int secret, int amount, int timelock, slice sender, slice _receiver, int redeemed, int refunded) inline;

;; $HashedTimeLockTON$_fun_getHTLCDetails
((cell), tuple) $HashedTimeLockTON$_fun_getHTLCDetails((cell) $self, int $hashlock) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $HashedTimeLockTON$_fun_forward
((cell), ()) $HashedTimeLockTON$_fun_forward((cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $HashedTimeLockTON$_fun_notify
((cell), ()) $HashedTimeLockTON$_fun_notify((cell) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
