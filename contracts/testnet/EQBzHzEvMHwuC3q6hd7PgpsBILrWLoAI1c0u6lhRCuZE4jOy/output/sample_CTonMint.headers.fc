;;
;; Header files for CTonMint
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $TokenWithdraw$_load
(slice, ((int, slice, slice))) $TokenWithdraw$_load(slice sc_0) inline;

;; $WhiteListMint$_store
builder $WhiteListMint$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $WhiteListMint$_store_cell
cell $WhiteListMint$_store_cell((int, int, slice, slice) v) inline;

;; $WhiteListMint$_load
(slice, ((int, int, slice, slice))) $WhiteListMint$_load(slice sc_0) inline;

;; $WhiteListMintMessage$_load
(slice, ((slice, (int, int, slice, slice)))) $WhiteListMintMessage$_load(slice sc_0) inline;

;; $PublicMintMessage$_load
(slice, ((int, slice, slice))) $PublicMintMessage$_load(slice sc_0) inline;

;; $UpdateWlSignKey$_load
(slice, ((int))) $UpdateWlSignKey$_load(slice sc_0) inline;

;; $CTonMint$_store
builder $CTonMint$_store(builder build_0, (int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) v) inline;

;; $CTonMint$_load
(slice, ((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int))) $CTonMint$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $MintInfo$_to_external
(slice, int, int, int, int, int, int, int, int, int) $MintInfo$_to_external(((slice, int, int, int, int, int, int, int, int, int)) v) inline;

;; $CTonMint$init$_load
(slice, ((slice, int))) $CTonMint$init$_load(slice sc_0) inline;

;; $CTonMint$_contract_init
(int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $CTonMint$_contract_init(slice $owner, int $wlSignKey) impure inline_ref;

;; $CTonMint$_contract_load
(int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $CTonMint$_contract_load() impure inline_ref;

;; $CTonMint$_contract_store
() $CTonMint$_contract_store((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $CTonMint$_fun_msgValue
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), int) $CTonMint$_fun_msgValue((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $msgValue) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $TokenTransfer$_constructor_query_id_amount_sender_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_sender_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice sender, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;

;; $CTonMint$_fun_mintToken
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $CTonMint$_fun_mintToken((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $jettonWalletAddress, slice $to, int $amount) impure inline_ref;

;; $MintInfo$_constructor_owner_wlSignKey_totalWlMintAmount_totalPublicMintAmount_totalMintAmount_wlMintMinAmount_wlMintMaxAmount_publicMintMinAmount_wlMintTonPrice_publicMintTonPrice
((slice, int, int, int, int, int, int, int, int, int)) $MintInfo$_constructor_owner_wlSignKey_totalWlMintAmount_totalPublicMintAmount_totalMintAmount_wlMintMinAmount_wlMintMaxAmount_publicMintMinAmount_wlMintTonPrice_publicMintTonPrice(slice owner, int wlSignKey, int totalWlMintAmount, int totalPublicMintAmount, int totalMintAmount, int wlMintMinAmount, int wlMintMaxAmount, int publicMintMinAmount, int wlMintTonPrice, int publicMintTonPrice) inline;

;; $CTonMint$_fun_mintInfo
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), (slice, int, int, int, int, int, int, int, int, int)) $CTonMint$_fun_mintInfo((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $CTonMint$_fun_whitelistAmountByAddress
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), int) $CTonMint$_fun_whitelistAmountByAddress((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $userAddr) impure inline_ref;

;; $CTonMint$_fun_publicAmountByAddress
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), int) $CTonMint$_fun_publicAmountByAddress((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $userAddr) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $CTonMint$_fun_forward
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $CTonMint$_fun_forward((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $CTonMint$_fun_notify
((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $CTonMint$_fun_notify((int, int, slice, int, cell, cell, cell, int, int, int, int, int, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode(slice to, int value, int bounce, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
