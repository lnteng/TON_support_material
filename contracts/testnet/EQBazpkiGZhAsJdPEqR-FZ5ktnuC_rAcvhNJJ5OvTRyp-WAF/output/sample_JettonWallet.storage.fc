;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body_mode(slice to, int value, int bounce, cell body, int mode) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: JettonWalletData
;; TLB: _ balance:int257 owner:address jetton:address jetton_wallet_code:^cell = JettonWalletData
;;

(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline {
    var (v'balance, v'owner, v'jetton, v'jetton_wallet_code) = v; 
    return (v'balance, v'owner, v'jetton, v'jetton_wallet_code);
}

((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_jetton_jetton_wallet_code(int balance, slice owner, slice jetton, cell jetton_wallet_code) inline {
    return (balance, owner, jetton, jetton_wallet_code);
}

;;
;; Type: TokenBurn
;; Header: 0x595f07bc
;; TLB: token_burn#595f07bc query_id:uint64 amount:coins owner:address response_destination:address = TokenBurn
;;

(slice, ((int, int, slice, slice))) $TokenBurn$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1499400124);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'amount, v'owner, v'response_destination));
}

;;
;; Type: TokenBurnNotification
;; Header: 0x7bdd97de
;; TLB: token_burn_notification#7bdd97de query_id:uint64 amount:coins owner:address response_destination:Maybe address = TokenBurnNotification
;;

builder $TokenBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'query_id, v'amount, v'owner, v'response_destination) = v;
    build_0 = store_uint(build_0, 2078119902, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    return build_0;
}

cell $TokenBurnNotification$_store_cell((int, int, slice, slice) v) inline {
    return $TokenBurnNotification$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $TokenBurnNotification$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2078119902);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'query_id, v'amount));
}

((int, int, slice, slice)) $TokenBurnNotification$_constructor_query_id_amount_owner_response_destination(int query_id, int amount, slice owner, slice response_destination) inline {
    return (query_id, amount, owner, response_destination);
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

(slice, ((int, int, slice, slice, cell, int, slice))) $TokenTransfer$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 260734629);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'destination = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    var v'custom_payload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'forward_ton_amount = sc_0~load_coins();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload));
}

;;
;; Type: TokenTransferInternal
;; Header: 0x178d4519
;; TLB: token_transfer_internal#178d4519 query_id:uint64 amount:coins from:address response_destination:address forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransferInternal
;;

builder $TokenTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_destination, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $TokenTransferInternal$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, slice, int, slice))) $TokenTransferInternal$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 395134233);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'from = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    var v'forward_ton_amount = sc_0~load_coins();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'from, v'response_destination, v'forward_ton_amount, v'forward_payload));
}

(slice, ((int, int))) $TokenTransferInternal$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 395134233);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'query_id, v'amount));
}

((int, int, slice, slice, int, slice)) $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int query_id, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, from, response_destination, forward_ton_amount, forward_payload);
}

;;
;; Type: TokenNotification
;; Header: 0x7362d09c
;; TLB: token_notification#7362d09c query_id:uint64 amount:coins from:address forward_payload:remainder<slice> = TokenNotification
;;

builder $TokenNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'query_id, v'amount, v'from, v'forward_payload) = v;
    build_0 = store_uint(build_0, 1935855772, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenNotification$_store_cell((int, int, slice, slice) v) inline {
    return $TokenNotification$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice)) $TokenNotification$_constructor_query_id_amount_from_forward_payload(int query_id, int amount, slice from, slice forward_payload) inline {
    return (query_id, amount, from, forward_payload);
}

;;
;; Type: TokenExcesses
;; Header: 0xd53276db
;; TLB: token_excesses#d53276db query_id:uint64 = TokenExcesses
;;

builder $TokenExcesses$_store(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell $TokenExcesses$_store_cell((int) v) inline {
    return $TokenExcesses$_store(begin_cell(), v).end_cell();
}

((int)) $TokenExcesses$_constructor_query_id(int query_id) inline {
    return (query_id);
}

;;
;; Type: JettonWallet
;;

builder $JettonWallet$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'master, v'owner, v'balance) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'balance, 257);
    return build_0;
}

(slice, ((slice, slice, int))) $JettonWallet$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'owner = sc_0~__tact_load_address();
    var v'balance = sc_0~load_int(257);
    return (sc_0, (v'master, v'owner, v'balance));
}

builder $JettonWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'master, v'owner) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(slice, ((slice, slice))) $JettonWallet$init$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'master, v'owner));
}

(slice, slice, int) $JettonWallet$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JettonWallet$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice master, slice owner) = $sc~$JettonWallet$init$_load();
        $sc.end_parse();
        return $JettonWallet$_contract_init(master, owner);
    }
}

() $JettonWallet$_contract_store((slice, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $JettonWallet$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $JettonWallet$_init_child(cell sys', slice $master, slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: JettonWallet
    cell mine = __tact_dict_get_code(source, 3765);
    contracts = __tact_dict_set_code(contracts, 3765, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $JettonWallet$init$_store(b, ($master, $owner));
    return (mine, b.end_cell());
}