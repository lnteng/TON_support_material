#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "verifier_TokenDistributionChild.headers.fc";
#include "verifier_TokenDistributionChild.stdlib.fc";
#include "verifier_TokenDistributionChild.storage.fc";

;;
;; Contract TokenDistributionChild functions
;;

(slice, slice, int, int, int, int) $TokenDistributionChild$_contract_init(slice $parentAddress, slice $owner, int $amount, int $interval, int $seqno) impure inline_ref {
    var (($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno)) = (null(), null(), null(), null(), null(), null());
    $self'parentContract = $parentAddress;
    $self'owner = $owner;
    $self'claimAmount = $amount;
    $self'claimInterval = $interval;
    $self'lastClaimTime = 0;
    $self'seqno = $seqno;
    return ($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno);
}

((slice, slice, int, int, int, int), int) $TokenDistributionChild$_fun_lastClaim((slice, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno)) = $self;
    return (($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno), $self'lastClaimTime);
}

((slice, slice, int, int, int, int), slice) $TokenDistributionChild$_fun_owner((slice, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno)) = $self;
    return (($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno), $self'owner);
}

;;
;; Receivers of a Contract TokenDistributionChild
;;

((slice, slice, int, int, int, int), ()) $TokenDistributionChild$_internal_text_535d44514554aee036c09a39063fe878ca30a50cb9b5f8f6f1ec24f13e3169e9((slice, slice, int, int, int, int) $self) impure inline {
    var ($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno) = $self;
    throw_unless(49469, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    int $currentTime = now();
    throw_unless(50302, (($currentTime - $self'lastClaimTime) >= $self'claimInterval));
    $global_send($SendParameters$_constructor_to_body_value_mode($self'parentContract, $TokenClaimRequest$_store_cell($TokenClaimRequest$_constructor_user_seqno($self'owner, $self'seqno)), 0, 64));
    $self'lastClaimTime = $currentTime;
    return (($self'owner, $self'parentContract, $self'claimAmount, $self'claimInterval, $self'lastClaimTime, $self'seqno), ());
}

;;
;; Get methods of a Contract TokenDistributionChild
;;

_ %lastClaim() method_id(119096) {
    var self = $TokenDistributionChild$_contract_load();
    var res = self~$TokenDistributionChild$_fun_lastClaim();
    return res;
}

_ %owner() method_id(83229) {
    var self = $TokenDistributionChild$_contract_load();
    var res = self~$TokenDistributionChild$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmT2eXSknBbhMHusTJMTZZL4m7meRbfGz5NUcojpciJWjg";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TokenDistributionChild
;;

((slice, slice, int, int, int, int), int) $TokenDistributionChild$_contract_router_internal((slice, slice, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "claim" message
        if (text_op == 0x535d44514554aee036c09a39063fe878ca30a50cb9b5f8f6f1ec24f13e3169e9) {
            self~$TokenDistributionChild$_internal_text_535d44514554aee036c09a39063fe878ca30a50cb9b5f8f6f1ec24f13e3169e9();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TokenDistributionChild$_contract_load();
    
    ;; Handle operation
    int handled = self~$TokenDistributionChild$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TokenDistributionChild$_contract_store(self);
}
