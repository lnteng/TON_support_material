;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value(slice to, int bounce, int value) inline {
    return (bounce, to, value, 0, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice to, cell body, int value, int mode) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice to, int value, int mode, cell code, cell data, cell body) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: NewParticipantEvent
;; Header: 0x37925619
;; TLB: new_participant_event#37925619 address:address votes:int257 unfreezeTime:int257 = NewParticipantEvent
;;

builder $NewParticipantEvent$_store(builder build_0, (slice, int, int) v) inline {
    var (v'address, v'votes, v'unfreezeTime) = v;
    build_0 = store_uint(build_0, 932337177, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_int(v'votes, 257);
    build_0 = build_0.store_int(v'unfreezeTime, 257);
    return build_0;
}

cell $NewParticipantEvent$_store_cell((slice, int, int) v) inline {
    return $NewParticipantEvent$_store(begin_cell(), v).end_cell();
}

((slice, int, int)) $NewParticipantEvent$_constructor_address_votes_unfreezeTime(slice address, int votes, int unfreezeTime) inline {
    return (address, votes, unfreezeTime);
}

;;
;; Type: ParticipantQuitEvent
;; Header: 0x3a11f26e
;; TLB: participant_quit_event#3a11f26e address:address votes:int257 unfreezeTime:int257 = ParticipantQuitEvent
;;

builder $ParticipantQuitEvent$_store(builder build_0, (slice, int, int) v) inline {
    var (v'address, v'votes, v'unfreezeTime) = v;
    build_0 = store_uint(build_0, 974254702, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_int(v'votes, 257);
    build_0 = build_0.store_int(v'unfreezeTime, 257);
    return build_0;
}

cell $ParticipantQuitEvent$_store_cell((slice, int, int) v) inline {
    return $ParticipantQuitEvent$_store(begin_cell(), v).end_cell();
}

((slice, int, int)) $ParticipantQuitEvent$_constructor_address_votes_unfreezeTime(slice address, int votes, int unfreezeTime) inline {
    return (address, votes, unfreezeTime);
}

;;
;; Type: OpenRound
;; Header: 0x2c7b2804
;; TLB: open_round#2c7b2804 round:int257 = OpenRound
;;

(slice, ((int))) $OpenRound$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 746268676);
    var v'round = sc_0~load_int(257);
    return (sc_0, (v'round));
}

;;
;; Type: Vote
;; Header: 0xc6d5d522
;; TLB: vote#c6d5d522 round:int257 payload:^string = Vote
;;

(slice, ((int, slice))) $Vote$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3335902498);
    var v'round = sc_0~load_int(257);
    var v'payload = sc_0~load_ref().begin_parse();
    return (sc_0, (v'round, v'payload));
}

;;
;; Type: FinalizeRound
;; Header: 0x89436476
;; TLB: finalize_round#89436476 round:int257 = FinalizeRound
;;

(slice, ((int))) $FinalizeRound$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2302895222);
    var v'round = sc_0~load_int(257);
    return (sc_0, (v'round));
}

;;
;; Type: InternalRoundOpened
;; Header: 0x887e5ca3
;; TLB: internal_round_opened#887e5ca3 round:int257 = InternalRoundOpened
;;

(slice, ((int))) $InternalRoundOpened$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2289982627);
    var v'round = sc_0~load_int(257);
    return (sc_0, (v'round));
}

;;
;; Type: InternalVote
;; Header: 0x77bab779
;; TLB: internal_vote#77bab779 round:int257 payload:^string participant:address guard:bool votes:coins = InternalVote
;;

builder $InternalVote$_store(builder build_0, (int, slice, slice, int, int) v) inline {
    var (v'round, v'payload, v'participant, v'guard, v'votes) = v;
    build_0 = store_uint(build_0, 2008725369, 32);
    build_0 = build_0.store_int(v'round, 257);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'payload).end_cell());
    build_0 = __tact_store_address(build_0, v'participant);
    build_0 = build_0.store_int(v'guard, 1);
    build_0 = build_0.store_coins(v'votes);
    return build_0;
}

cell $InternalVote$_store_cell((int, slice, slice, int, int) v) inline {
    return $InternalVote$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, int, int)) $InternalVote$_constructor_round_payload_participant_guard_votes(int round, slice payload, slice participant, int guard, int votes) inline {
    return (round, payload, participant, guard, votes);
}

;;
;; Type: InternalFinalize
;; Header: 0xf5d995b6
;; TLB: internal_finalize#f5d995b6 minVotes:int257 = InternalFinalize
;;

builder $InternalFinalize$_store(builder build_0, (int) v) inline {
    var (v'minVotes) = v;
    build_0 = store_uint(build_0, 4124677558, 32);
    build_0 = build_0.store_int(v'minVotes, 257);
    return build_0;
}

cell $InternalFinalize$_store_cell((int) v) inline {
    return $InternalFinalize$_store(begin_cell(), v).end_cell();
}

((int)) $InternalFinalize$_constructor_minVotes(int minVotes) inline {
    return (minVotes);
}

;;
;; Type: InternalFinalized
;; Header: 0xa6f19e23
;; TLB: internal_finalized#a6f19e23 round:int257 winnerPayload:Maybe ^string winnerVotes:Maybe int257 winnerGuarded:bool goodParticipants:dict<int, address> goodParticipantsCount:int257 goodParticipantsVotes:dict<address, int> badParticipants:dict<int, address> badParticipantsCount:int257 badParticipantsVotes:dict<address, int> = InternalFinalized
;;

(slice, ((int, slice, int, int, cell, int, cell, cell, int, cell))) $InternalFinalized$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2800852515);
    var v'round = sc_0~load_int(257);
    var v'winnerPayload = sc_0~load_int(1) ? sc_0~load_ref().begin_parse() : null();
    var v'winnerVotes = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'winnerGuarded = sc_0~load_int(1);
    var v'goodParticipants = sc_0~load_dict();
    var v'goodParticipantsCount = sc_0~load_int(257);
    var v'goodParticipantsVotes = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'badParticipants = sc_1~load_dict();
    var v'badParticipantsCount = sc_1~load_int(257);
    var v'badParticipantsVotes = sc_1~load_dict();
    return (sc_0, (v'round, v'winnerPayload, v'winnerVotes, v'winnerGuarded, v'goodParticipants, v'goodParticipantsCount, v'goodParticipantsVotes, v'badParticipants, v'badParticipantsCount, v'badParticipantsVotes));
}

;;
;; Type: PromoteToGuard
;; Header: 0x473919df
;; TLB: promote_to_guard#473919df address:address = PromoteToGuard
;;

(slice, ((slice))) $PromoteToGuard$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1194924511);
    var v'address = sc_0~__tact_load_address();
    return (sc_0, (v'address));
}

;;
;; Type: RevokeGuard
;; Header: 0x93c4ed56
;; TLB: revoke_guard#93c4ed56 address:address = RevokeGuard
;;

(slice, ((slice))) $RevokeGuard$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2479156566);
    var v'address = sc_0~__tact_load_address();
    return (sc_0, (v'address));
}

;;
;; Type: SetRoundReward
;; Header: 0x510433f4
;; TLB: set_round_reward#510433f4 amount:coins = SetRoundReward
;;

(slice, ((int))) $SetRoundReward$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1359229940);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: VotingRound
;;

builder $VotingRound$init$_store(builder build_0, (slice, int) v) inline {
    var (v'parent, v'round) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_int(v'round, 257);
    return build_0;
}

(cell, cell) $VotingRound$_init_child(cell sys', slice $parent, int $round) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: VotingRound
    cell mine = __tact_dict_get_code(source, 58246);
    contracts = __tact_dict_set_code(contracts, 58246, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $VotingRound$init$_store(b, ($parent, $round));
    return (mine, b.end_cell());
}

;;
;; Type: WitnessConsensus
;;

builder $WitnessConsensus$_store(builder build_0, (slice, int, int, int, int, int, int, cell, cell, cell, cell, int, int, int, int) v) inline {
    var (v'owner, v'stopped, v'genesisTimestamp, v'roundPeriod, v'minStake, v'stakeFreezeTime, v'minVotesForQuorum, v'participants, v'pendingRewards, v'guards, v'unfreeze, v'openedRound, v'rewardsBudget, v'roundReward, v'version) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'stopped, 1);
    build_0 = build_0.store_int(v'genesisTimestamp, 257);
    build_0 = build_0.store_int(v'roundPeriod, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'minStake, 257);
    build_1 = build_1.store_int(v'stakeFreezeTime, 257);
    build_1 = build_1.store_int(v'minVotesForQuorum, 257);
    build_1 = build_1.store_dict(v'participants);
    build_1 = build_1.store_dict(v'pendingRewards);
    build_1 = build_1.store_dict(v'guards);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'unfreeze);
    build_2 = build_2.store_int(v'openedRound, 257);
    build_2 = build_2.store_coins(v'rewardsBudget);
    build_2 = build_2.store_coins(v'roundReward);
    build_2 = build_2.store_int(v'version, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, int, int, int, int, int, cell, cell, cell, cell, int, int, int, int))) $WitnessConsensus$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'stopped = sc_0~load_int(1);
    var v'genesisTimestamp = sc_0~load_int(257);
    var v'roundPeriod = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'minStake = sc_1~load_int(257);
    var v'stakeFreezeTime = sc_1~load_int(257);
    var v'minVotesForQuorum = sc_1~load_int(257);
    var v'participants = sc_1~load_dict();
    var v'pendingRewards = sc_1~load_dict();
    var v'guards = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'unfreeze = sc_2~load_dict();
    var v'openedRound = sc_2~load_int(257);
    var v'rewardsBudget = sc_2~load_coins();
    var v'roundReward = sc_2~load_coins();
    var v'version = sc_2~load_int(257);
    return (sc_0, (v'owner, v'stopped, v'genesisTimestamp, v'roundPeriod, v'minStake, v'stakeFreezeTime, v'minVotesForQuorum, v'participants, v'pendingRewards, v'guards, v'unfreeze, v'openedRound, v'rewardsBudget, v'roundReward, v'version));
}

(slice, ((slice))) $WitnessConsensus$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, int, int, int, int, int, int, cell, cell, cell, cell, int, int, int, int) $WitnessConsensus$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$WitnessConsensus$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$WitnessConsensus$init$_load();
        $sc.end_parse();
        return $WitnessConsensus$_contract_init(owner);
    }
}

() $WitnessConsensus$_contract_store((slice, int, int, int, int, int, int, cell, cell, cell, cell, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $WitnessConsensus$_store(b, v);
    set_data(b.end_cell());
}