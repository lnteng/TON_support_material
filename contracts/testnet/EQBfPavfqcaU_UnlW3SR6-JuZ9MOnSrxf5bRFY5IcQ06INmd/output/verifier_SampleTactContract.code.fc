#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "verifier_SampleTactContract.headers.fc";
#include "verifier_SampleTactContract.stdlib.fc";
#include "verifier_SampleTactContract.constants.fc";
#include "verifier_SampleTactContract.storage.fc";

;;
;; Contract SampleTactContract functions
;;

(int, int, slice, slice) $SampleTactContract$_contract_init(int $seed) impure inline_ref {
    var (($self'seed, $self'time, $self'owner, $self'nftAddress)) = (null(), null(), null(), null());
    $self'seed = $seed;
    $self'time = 0;
    return ($self'seed, $self'time, $self'owner, $self'nftAddress);
}

((int, int, slice, slice), int) $SampleTactContract$_fun_time((int, int, slice, slice) $self) impure inline_ref {
    var (($self'seed, $self'time, $self'owner, $self'nftAddress)) = $self;
    return (($self'seed, $self'time, $self'owner, $self'nftAddress), max(0, ($self'time - now())));
}

((int, int, slice, slice), slice) $SampleTactContract$_fun_nft((int, int, slice, slice) $self) impure inline_ref {
    var (($self'seed, $self'time, $self'owner, $self'nftAddress)) = $self;
    return (($self'seed, $self'time, $self'owner, $self'nftAddress), $self'nftAddress);
}

((int, int, slice, slice), slice) $SampleTactContract$_fun_owner((int, int, slice, slice) $self) impure inline_ref {
    var (($self'seed, $self'time, $self'owner, $self'nftAddress)) = $self;
    return (($self'seed, $self'time, $self'owner, $self'nftAddress), $self'owner);
}

;;
;; Receivers of a Contract SampleTactContract
;;

(((int, int, slice, slice)), ()) $SampleTactContract$_internal_binary_OwnershipAssigned((int, int, slice, slice) $self, (int, slice, slice) $msg) impure inline {
    var ($self'seed, $self'time, $self'owner, $self'nftAddress) = $self;
    var ($msg'queryId, $msg'prevOwner, $msg'forwardPayload) = $msg;
    if (null?($self'owner)) {
        $self'owner = $msg'prevOwner;
        $self'nftAddress = __tact_context_get_sender();
        $self'time = (now() + $msg'forwardPayload~load_uint(32));
    } else {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body(__tact_context_get_sender(), 100000000, 0, false, $Transfer$_store_cell($Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload(0, $msg'prevOwner, my_address(), $global_emptyCell(), 50000000, $global_emptySlice()))));
    }
    return (($self'seed, $self'time, $self'owner, $self'nftAddress), ());
}

(((int, int, slice, slice)), ()) $SampleTactContract$_internal_binary_NftWithdrawal((int, int, slice, slice) $self, (int, slice) $msg) impure inline {
    var ($self'seed, $self'time, $self'owner, $self'nftAddress) = $self;
    var ($msg'queryId, $msg'nftAddress) = $msg;
    throw_unless(4429, ( __tact_slice_eq_bits_nullable_one($self'owner, __tact_context_get_sender()) ));
    throw_unless(17214, ( __tact_slice_eq_bits_nullable_one($self'nftAddress, $msg'nftAddress) ));
    if (($self'time > now())) {
        ($self'seed, $self'time, $self'owner, $self'nftAddress)~$SampleTactContract$_fun_reply(__gen_cell_comment_2d5e30fdcf260ad75ca0b6657ef836f33edb15da3b58bcdf1953da8d2fe02218());
    } else {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'nftAddress, 0, 128, false, $Transfer$_store_cell($Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload(0, __tact_context_get_sender(), __tact_context_get_sender(), $global_emptyCell(), (__tact_my_balance() - $Context$_get_value(__tact_context_get())), $global_emptySlice()))));
        $self'time = 0;
        $self'nftAddress = null();
        $self'owner = null();
    }
    return (($self'seed, $self'time, $self'owner, $self'nftAddress), ());
}

(((int, int, slice, slice)), ()) $SampleTactContract$_internal_binary_Deploy((int, int, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'seed, $self'time, $self'owner, $self'nftAddress) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'seed, $self'time, $self'owner, $self'nftAddress)~$SampleTactContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'seed, $self'time, $self'owner, $self'nftAddress), ());
}

;;
;; Get methods of a Contract SampleTactContract
;;

_ %time() method_id(117771) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_time();
    return res;
}

_ %nft() method_id(73717) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_nft();
    return res;
}

_ %owner() method_id(83229) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmYcGMtjUNjkhNco6sS4GR5jprEvHkExmtsBrBck5T3VRG";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleTactContract
;;

((int, int, slice, slice), int) $SampleTactContract$_contract_router_internal((int, int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive OwnershipAssigned message
    if (op == 85167505) {
        var msg = in_msg~$OwnershipAssigned$_load();
        self~$SampleTactContract$_internal_binary_OwnershipAssigned(msg);
        return (self, true);
    }
    
    ;; Receive NftWithdrawal message
    if (op == 2345999593) {
        var msg = in_msg~$NftWithdrawal$_load();
        self~$SampleTactContract$_internal_binary_NftWithdrawal(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SampleTactContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleTactContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleTactContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleTactContract$_contract_store(self);
}
