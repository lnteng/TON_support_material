;;
;; Header files for LotteryContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $LotteryContract$_store
builder $LotteryContract$_store(builder build_0, (slice) v) inline;

;; $LotteryContract$_load
(slice, ((slice))) $LotteryContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $LotteryContract$init$_load
(slice, ((slice))) $LotteryContract$init$_load(slice sc_0) inline;

;; $LotteryContract$_contract_init
(slice) $LotteryContract$_contract_init(slice $owner) impure inline_ref;

;; $LotteryContract$_contract_load
(slice) $LotteryContract$_contract_load() impure inline_ref;

;; $LotteryContract$_contract_store
() $LotteryContract$_contract_store((slice) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $LotteryContract$_fun_calculateMaxBid
((slice), int) $LotteryContract$_fun_calculateMaxBid((slice) $self) impure inline_ref;

;; $LotteryContract$_fun_maxBid
((slice), int) $LotteryContract$_fun_maxBid((slice) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $LotteryContract$_fun_forward
((slice), ()) $LotteryContract$_fun_forward((slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $LotteryContract$_fun_reply
((slice), ()) $LotteryContract$_fun_reply((slice) $self, cell $body) impure inline;

;; $LotteryContract$_fun_notify
((slice), ()) $LotteryContract$_fun_notify((slice) $self, cell $body) impure inline;

;; $LotteryContract$_fun_requireOwner
((slice), ()) $LotteryContract$_fun_requireOwner((slice) $self) impure inline_ref;

;; $LotteryContract$_fun_owner
((slice), slice) $LotteryContract$_fun_owner((slice) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;
