;;
;; Header files for Round
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_eq_bits_nullable_one
int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; $AdminUploadJettonWalletData$_load
(slice, ((int, slice, int, slice))) $AdminUploadJettonWalletData$_load(slice sc_0) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $SubmitLog$_store
builder $SubmitLog$_store(builder build_0, (int, int) v) inline;

;; $SubmitLog$_store_cell
cell $SubmitLog$_store_cell((int, int) v) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $Round$_store
builder $Round$_store(builder build_0, (int, slice, int, slice, int, slice, int, int, int, int, cell) v) inline;

;; $Round$_load
(slice, ((int, slice, int, slice, int, slice, int, int, int, int, cell))) $Round$_load(slice sc_0) inline;

;; $RoundData$_to_external
(int, slice, int, slice, int, slice, int, int, int, int) $RoundData$_to_external(((int, slice, int, slice, int, slice, int, int, int, int)) v) inline;

;; $Round$init$_load
(slice, ((int, slice))) $Round$init$_load(slice sc_0) inline;

;; $Round$_contract_init
(int, slice, int, slice, int, slice, int, int, int, int, cell) $Round$_contract_init(int $_project_id, slice $_owner) impure inline_ref;

;; $Round$_contract_load
(int, slice, int, slice, int, slice, int, int, int, int, cell) $Round$_contract_load() impure inline_ref;

;; $Round$_contract_store
() $Round$_contract_store((int, slice, int, slice, int, slice, int, int, int, int, cell) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Round$_fun_get_user_submit_list
((int, slice, int, slice, int, slice, int, int, int, int, cell), cell) $Round$_fun_get_user_submit_list((int, slice, int, slice, int, slice, int, int, int, int, cell) $self) impure inline_ref;

;; $RoundData$_constructor_project_id_owner_end_time_round_contract_jetton_wallet_multiplier_upcoming_token_jetton_wallet_amount_of_upcoming_token_round_is_open_original_submit_qty_total_submit_score
((int, slice, int, slice, int, slice, int, int, int, int)) $RoundData$_constructor_project_id_owner_end_time_round_contract_jetton_wallet_multiplier_upcoming_token_jetton_wallet_amount_of_upcoming_token_round_is_open_original_submit_qty_total_submit_score(int project_id, slice owner, int end_time, slice round_contract_jetton_wallet, int multiplier, slice upcoming_token_jetton_wallet, int amount_of_upcoming_token, int round_is_open, int original_submit_qty, int total_submit_score) inline;

;; $Round$_fun_get_ido_round_data
((int, slice, int, slice, int, slice, int, int, int, int, cell), (int, slice, int, slice, int, slice, int, int, int, int)) $Round$_fun_get_ido_round_data((int, slice, int, slice, int, slice, int, int, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $SubmitLog$_constructor_submit_amount_timeStamp
((int, int)) $SubmitLog$_constructor_submit_amount_timeStamp(int submit_amount, int timeStamp) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int queryId, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;
