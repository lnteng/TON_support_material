#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "verifier_Round.headers.fc";
#include "verifier_Round.stdlib.fc";
#include "verifier_Round.constants.fc";
#include "verifier_Round.storage.fc";

;;
;; Contract Round functions
;;

(int, slice, int, slice, int, slice, int, int, int, int, cell) $Round$_contract_init(int $_project_id, slice $_owner) impure inline_ref {
    var (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list)) = (null(), null(), 0, null(), 0, null(), 0, null(), 0, 0, null());
    $self'project_id = $_project_id;
    $self'owner = $_owner;
    return ($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list);
}

((int, slice, int, slice, int, slice, int, int, int, int, cell), cell) $Round$_fun_get_user_submit_list((int, slice, int, slice, int, slice, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list)) = $self;
    return (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list), $self'user_submit_list);
}

((int, slice, int, slice, int, slice, int, int, int, int, cell), (int, slice, int, slice, int, slice, int, int, int, int)) $Round$_fun_get_ido_round_data((int, slice, int, slice, int, slice, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list)) = $self;
    return (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list), $RoundData$_constructor_project_id_owner_end_time_round_contract_jetton_wallet_multiplier_upcoming_token_jetton_wallet_amount_of_upcoming_token_round_is_open_original_submit_qty_total_submit_score($self'project_id, $self'owner, $self'end_time, __tact_not_null($self'round_contract_jetton_wallet), $self'multiplier, __tact_not_null($self'upcoming_token_jetton_wallet), $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score));
}

;;
;; Receivers of a Contract Round
;;

(((int, slice, int, slice, int, slice, int, int, int, int, cell)), ()) $Round$_internal_binary_AdminUploadJettonWalletData((int, slice, int, slice, int, slice, int, int, int, int, cell) $self, (int, slice, int, slice) $msg) impure inline {
    var ($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list) = $self;
    var ($msg'funding_period, $msg'round_contract_jetton_wallet, $msg'multiplier, $msg'upcoming_token_jetton_wallet) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(21884, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(35179, ($msg'funding_period <= 86401));
    throw_unless(37215, ($msg'funding_period > 0));
    $self'end_time = (now() + $msg'funding_period);
    $self'round_contract_jetton_wallet = $msg'round_contract_jetton_wallet;
    throw_unless(35067, ($msg'multiplier > 1));
    throw_unless(35067, ($msg'multiplier < 65535));
    $self'multiplier = $msg'multiplier;
    $self'upcoming_token_jetton_wallet = $msg'upcoming_token_jetton_wallet;
    throw_unless(12873, null?($self'round_is_open));
    $self'round_is_open = false;
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, (64 + 2), true, __gen_cell_comment_37e90db9d1f7725dc0128ee6bad2035fb50479e09a488a29257bed01a23050a0()));
    return (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list), ());
}

(((int, slice, int, slice, int, slice, int, int, int, int, cell)), ()) $Round$_internal_binary_TokenNotification((int, slice, int, slice, int, slice, int, int, int, int, cell) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (( __tact_slice_eq_bits_nullable_one($self'round_contract_jetton_wallet, $ctx'sender) )) {
        throw_unless(35535, $self'round_is_open);
        int $boost_timestamp = ($self'end_time - now());
        int $previous_coin = __tact_dict_get_slice_int($self'user_submit_list, 267, $msg'from, 257);
        $self'original_submit_qty = ($self'original_submit_qty + $msg'amount);
        if (null?($previous_coin)) {
            int $user_score = ($msg'amount * $boost_timestamp);
            $self'user_submit_list~__tact_dict_set_slice_int(267, $msg'from, $user_score, 257);
            $self'total_submit_score = ($self'total_submit_score + $user_score);
            $global_emit($SubmitLog$_store_cell($SubmitLog$_constructor_submit_amount_timeStamp($msg'amount, now())));
            __tact_nop();
        } elseif ((__tact_not_null($previous_coin) > 0)) {
            int $user_score = (($msg'amount * $boost_timestamp) + __tact_not_null($previous_coin));
            $self'user_submit_list~__tact_dict_set_slice_int(267, $msg'from, $user_score, 257);
            $self'total_submit_score = ($self'total_submit_score + $user_score);
            $global_emit($SubmitLog$_store_cell($SubmitLog$_constructor_submit_amount_timeStamp($msg'amount, now())));
            __tact_nop();
        }
    } elseif (( __tact_slice_eq_bits_nullable_one($self'upcoming_token_jetton_wallet, $ctx'sender) )) {
        throw_unless(4824, ( __tact_slice_eq_bits($self'owner, $msg'from) ));
        throw_unless(22619, __tact_int_eq_nullable_one($self'round_is_open, false));
        $self'round_is_open = true;
        $self'amount_of_upcoming_token = $msg'amount;
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'from, 0, (64 + 2), true, __gen_cell_comment_b3bc9cdf51385d4acd78d8a6e96940eeecf37a655401caa06f8decf06f703f21()));
    }
    return (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list), ());
}

((int, slice, int, slice, int, slice, int, int, int, int, cell), ()) $Round$_internal_text_909156e188eaa014ae1550453a47911d900f2998c66e9d28fafd753b83f94306((int, slice, int, slice, int, slice, int, int, int, int, cell) $self) impure inline {
    var ($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(21884, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(1845, (now() >= $self'end_time));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body(__tact_not_null($self'round_contract_jetton_wallet), 100000000, false, (0 + 64), $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(0, $self'original_submit_qty, my_address(), $ctx'sender, null(), 15000000, $global_emptySlice()))));
    return (($self'project_id, $self'owner, $self'end_time, $self'round_contract_jetton_wallet, $self'multiplier, $self'upcoming_token_jetton_wallet, $self'amount_of_upcoming_token, $self'round_is_open, $self'original_submit_qty, $self'total_submit_score, $self'user_submit_list), ());
}

;;
;; Get methods of a Contract Round
;;

_ %get_user_submit_list() method_id(86628) {
    var self = $Round$_contract_load();
    var res = self~$Round$_fun_get_user_submit_list();
    return res;
}

_ %get_ido_round_data() method_id(91057) {
    var self = $Round$_contract_load();
    var res = self~$Round$_fun_get_ido_round_data();
    return $RoundData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmUn2A4xGTSUzNseZC4oeMzfrkUkNZrn1L9CFRySYfDPo5";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Round
;;

((int, slice, int, slice, int, slice, int, int, int, int, cell), int) $Round$_contract_router_internal((int, slice, int, slice, int, slice, int, int, int, int, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive AdminUploadJettonWalletData message
    if (op == 430949810) {
        var msg = in_msg~$AdminUploadJettonWalletData$_load();
        self~$Round$_internal_binary_AdminUploadJettonWalletData(msg);
        return (self, true);
    }
    
    ;; Receive TokenNotification message
    if (op == 1935855772) {
        var msg = in_msg~$TokenNotification$_load();
        self~$Round$_internal_binary_TokenNotification(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "AdminWithdraw" message
        if (text_op == 0x909156e188eaa014ae1550453a47911d900f2998c66e9d28fafd753b83f94306) {
            self~$Round$_internal_text_909156e188eaa014ae1550453a47911d900f2998c66e9d28fafd753b83f94306();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Round$_contract_load();
    
    ;; Handle operation
    int handled = self~$Round$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Round$_contract_store(self);
}
