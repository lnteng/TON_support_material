;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode_code_data(slice to, cell body, int value, int mode, cell code, cell data) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: VaultContent
;; TLB: _ name:^string symbol:^string decimals:Maybe int257 = VaultContent
;;

builder $VaultContent$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'name, v'symbol, v'decimals) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'symbol).end_cell());
    build_0 = ~ null?(v'decimals) ? build_0.store_int(true, 1).store_int(v'decimals, 257) : build_0.store_int(false, 1);
    return build_0;
}

((slice, slice, int)) $VaultContent$_constructor_name_symbol(slice name, slice symbol) inline {
    return (name, symbol, 9);
}

;;
;; Type: UpdateVault
;; Header: 0x4e4800c2
;; TLB: update_vault#4e4800c2 owner:address asset:address content:VaultContent{name:^string,symbol:^string,decimals:Maybe int257} = UpdateVault
;;

builder $UpdateVault$_store(builder build_0, (slice, slice, (slice, slice, int)) v) inline {
    var (v'owner, v'asset, (v'content'name, v'content'symbol, v'content'decimals)) = v;
    build_0 = store_uint(build_0, 1313341634, 32);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'asset);
    build_0 = $VaultContent$_store(build_0, (v'content'name, v'content'symbol, v'content'decimals));
    return build_0;
}

cell $UpdateVault$_store_cell((slice, slice, (slice, slice, int)) v) inline {
    return $UpdateVault$_store(begin_cell(), v).end_cell();
}

((slice, slice, (slice, slice, int))) $UpdateVault$_constructor_owner_asset_content(slice owner, slice asset, (slice, slice, int) content) inline {
    return (owner, asset, content);
}

;;
;; Type: NewVault
;; Header: 0x938dafab
;; TLB: new_vault#938dafab asset:address name:^string symbol:^string = NewVault
;;

(slice, ((slice, slice, slice))) $NewVault$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2475536299);
    var v'asset = sc_0~__tact_load_address();
    var v'name = sc_0~load_ref().begin_parse();
    var v'symbol = sc_0~load_ref().begin_parse();
    return (sc_0, (v'asset, v'name, v'symbol));
}

;;
;; Type: NewVaultResponse
;; Header: 0x31b18b0d
;; TLB: new_vault_response#31b18b0d seqno:uint256 = NewVaultResponse
;;

builder $NewVaultResponse$_store(builder build_0, (int) v) inline {
    var (v'seqno) = v;
    build_0 = store_uint(build_0, 833719053, 32);
    build_0 = build_0.store_uint(v'seqno, 256);
    return build_0;
}

cell $NewVaultResponse$_store_cell((int) v) inline {
    return $NewVaultResponse$_store(begin_cell(), v).end_cell();
}

((int)) $NewVaultResponse$_constructor_seqno(int seqno) inline {
    return (seqno);
}

;;
;; Type: Vault
;;

builder $Vault$init$_store(builder build_0, (slice, int) v) inline {
    var (v'factory, v'seqno) = v;
    build_0 = __tact_store_address(build_0, v'factory);
    build_0 = build_0.store_int(v'seqno, 257);
    return build_0;
}

(cell, cell) $Vault$_init_child(cell sys', slice $factory, int $seqno) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Vault
    cell mine = __tact_dict_get_code(source, 46205);
    contracts = __tact_dict_set_code(contracts, 46205, mine);
    
    ;; Contract Code: JettonDefaultWallet
    cell code_55471 = __tact_dict_get_code(source, 55471);
    contracts = __tact_dict_set_code(contracts, 55471, code_55471);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Vault$init$_store(b, ($factory, $seqno));
    return (mine, b.end_cell());
}

;;
;; Type: Factory
;;

builder $Factory$_store(builder build_0, (slice, int) v) inline {
    var (v'owner, v'numVaults) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'numVaults, 256);
    return build_0;
}

(slice, ((slice, int))) $Factory$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'numVaults = sc_0~load_uint(256);
    return (sc_0, (v'owner, v'numVaults));
}

(slice, int) $Factory$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Factory$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Factory$_contract_init();
    }
}

() $Factory$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Factory$_store(b, v);
    set_data(b.end_cell());
}