#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_WhitelistChildEntry.headers.fc";
#include "sample_WhitelistChildEntry.stdlib.fc";
#include "sample_WhitelistChildEntry.storage.fc";

;;
;; Contract WhitelistChildEntry functions
;;

(slice, slice, int) $WhitelistChildEntry$_contract_init(slice $parent, slice $addr) impure inline_ref {
    var (($self'parent, $self'addr, $self'accepted)) = (null(), null(), false);
    throw_unless(49469, ( __tact_slice_eq_bits($parent, __tact_context_get_sender()) ));
    $self'parent = $parent;
    $self'addr = $addr;
    return ($self'parent, $self'addr, $self'accepted);
}

((slice, slice, int), (slice, int)) $WhitelistChildEntry$_fun_details((slice, slice, int) $self) impure inline_ref {
    var (($self'parent, $self'addr, $self'accepted)) = $self;
    return (($self'parent, $self'addr, $self'accepted), $WhitelistEntryDetails$_constructor_addr_accepted($self'addr, $self'accepted));
}

;;
;; Receivers of a Contract WhitelistChildEntry
;;

((slice, slice, int), ()) $WhitelistChildEntry$_internal_text_042c4f96500e1ee28ba14c5ddc4295c40500ef383619533ff1ef373cbe8c7c86((slice, slice, int) $self) impure inline {
    var ($self'parent, $self'addr, $self'accepted) = $self;
    throw_unless(49469, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $self'accepted = true;
    return (($self'parent, $self'addr, $self'accepted), ());
}

;;
;; Get methods of a Contract WhitelistChildEntry
;;

_ %details() method_id(118890) {
    var self = $WhitelistChildEntry$_contract_load();
    var res = self~$WhitelistChildEntry$_fun_details();
    return $WhitelistEntryDetails$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbV8f45z4297yTJh5Q41A2UynsTTg3g9F2ZLJ4YaG4NGL";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract WhitelistChildEntry
;;

((slice, slice, int), int) $WhitelistChildEntry$_contract_router_internal((slice, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "accept" message
        if (text_op == 0x042c4f96500e1ee28ba14c5ddc4295c40500ef383619533ff1ef373cbe8c7c86) {
            self~$WhitelistChildEntry$_internal_text_042c4f96500e1ee28ba14c5ddc4295c40500ef383619533ff1ef373cbe8c7c86();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $WhitelistChildEntry$_contract_load();
    
    ;; Handle operation
    int handled = self~$WhitelistChildEntry$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $WhitelistChildEntry$_contract_store(self);
}
