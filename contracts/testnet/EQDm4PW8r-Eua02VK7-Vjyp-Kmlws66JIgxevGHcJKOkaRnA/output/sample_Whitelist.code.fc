#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Whitelist.headers.fc";
#include "sample_Whitelist.stdlib.fc";
#include "sample_Whitelist.constants.fc";
#include "sample_Whitelist.storage.fc";

;;
;; Contract Whitelist functions
;;

(int) $Whitelist$_contract_init(int $id) impure inline_ref {
    var (($self'id)) = (null());
    $self'id = $id;
    return ($self'id);
}

((int), int) $Whitelist$_fun_id((int) $self) impure inline_ref {
    var (($self'id)) = $self;
    return (($self'id), $self'id);
}

((int), (int)) $Whitelist$_fun_metadata((int) $self) impure inline_ref {
    var (($self'id)) = $self;
    return (($self'id), $WhitelistMetadata$_constructor_enrollFee(100000000));
}

((int), slice) $Whitelist$_fun_entryAddress((int) $self, slice $addr) impure inline_ref {
    var (($self'id)) = $self;
    return (($self'id), $global_contractAddress($WhitelistChildEntry$_init_child(__tact_context_sys, my_address(), $addr)));
}

;;
;; Receivers of a Contract Whitelist
;;

(((int)), ()) %$Whitelist$_internal_empty((int) $self) impure inline {
    var ($self'id) = $self;
    return (($self'id), ());
}

(((int)), ()) $Whitelist$_internal_binary_AcceptFee((int) $self, (slice) $msg) impure inline {
    var ($self'id) = $self;
    var ($msg'cashback) = $msg;
    $global_send($SendParameters$_constructor_to_bounce_value_mode($msg'cashback, true, (($Context$_get_value(__tact_context_get()) - 10000000) - 20000000), 0));
    return (($self'id), ());
}

((int), ()) $Whitelist$_internal_text_ed9fb170c5d8443340ceb24b83e01858b86dad5f9106c726f1c4d97d380b3b42((int) $self) impure inline {
    var ($self'id) = $self;
    throw_unless(31042, ($Context$_get_value(__tact_context_get()) >= ((100000000 + 20000000) + 10000000)));
    var ($init'code, $init'data) = $WhitelistChildEntry$_init_child(__tact_context_sys, my_address(), __tact_context_get_sender());
    $global_send($SendParameters$_constructor_to_value_body_mode_code_data($global_contractAddress(($init'code, $init'data)), 20000000, __gen_cell_comment_042c4f96500e1ee28ba14c5ddc4295c40500ef383619533ff1ef373cbe8c7c86(), 2, $init'code, $init'data));
    $global_send($SendParameters$_constructor_to_body_value_mode(my_address(), $AcceptFee$_store_cell($AcceptFee$_constructor_cashback(__tact_context_get_sender())), 0, 64));
    return (($self'id), ());
}

(((int)), ()) $Whitelist$_internal_binary_Deploy((int) $self, (int) $deploy) impure inline {
    var ($self'id) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id)~$Whitelist$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id), ());
}

;;
;; Get methods of a Contract Whitelist
;;

_ %id() method_id(105872) {
    var self = $Whitelist$_contract_load();
    var res = self~$Whitelist$_fun_id();
    return res;
}

_ %metadata() method_id(91827) {
    var self = $Whitelist$_contract_load();
    var res = self~$Whitelist$_fun_metadata();
    return $WhitelistMetadata$_to_external(res);
}

_ %entryAddress(slice $$addr) method_id(103951) {
    slice $addr = __tact_verify_address($$addr);
    var self = $Whitelist$_contract_load();
    var res = self~$Whitelist$_fun_entryAddress($addr);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmXJhqxo2fXvH3iniqB44GsHsdXTvCeFg9vV5PHvYK7Uwr";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Whitelist
;;

((int), int) $Whitelist$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Whitelist$_internal_empty();
        return (self, true);
    }
    
    ;; Receive AcceptFee message
    if (op == 4139864225) {
        var msg = in_msg~$AcceptFee$_load();
        self~$Whitelist$_internal_binary_AcceptFee(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Whitelist$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "enroll" message
        if (text_op == 0xed9fb170c5d8443340ceb24b83e01858b86dad5f9106c726f1c4d97d380b3b42) {
            self~$Whitelist$_internal_text_ed9fb170c5d8443340ceb24b83e01858b86dad5f9106c726f1c4d97d380b3b42();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Whitelist$_contract_load();
    
    ;; Handle operation
    int handled = self~$Whitelist$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Whitelist$_contract_store(self);
}
