;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

builder $SendParameters$_store(builder build_0, (int, slice, int, int, cell, cell, cell) v) inline_ref {
    var (v'bounce, v'to, v'value, v'mode, v'body, v'code, v'data) = v;
    build_0 = build_0.store_int(v'bounce, 1);
    build_0 = __tact_store_address(build_0, v'to);
    build_0 = build_0.store_int(v'value, 257);
    build_0 = build_0.store_int(v'mode, 257);
    build_0 = ~ null?(v'body) ? build_0.store_int(true, 1).store_ref(v'body) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'code) ? build_0.store_int(true, 1).store_ref(v'code) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'data) ? build_0.store_int(true, 1).store_ref(v'data) : build_0.store_int(false, 1);
    return build_0;
}

cell $SendParameters$_store_cell((int, slice, int, int, cell, cell, cell) v) inline {
    return $SendParameters$_store(begin_cell(), v).end_cell();
}

(slice, ((int, slice, int, int, cell, cell, cell))) $SendParameters$_load(slice sc_0) inline_ref {
    var v'bounce = sc_0~load_int(1);
    var v'to = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(257);
    var v'mode = sc_0~load_int(257);
    var v'body = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'code = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'data = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'bounce, v'to, v'value, v'mode, v'body, v'code, v'data));
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ExtMessage
;; Header: 0xc1252abe
;; TLB: ext_message#c1252abe signature:fixed_bytes64 seqno:uint32 valid_until:uint32 message_parameters:SendParameters{bounce:bool,to:address,value:int257,mode:int257,body:Maybe ^cell,code:Maybe ^cell,data:Maybe ^cell} = ExtMessage
;;

(slice, ((slice, int, int, (int, slice, int, int, cell, cell, cell)))) $ExtMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3240438462);
    var v'signature = sc_0~load_bits(512);
    var v'seqno = sc_0~load_uint(32);
    var v'valid_until = sc_0~load_uint(32);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'message_parameters = sc_1~$SendParameters$_load();
    return (sc_0, (v'signature, v'seqno, v'valid_until, v'message_parameters));
}

;;
;; Type: TactWallet
;;

builder $TactWallet$_store(builder build_0, (int, int) v) inline {
    var (v'seqno, v'publicKey) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'publicKey, 256);
    return build_0;
}

(slice, ((int, int))) $TactWallet$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'publicKey = sc_0~load_uint(256);
    return (sc_0, (v'seqno, v'publicKey));
}

(slice, ((int))) $TactWallet$init$_load(slice sc_0) inline {
    var v'publicKey = sc_0~load_int(257);
    return (sc_0, (v'publicKey));
}

(int, int) $TactWallet$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TactWallet$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int publicKey) = $sc~$TactWallet$init$_load();
        $sc.end_parse();
        return $TactWallet$_contract_init(publicKey);
    }
}

() $TactWallet$_contract_store((int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TactWallet$_store(b, v);
    set_data(b.end_cell());
}