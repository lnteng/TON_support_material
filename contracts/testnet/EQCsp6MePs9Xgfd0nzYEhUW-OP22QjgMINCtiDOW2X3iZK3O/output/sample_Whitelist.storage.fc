;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body_mode_code_data(slice to, int value, cell body, int mode, cell code, cell data) inline {
    return (true, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice to, cell body, int value, int mode) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: AcceptFee
;; Header: 0xf6c150a1
;; TLB: accept_fee#f6c150a1 cashback:address = AcceptFee
;;

builder $AcceptFee$_store(builder build_0, (slice) v) inline {
    var (v'cashback) = v;
    build_0 = store_uint(build_0, 4139864225, 32);
    build_0 = __tact_store_address(build_0, v'cashback);
    return build_0;
}

cell $AcceptFee$_store_cell((slice) v) inline {
    return $AcceptFee$_store(begin_cell(), v).end_cell();
}

(slice, ((slice))) $AcceptFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4139864225);
    var v'cashback = sc_0~__tact_load_address();
    return (sc_0, (v'cashback));
}

((slice)) $AcceptFee$_constructor_cashback(slice cashback) inline {
    return (cashback);
}

;;
;; Type: WhitelistMetadata
;; Header: 0x5a13e5aa
;; TLB: whitelist_metadata#5a13e5aa owner:address enrollFee:int257 = WhitelistMetadata
;;

(slice, int) $WhitelistMetadata$_to_external(((slice, int)) v) inline {
    var (v'owner, v'enrollFee) = v; 
    return (v'owner, v'enrollFee);
}

((slice, int)) $WhitelistMetadata$_constructor_owner_enrollFee(slice owner, int enrollFee) inline {
    return (owner, enrollFee);
}

;;
;; Type: Whitelist
;;

builder $Whitelist$_store(builder build_0, (slice, int, int) v) inline {
    var (v'owner, v'id, v'enrollFee) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_coins(v'enrollFee);
    return build_0;
}

(slice, ((slice, int, int))) $Whitelist$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'id = sc_0~load_uint(32);
    var v'enrollFee = sc_0~load_coins();
    return (sc_0, (v'owner, v'id, v'enrollFee));
}

(slice, ((int, int))) $Whitelist$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    var v'enrollFee = sc_0~load_int(257);
    return (sc_0, (v'id, v'enrollFee));
}

(slice, int, int) $Whitelist$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Whitelist$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int id, int enrollFee) = $sc~$Whitelist$init$_load();
        $sc.end_parse();
        return $Whitelist$_contract_init(id, enrollFee);
    }
}

() $Whitelist$_contract_store((slice, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Whitelist$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: WhitelistChildEntry
;;

builder $WhitelistChildEntry$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'parent, v'addr) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = __tact_store_address(build_0, v'addr);
    return build_0;
}

(cell, cell) $WhitelistChildEntry$_init_child(cell sys', slice $parent, slice $addr) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: WhitelistChildEntry
    cell mine = __tact_dict_get_code(source, 52243);
    contracts = __tact_dict_set_code(contracts, 52243, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $WhitelistChildEntry$init$_store(b, ($parent, $addr));
    return (mine, b.end_cell());
}