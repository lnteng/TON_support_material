;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: UserStats
;; TLB: _ counter:uint32 biggestWin:uint256 lastWin:uint256 = UserStats
;;

builder $UserStats$_store(builder build_0, (int, int, int) v) inline {
    var (v'counter, v'biggestWin, v'lastWin) = v;
    build_0 = build_0.store_uint(v'counter, 32);
    build_0 = build_0.store_uint(v'biggestWin, 256);
    build_0 = build_0.store_uint(v'lastWin, 256);
    return build_0;
}

cell $UserStats$_store_cell((int, int, int) v) inline {
    return $UserStats$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $UserStats$_load(slice sc_0) inline {
    var v'counter = sc_0~load_uint(32);
    var v'biggestWin = sc_0~load_uint(256);
    var v'lastWin = sc_0~load_uint(256);
    return (sc_0, (v'counter, v'biggestWin, v'lastWin));
}

tuple $UserStats$_as_optional((int, int, int) v) inline {
    var (v'counter, v'biggestWin, v'lastWin) = v;
    return __tact_tuple_create_3(v'counter, v'biggestWin, v'lastWin);
}

tuple $UserStats$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $UserStats$_as_optional(sc~$UserStats$_load());
}

((int, int, int)) $UserStats$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'counter, int vvv'biggestWin, int vvv'lastWin) = __tact_tuple_destroy_3(v);
    return (vvv'counter, vvv'biggestWin, vvv'lastWin);
}

tuple $UserStats$_to_tuple(((int, int, int)) v) inline {
    var (v'counter, v'biggestWin, v'lastWin) = v;
    return __tact_tuple_create_3(v'counter, v'biggestWin, v'lastWin);
}

tuple $UserStats$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $UserStats$_to_tuple($UserStats$_not_null(v)); 
}

(int, int, int) $UserStats$_to_external(((int, int, int)) v) inline {
    var (v'counter, v'biggestWin, v'lastWin) = v; 
    return (v'counter, v'biggestWin, v'lastWin);
}

tuple $UserStats$_to_opt_external(tuple v) inline {
    var loaded = $UserStats$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int)) $UserStats$_constructor_counter_biggestWin_lastWin(int counter, int biggestWin, int lastWin) inline {
    return (counter, biggestWin, lastWin);
}

;;
;; Type: LootBoxContract
;;

builder $LootBoxContract$_store(builder build_0, (slice, cell, (int, int, int)) v) inline {
    var (v'owner, v'usersStats, (v'globalStats'counter, v'globalStats'biggestWin, v'globalStats'lastWin)) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'usersStats);
    build_0 = $UserStats$_store(build_0, (v'globalStats'counter, v'globalStats'biggestWin, v'globalStats'lastWin));
    return build_0;
}

(slice, ((slice, cell, (int, int, int)))) $LootBoxContract$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'usersStats = sc_0~load_dict();
    var v'globalStats = sc_0~$UserStats$_load();
    return (sc_0, (v'owner, v'usersStats, v'globalStats));
}

(slice, ((slice))) $LootBoxContract$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, cell, (int, int, int)) $LootBoxContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$LootBoxContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$LootBoxContract$init$_load();
        $sc.end_parse();
        return $LootBoxContract$_contract_init(owner);
    }
}

() $LootBoxContract$_contract_store((slice, cell, (int, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $LootBoxContract$_store(b, v);
    set_data(b.end_cell());
}