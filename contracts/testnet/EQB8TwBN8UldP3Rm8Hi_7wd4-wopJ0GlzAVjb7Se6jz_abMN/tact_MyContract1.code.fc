#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_MyContract1.headers.fc";
#include "tact_MyContract1.stdlib.fc";
#include "tact_MyContract1.constants.fc";
#include "tact_MyContract1.storage.fc";

;;
;; Contract MyContract1 functions
;;

(int, int, int, slice) $MyContract1$_contract_init(int $id) impure inline_ref {
    var (($self'id, $self'level, $self'value, $self'owner)) = (null(), 0, 0, null());
    $self'owner = __tact_context_get_sender();
    $self'id = $id;
    return ($self'id, $self'level, $self'value, $self'owner);
}

((int, int, int, slice), int) $MyContract1$_fun_stopped((int, int, int, slice) $self) impure inline_ref {
    var (($self'id, $self'level, $self'value, $self'owner)) = $self;
    return (($self'id, $self'level, $self'value, $self'owner), ($self'value == 0));
}

((int, int, int, slice), int) $MyContract1$_fun_level((int, int, int, slice) $self) impure inline_ref {
    var (($self'id, $self'level, $self'value, $self'owner)) = $self;
    return (($self'id, $self'level, $self'value, $self'owner), $self'level);
}

((int, int, int, slice), int) $MyContract1$_fun_id((int, int, int, slice) $self) impure inline_ref {
    var (($self'id, $self'level, $self'value, $self'owner)) = $self;
    return (($self'id, $self'level, $self'value, $self'owner), $self'id);
}

((int, int, int, slice), ()) $MyContract1$_fun_requireOwner((int, int, int, slice) $self) impure inline_ref {
    var (($self'id, $self'level, $self'value, $self'owner)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'id, $self'level, $self'value, $self'owner), ());
}

((int, int, int, slice), slice) $MyContract1$_fun_owner((int, int, int, slice) $self) impure inline_ref {
    var (($self'id, $self'level, $self'value, $self'owner)) = $self;
    return (($self'id, $self'level, $self'value, $self'owner), $self'owner);
}

;;
;; Receivers of a Contract MyContract1
;;

(((int, int, int, slice)), ()) $MyContract1$_internal_binary_Restart((int, int, int, slice) $self, (int, slice) $msg) impure inline {
    var ($self'id, $self'level, $self'value, $self'owner) = $self;
    var ($msg'level, $msg'newOwner) = $msg;
    ($self'id, $self'level, $self'value, $self'owner)~$MyContract1$_fun_requireOwner();
    $self'level = $msg'level;
    $self'value = $global_random(1, $self'level);
    if ((~ null?($msg'newOwner))) {
        $self'owner = __tact_not_null($msg'newOwner);
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_not_null($msg'newOwner), 0, 0, __gen_cell_comment_c7e655649ff0cfa84349173a677dec85a565d82321f5bd58ced77474d8cceb5a()));
    }
    return (($self'id, $self'level, $self'value, $self'owner), ());
}

(((int, int, int, slice)), ()) $MyContract1$_internal_binary_Bet((int, int, int, slice) $self, (int) $msg) impure inline {
    var ($self'id, $self'level, $self'value, $self'owner) = $self;
    var ($msg'value) = $msg;
    throw_unless(16290, ($self'value != 0));
    throw_unless(6950, ($Context$_get_value(__tact_context_get()) >= 100000000));
    if (($self'value != $msg'value)) {
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 2, __gen_cell_comment_5a500ae387c47294cebf9a882e8b21cc2dbea0cb86ceeb135817e4bb595a1031()));
        return (($self'id, $self'level, $self'value, $self'owner), ());
    }
    $self'value = 0;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'owner, 0, 2, __gen_cell_comment_ff48764ea96ebb498e75125030606861a94d8b2b6af025dba70fa4514245cdbb()));
    $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 128, __gen_cell_comment_7f4091ace9a1f37fe399447acc80126b3151f46fbf63150864b50eea8802a9b6()));
    return (($self'id, $self'level, $self'value, $self'owner), ());
}

(((int, int, int, slice)), ()) $MyContract1$_internal_binary_Deploy((int, int, int, slice) $self, (int) $deploy) impure inline {
    var ($self'id, $self'level, $self'value, $self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, $self'level, $self'value, $self'owner)~$MyContract1$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, $self'level, $self'value, $self'owner), ());
}

;;
;; Get methods of a Contract MyContract1
;;

_ %stopped() method_id(74107) {
    var self = $MyContract1$_contract_load();
    var res = self~$MyContract1$_fun_stopped();
    return res;
}

_ %level() method_id(83005) {
    var self = $MyContract1$_contract_load();
    var res = self~$MyContract1$_fun_level();
    return res;
}

_ %id() method_id(105872) {
    var self = $MyContract1$_contract_load();
    var res = self~$MyContract1$_fun_id();
    return res;
}

_ %owner() method_id(83229) {
    var self = $MyContract1$_contract_load();
    var res = self~$MyContract1$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmSbVpaGvBnBtFWMbZd9nPkK6uW3nFinw3kCvD9HGcQAnd";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MyContract1
;;

((int, int, int, slice), int) $MyContract1$_contract_router_internal((int, int, int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Restart message
    if (op == 3537176591) {
        var msg = in_msg~$Restart$_load();
        self~$MyContract1$_internal_binary_Restart(msg);
        return (self, true);
    }
    
    ;; Receive Bet message
    if (op == 905136697) {
        var msg = in_msg~$Bet$_load();
        self~$MyContract1$_internal_binary_Bet(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$MyContract1$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MyContract1$_contract_load();
    
    ;; Handle operation
    int handled = self~$MyContract1$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MyContract1$_contract_store(self);
}
