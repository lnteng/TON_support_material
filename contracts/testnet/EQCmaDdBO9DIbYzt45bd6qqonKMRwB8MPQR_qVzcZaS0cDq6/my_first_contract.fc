#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_int(32),  ;; counter
    ds~load_msg_addr(), ;; most recent sender
    ds~load_msg_addr()  ;; owner
  );
}

(slice) get_id() method_id {
  return "co.imba.tris_first_contract";
}

() save_data(int counter, slice recent_sender, slice owner_address) impure inline {
  set_data(
    begin_cell()
    .store_int(counter, 32)
    .store_slice(recent_sender)
    .store_slice(owner_address)
    .end_cell()
  );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
  slice cs = in_msg.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_adderss = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);

  var (counter, recent_sender, owner_address) = load_data();

  if(op == 1){
    int amount = in_msg_body~load_int(32);
    save_data(counter + amount, sender_adderss, owner_address);
    return();
  }

  if(op == 2){
    ;; deposit
    return();
  }

  if(op == 3){
    ;; withdraw
    throw_unless(103, equal_slice_bits(sender_adderss, owner_address));

    int withdraw_amount = in_msg_body~load_coins();
    var [balance, _] = get_balance();
    throw_unless(104, balance >= withdraw_amount);
    int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

    int msg_mode = 1;
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(sender_adderss)
    .store_coins(return_value)
    .store_uint(0,1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();

    send_raw_message(msg, msg_mode);

    return();
  }

  throw(777);
}

(int, slice, slice) get_contract_storage() method_id {
  return load_data();
}

(int) balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}
