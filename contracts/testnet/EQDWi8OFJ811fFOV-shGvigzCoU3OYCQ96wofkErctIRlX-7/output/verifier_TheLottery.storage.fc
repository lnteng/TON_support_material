;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Withdraw
;; Header: 0x2365d020
;; TLB: withdraw#2365d020  = Withdraw
;;

(slice, (tuple)) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 593874976);
    return (sc_0, null());
}

;;
;; Type: Player
;; TLB: _ address:address bit:coins = Player
;;

builder $Player$_store(builder build_0, (slice, int) v) inline {
    var (v'address, v'bit) = v;
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_coins(v'bit);
    return build_0;
}

cell $Player$_store_cell((slice, int) v) inline {
    return $Player$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int))) $Player$_load(slice sc_0) inline {
    var v'address = sc_0~__tact_load_address();
    var v'bit = sc_0~load_coins();
    return (sc_0, (v'address, v'bit));
}

tuple $Player$_as_optional((slice, int) v) inline {
    var (v'address, v'bit) = v;
    return __tact_tuple_create_2(v'address, v'bit);
}

tuple $Player$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Player$_as_optional(sc~$Player$_load());
}

_ $Player$_get_address((slice, int) v) inline {
    var (v'address, v'bit) = v;
    return v'address;
}

((slice, int)) $Player$_tensor_cast((slice, int) v) asm "NOP";

((slice, int)) $Player$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'address, int vvv'bit) = __tact_tuple_destroy_2(v);
    return (vvv'address, vvv'bit);
}

((slice, int)) $Player$_constructor_address_bit(slice address, int bit) inline {
    return (address, bit);
}

;;
;; Type: Game
;; TLB: _ players:dict<int, ^Player{address:address,bit:coins}> currPlayerIdx:int8 winPlayerIdx:int8 timestamp:uint32 = Game
;;

builder $Game$_store(builder build_0, (cell, int, int, int) v) inline {
    var (v'players, v'currPlayerIdx, v'winPlayerIdx, v'timestamp) = v;
    build_0 = build_0.store_dict(v'players);
    build_0 = build_0.store_int(v'currPlayerIdx, 8);
    build_0 = build_0.store_int(v'winPlayerIdx, 8);
    build_0 = build_0.store_uint(v'timestamp, 32);
    return build_0;
}

cell $Game$_store_cell((cell, int, int, int) v) inline {
    return $Game$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int, int, int))) $Game$_load(slice sc_0) inline {
    var v'players = sc_0~load_dict();
    var v'currPlayerIdx = sc_0~load_int(8);
    var v'winPlayerIdx = sc_0~load_int(8);
    var v'timestamp = sc_0~load_uint(32);
    return (sc_0, (v'players, v'currPlayerIdx, v'winPlayerIdx, v'timestamp));
}

tuple $Game$_as_optional((cell, int, int, int) v) inline {
    var (v'players, v'currPlayerIdx, v'winPlayerIdx, v'timestamp) = v;
    return __tact_tuple_create_4(v'players, v'currPlayerIdx, v'winPlayerIdx, v'timestamp);
}

tuple $Game$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Game$_as_optional(sc~$Game$_load());
}

((cell, int, int, int)) $Game$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'players, int vvv'currPlayerIdx, int vvv'winPlayerIdx, int vvv'timestamp) = __tact_tuple_destroy_4(v);
    return (vvv'players, vvv'currPlayerIdx, vvv'winPlayerIdx, vvv'timestamp);
}

((cell, int, int, int)) $Game$_constructor_players_currPlayerIdx_winPlayerIdx_timestamp(cell players, int currPlayerIdx, int winPlayerIdx, int timestamp) inline {
    return (players, currPlayerIdx, winPlayerIdx, timestamp);
}

;;
;; Type: TheLottery
;;

builder $TheLottery$_store(builder build_0, (slice, cell, int, int, int) v) inline {
    var (v'owner, v'games, v'currGameIdx, v'lockedBalance, v'totalRevenue) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'games);
    build_0 = build_0.store_uint(v'currGameIdx, 64);
    build_0 = build_0.store_coins(v'lockedBalance);
    build_0 = build_0.store_uint(v'totalRevenue, 128);
    return build_0;
}

(slice, ((slice, cell, int, int, int))) $TheLottery$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'games = sc_0~load_dict();
    var v'currGameIdx = sc_0~load_uint(64);
    var v'lockedBalance = sc_0~load_coins();
    var v'totalRevenue = sc_0~load_uint(128);
    return (sc_0, (v'owner, v'games, v'currGameIdx, v'lockedBalance, v'totalRevenue));
}

(slice, ((slice))) $TheLottery$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, cell, int, int, int) $TheLottery$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TheLottery$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$TheLottery$init$_load();
        $sc.end_parse();
        return $TheLottery$_contract_init(owner);
    }
}

() $TheLottery$_contract_store((slice, cell, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TheLottery$_store(b, v);
    set_data(b.end_cell());
}