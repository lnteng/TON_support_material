;;
;; Header files for TheLottery
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_float_to_string
slice __tact_float_to_string(int src, int digits) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Withdraw$_load
(slice, (tuple)) $Withdraw$_load(slice sc_0) inline;

;; $Player$_store
builder $Player$_store(builder build_0, (slice, int) v) inline;

;; $Player$_store_cell
cell $Player$_store_cell((slice, int) v) inline;

;; $Player$_load
(slice, ((slice, int))) $Player$_load(slice sc_0) inline;

;; $Player$_as_optional
tuple $Player$_as_optional((slice, int) v) inline;

;; $Player$_load_opt
tuple $Player$_load_opt(cell cl) inline;

;; $Game$_store
builder $Game$_store(builder build_0, (cell, int, int, int) v) inline;

;; $Game$_store_cell
cell $Game$_store_cell((cell, int, int, int) v) inline;

;; $Game$_load
(slice, ((cell, int, int, int))) $Game$_load(slice sc_0) inline;

;; $Game$_as_optional
tuple $Game$_as_optional((cell, int, int, int) v) inline;

;; $Game$_load_opt
tuple $Game$_load_opt(cell cl) inline;

;; $TheLottery$_store
builder $TheLottery$_store(builder build_0, (slice, cell, int, int, int) v) inline;

;; $TheLottery$_load
(slice, ((slice, cell, int, int, int))) $TheLottery$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Player$_get_address
_ $Player$_get_address((slice, int) v) inline;

;; $Player$_not_null
((slice, int)) $Player$_not_null(tuple v) inline;

;; $Game$_not_null
((cell, int, int, int)) $Game$_not_null(tuple v) inline;

;; $TheLottery$init$_load
(slice, ((slice))) $TheLottery$init$_load(slice sc_0) inline;

;; $Game$_constructor_players_currPlayerIdx_winPlayerIdx_timestamp
((cell, int, int, int)) $Game$_constructor_players_currPlayerIdx_winPlayerIdx_timestamp(cell players, int currPlayerIdx, int winPlayerIdx, int timestamp) inline;

;; $TheLottery$_contract_init
(slice, cell, int, int, int) $TheLottery$_contract_init(slice $owner) impure inline_ref;

;; $TheLottery$_contract_load
(slice, cell, int, int, int) $TheLottery$_contract_load() impure inline_ref;

;; $TheLottery$_contract_store
() $TheLottery$_contract_store((slice, cell, int, int, int) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Int$_fun_toCoinsString
slice $Int$_fun_toCoinsString(int $self) impure inline;

;; $TheLottery$_fun_isUserInGame
((slice, cell, int, int, int), int) $TheLottery$_fun_isUserInGame((slice, cell, int, int, int) $self, slice $address, (cell, int, int, int) $game) impure inline_ref;

;; $TheLottery$_fun_rewardTheWinner
((slice, cell, int, int, int), ()) $TheLottery$_fun_rewardTheWinner((slice, cell, int, int, int) $self, (slice, int) $player) impure inline_ref;

;; $TheLottery$_fun_requireOwner
((slice, cell, int, int, int), ()) $TheLottery$_fun_requireOwner((slice, cell, int, int, int) $self) impure inline_ref;

;; $TheLottery$_fun_balance
((slice, cell, int, int, int), slice) $TheLottery$_fun_balance((slice, cell, int, int, int) $self) impure inline_ref;

;; $TheLottery$_fun_totalGames
((slice, cell, int, int, int), int) $TheLottery$_fun_totalGames((slice, cell, int, int, int) $self) impure inline_ref;

;; $TheLottery$_fun_totalRevenue
((slice, cell, int, int, int), int) $TheLottery$_fun_totalRevenue((slice, cell, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TheLottery$_fun_forward
((slice, cell, int, int, int), ()) $TheLottery$_fun_forward((slice, cell, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TheLottery$_fun_notify
((slice, cell, int, int, int), ()) $TheLottery$_fun_notify((slice, cell, int, int, int) $self, cell $body) impure inline;

;; $TheLottery$_fun_owner
((slice, cell, int, int, int), slice) $TheLottery$_fun_owner((slice, cell, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline;

;; $Player$_constructor_address_bit
((slice, int)) $Player$_constructor_address_bit(slice address, int bit) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
