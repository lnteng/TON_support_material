#include "imports/stdlib.fc";
#include "constants.fc";

global int data::claimed;
global slice data::airdrop;
global slice data::entry;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    data::claimed = ds~load_uint(1);
    ifnot (data::claimed) {
        data::airdrop = ds~load_msg_addr();
        data::entry = ds;
    }
}

() set_claimed() impure {
    set_data(begin_cell().store_uint(1, 1).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    load_data();
    throw_if(error::already_claimed, data::claimed);
    throw_unless(error::wrong_sender, equal_slices(cs~load_msg_addr(), data::airdrop));
    set_claimed();

    int query_id = in_msg_body~load_uint(64);

    raw_reserve(const::min_balance, 0);
    
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(data::airdrop)
        .store_coins(0)
        .store_uint(0, 107)
        .store_uint(op::process_claim, 32)
        .store_uint(query_id, 64)
        .store_slice(data::entry)
    .end_cell(), 128);
}

(int) get_claimed() method_id {
    load_data();
    return data::claimed;
}
