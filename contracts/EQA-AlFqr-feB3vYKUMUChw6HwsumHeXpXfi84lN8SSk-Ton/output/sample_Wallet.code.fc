#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Wallet.headers.fc";
#include "sample_Wallet.stdlib.fc";
#include "sample_Wallet.constants.fc";
#include "sample_Wallet.storage.fc";

;;
;; Contract Wallet functions
;;

(slice, int) $Wallet$_contract_init(slice $owner, int $seqno) impure inline_ref {
    var (($self'owner, $self'seqno)) = (null(), null());
    $self'owner = $owner;
    $self'seqno = $seqno;
    return ($self'owner, $self'seqno);
}

;;
;; Receivers of a Contract Wallet
;;

((slice, int), ()) $Wallet$_internal_text_deef9acb8331f24c2e8364d595ac6606494859b25aa37e7a0f71fc79e6b37955((slice, int) $self) impure inline {
    var ($self'owner, $self'seqno) = $self;
    throw_unless(36287, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode_body($self'owner, 0, 128, __gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2()));
    return (($self'owner, $self'seqno), ());
}

(((slice, int)), ()) %$Wallet$_internal_empty((slice, int) $self) impure inline {
    var ($self'owner, $self'seqno) = $self;
    throw(0);
    return (($self'owner, $self'seqno), ());
}

(((slice, int)), ()) $Wallet$_internal_binary_NewOwner((slice, int) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'seqno) = $self;
    var ($msg'owner) = $msg;
    throw_unless(36287, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'owner = $msg'owner;
    return (($self'owner, $self'seqno), ());
}

;;
;; Get methods of a Contract Wallet
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmdscYyUhRYi6f1B351TFkJYGzyaomW6p97MGdQucWgu79";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Wallet
;;

((slice, int), int) $Wallet$_contract_router_internal((slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Wallet$_internal_empty();
        return (self, true);
    }
    
    ;; Receive NewOwner message
    if (op == 2457) {
        var msg = in_msg~$NewOwner$_load();
        self~$Wallet$_internal_binary_NewOwner(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "get" message
        if (text_op == 0xdeef9acb8331f24c2e8364d595ac6606494859b25aa37e7a0f71fc79e6b37955) {
            self~$Wallet$_internal_text_deef9acb8331f24c2e8364d595ac6606494859b25aa37e7a0f71fc79e6b37955();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Wallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$Wallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Wallet$_contract_store(self);
}
