{"name":"MintWar","code":"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","abi":"{\"name\":\"MintWar\",\"types\":[{\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},{\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"MintEvent\",\"header\":1428761267,\"fields\":[{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"rate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"points\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"MintJetton\",\"header\":710663172,\"fields\":[{\"name\":\"rate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"AccountState\",\"header\":null,\"fields\":[{\"name\":\"points\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"fees\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"totalPoints\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"totalFees\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]}],\"receivers\":[{\"receiver\":\"internal\",\"message\":{\"kind\":\"empty\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"any\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"MintJetton\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"text\",\"text\":\"ClaimFee\"}}],\"getters\":[{\"name\":\"get_points_by_address\",\"arguments\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"get_shares_by_address\",\"arguments\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"get_totalPoints\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"get_all_accounts\",\"arguments\":[],\"returnType\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"uint\",\"valueFormat\":256}},{\"name\":\"get_account_state\",\"arguments\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"AccountState\",\"optional\":false}}],\"errors\":{\"2\":{\"message\":\"Stack undeflow\"},\"3\":{\"message\":\"Stack overflow\"},\"4\":{\"message\":\"Integer overflow\"},\"5\":{\"message\":\"Integer out of expected range\"},\"6\":{\"message\":\"Invalid opcode\"},\"7\":{\"message\":\"Type check error\"},\"8\":{\"message\":\"Cell overflow\"},\"9\":{\"message\":\"Cell underflow\"},\"10\":{\"message\":\"Dictionary error\"},\"13\":{\"message\":\"Out of gas error\"},\"32\":{\"message\":\"Method ID not found\"},\"34\":{\"message\":\"Action is invalid or not supported\"},\"37\":{\"message\":\"Not enough TON\"},\"38\":{\"message\":\"Not enough extra-currencies\"},\"128\":{\"message\":\"Null reference exception\"},\"129\":{\"message\":\"Invalid serialization prefix\"},\"130\":{\"message\":\"Invalid incoming message\"},\"131\":{\"message\":\"Constraints error\"},\"132\":{\"message\":\"Access denied\"},\"133\":{\"message\":\"Contract stopped\"},\"134\":{\"message\":\"Invalid argument\"},\"135\":{\"message\":\"Code of a contract was not found\"},\"136\":{\"message\":\"Invalid address\"},\"137\":{\"message\":\"Masterchain support is not enabled for this contract\"},\"6852\":{\"message\":\"Mint not start\"},\"29082\":{\"message\":\"Mint ended\"},\"40176\":{\"message\":\"Invalid rate\"},\"55259\":{\"message\":\"Insufficient fee\"},\"59445\":{\"message\":\"Only owner can claim fee\"}},\"interfaces\":[\"org.ton.introspection.v0\",\"org.ton.abi.ipfs.v0\",\"org.ton.deploy.lazy.v0\",\"org.ton.chain.workchain.v0\"]}","init":{"kind":"direct","args":[{"name":"admin","type":{"kind":"simple","type":"address","optional":false}},{"name":"mintStartAt","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"mintEndAt","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"prefix":{"bits":1,"value":0},"deployment":{"kind":"system-cell","system":"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"}},"sources":{"sources/imports/stdlib.fc":"OzsgU3RhbmRhcmQgbGlicmFyeSBmb3IgZnVuQw0KOzsNCg0Key0NCiAgIyBUdXBsZSBtYW5pcHVsYXRpb24gcHJpbWl0aXZlcw0KICBUaGUgbmFtZXMgYW5kIHRoZSB0eXBlcyBhcmUgbW9zdGx5IHNlbGYtZXhwbGFpbmluZy4NCiAgU2VlIFtwb2x5bW9yaGlzbSB3aXRoIGZvcmFsbF0oaHR0cHM6Ly90b24ub3JnL2RvY3MvIy9mdW5jL2Z1bmN0aW9ucz9pZD1wb2x5bW9ycGhpc20td2l0aC1mb3JhbGwpDQogIGZvciBtb3JlIGluZm8gb24gdGhlIHBvbHltb3JwaGljIGZ1bmN0aW9ucy4NCg0KICBOb3RlIHRoYXQgY3VycmVudGx5IHZhbHVlcyBvZiBhdG9taWMgdHlwZSBgdHVwbGVgIGNhbid0IGJlIGNhc3QgdG8gY29tcG9zaXRlIHR1cGxlIHR5cGUgKGUuZy4gYFtpbnQsIGNlbGxdYCkNCiAgYW5kIHZpc2UgdmVyc2EuDQotfQ0KDQp7LQ0KICAjIExpc3Atc3R5bGUgbGlzdHMNCg0KICBMaXN0cyBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgbmVzdGVkIDItZWxlbWVudHMgdHVwbGVzLg0KICBFbXB0eSBsaXN0IGlzIGNvbnZlbnRpb25hbGx5IHJlcHJlc2VudGVkIGFzIFRWTSBgbnVsbGAgdmFsdWUgKGl0IGNhbiBiZSBvYnRhaW5lZCBieSBjYWxsaW5nIFtudWxsKCldKS4NCiAgRm9yIGV4YW1wbGUsIHR1cGxlIGAoMSwgKDIsICgzLCBudWxsKSkpYCByZXByZXNlbnRzIGxpc3QgYFsxLCAyLCAzXWAuIEVsZW1lbnRzIG9mIGEgbGlzdCBjYW4gYmUgb2YgZGlmZmVyZW50IHR5cGVzLg0KLX0NCg0KOzs7IEFkZHMgYW4gZWxlbWVudCB0byB0aGUgYmVnaW5uaW5nIG9mIGxpc3Atc3R5bGUgbGlzdC4NCmZvcmFsbCBYIC0+IHR1cGxlIGNvbnMoWCBoZWFkLCB0dXBsZSB0YWlsKSBhc20gIkNPTlMiOw0KDQo7OzsgRXh0cmFjdHMgdGhlIGhlYWQgYW5kIHRoZSB0YWlsIG9mIGxpc3Atc3R5bGUgbGlzdC4NCmZvcmFsbCBYIC0+IChYLCB0dXBsZSkgdW5jb25zKHR1cGxlIGxpc3QpIGFzbSAiVU5DT05TIjsNCg0KOzs7IEV4dHJhY3RzIHRoZSB0YWlsIGFuZCB0aGUgaGVhZCBvZiBsaXNwLXN0eWxlIGxpc3QuDQpmb3JhbGwgWCAtPiAodHVwbGUsIFgpIGxpc3RfbmV4dCh0dXBsZSBsaXN0KSBhc20oIC0+IDEgMCkgIlVOQ09OUyI7DQoNCjs7OyBSZXR1cm5zIHRoZSBoZWFkIG9mIGxpc3Atc3R5bGUgbGlzdC4NCmZvcmFsbCBYIC0+IFggY2FyKHR1cGxlIGxpc3QpIGFzbSAiQ0FSIjsNCg0KOzs7IFJldHVybnMgdGhlIHRhaWwgb2YgbGlzcC1zdHlsZSBsaXN0Lg0KdHVwbGUgY2RyKHR1cGxlIGxpc3QpIGFzbSAiQ0RSIjsNCg0KOzs7IENyZWF0ZXMgdHVwbGUgd2l0aCB6ZXJvIGVsZW1lbnRzLg0KdHVwbGUgZW1wdHlfdHVwbGUoKSBhc20gIk5JTCI7DQoNCjs7OyBBcHBlbmRzIGEgdmFsdWUgYHhgIHRvIGEgYFR1cGxlIHQgPSAoeDEsIC4uLiwgeG4pYCwgYnV0IG9ubHkgaWYgdGhlIHJlc3VsdGluZyBgVHVwbGUgdCcgPSAoeDEsIC4uLiwgeG4sIHgpYA0KOzs7IGlzIG9mIGxlbmd0aCBhdCBtb3N0IDI1NS4gT3RoZXJ3aXNlIHRocm93cyBhIHR5cGUgY2hlY2sgZXhjZXB0aW9uLg0KZm9yYWxsIFggLT4gdHVwbGUgdHB1c2godHVwbGUgdCwgWCB2YWx1ZSkgYXNtICJUUFVTSCI7DQpmb3JhbGwgWCAtPiAodHVwbGUsICgpKSB+dHB1c2godHVwbGUgdCwgWCB2YWx1ZSkgYXNtICJUUFVTSCI7DQoNCjs7OyBDcmVhdGVzIGEgdHVwbGUgb2YgbGVuZ3RoIG9uZSB3aXRoIGdpdmVuIGFyZ3VtZW50IGFzIGVsZW1lbnQuDQpmb3JhbGwgWCAtPiBbWF0gc2luZ2xlKFggeCkgYXNtICJTSU5HTEUiOw0KDQo7OzsgVW5wYWNrcyBhIHR1cGxlIG9mIGxlbmd0aCBvbmUNCmZvcmFsbCBYIC0+IFggdW5zaW5nbGUoW1hdIHQpIGFzbSAiVU5TSU5HTEUiOw0KDQo7OzsgQ3JlYXRlcyBhIHR1cGxlIG9mIGxlbmd0aCB0d28gd2l0aCBnaXZlbiBhcmd1bWVudHMgYXMgZWxlbWVudHMuDQpmb3JhbGwgWCwgWSAtPiBbWCwgWV0gcGFpcihYIHgsIFkgeSkgYXNtICJQQUlSIjsNCg0KOzs7IFVucGFja3MgYSB0dXBsZSBvZiBsZW5ndGggdHdvDQpmb3JhbGwgWCwgWSAtPiAoWCwgWSkgdW5wYWlyKFtYLCBZXSB0KSBhc20gIlVOUEFJUiI7DQoNCjs7OyBDcmVhdGVzIGEgdHVwbGUgb2YgbGVuZ3RoIHRocmVlIHdpdGggZ2l2ZW4gYXJndW1lbnRzIGFzIGVsZW1lbnRzLg0KZm9yYWxsIFgsIFksIFogLT4gW1gsIFksIFpdIHRyaXBsZShYIHgsIFkgeSwgWiB6KSBhc20gIlRSSVBMRSI7DQoNCjs7OyBVbnBhY2tzIGEgdHVwbGUgb2YgbGVuZ3RoIHRocmVlDQpmb3JhbGwgWCwgWSwgWiAtPiAoWCwgWSwgWikgdW50cmlwbGUoW1gsIFksIFpdIHQpIGFzbSAiVU5UUklQTEUiOw0KDQo7OzsgQ3JlYXRlcyBhIHR1cGxlIG9mIGxlbmd0aCBmb3VyIHdpdGggZ2l2ZW4gYXJndW1lbnRzIGFzIGVsZW1lbnRzLg0KZm9yYWxsIFgsIFksIFosIFcgLT4gW1gsIFksIFosIFddIHR1cGxlNChYIHgsIFkgeSwgWiB6LCBXIHcpIGFzbSAiNCBUVVBMRSI7DQoNCjs7OyBVbnBhY2tzIGEgdHVwbGUgb2YgbGVuZ3RoIGZvdXINCmZvcmFsbCBYLCBZLCBaLCBXIC0+IChYLCBZLCBaLCBXKSB1bnR1cGxlNChbWCwgWSwgWiwgV10gdCkgYXNtICI0IFVOVFVQTEUiOw0KDQo7OzsgUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBhIHR1cGxlICh3aXRoIHVua25vd24gZWxlbWVudCB0eXBlcykuDQpmb3JhbGwgWCAtPiBYIGZpcnN0KHR1cGxlIHQpIGFzbSAiRklSU1QiOw0KDQo7OzsgUmV0dXJucyB0aGUgc2Vjb25kIGVsZW1lbnQgb2YgYSB0dXBsZSAod2l0aCB1bmtub3duIGVsZW1lbnQgdHlwZXMpLg0KZm9yYWxsIFggLT4gWCBzZWNvbmQodHVwbGUgdCkgYXNtICJTRUNPTkQiOw0KDQo7OzsgUmV0dXJucyB0aGUgdGhpcmQgZWxlbWVudCBvZiBhIHR1cGxlICh3aXRoIHVua25vd24gZWxlbWVudCB0eXBlcykuDQpmb3JhbGwgWCAtPiBYIHRoaXJkKHR1cGxlIHQpIGFzbSAiVEhJUkQiOw0KDQo7OzsgUmV0dXJucyB0aGUgZm91cnRoIGVsZW1lbnQgb2YgYSB0dXBsZSAod2l0aCB1bmtub3duIGVsZW1lbnQgdHlwZXMpLg0KZm9yYWxsIFggLT4gWCBmb3VydGgodHVwbGUgdCkgYXNtICIzIElOREVYIjsNCg0KOzs7IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYSBwYWlyIHR1cGxlLg0KZm9yYWxsIFgsIFkgLT4gWCBwYWlyX2ZpcnN0KFtYLCBZXSBwKSBhc20gIkZJUlNUIjsNCg0KOzs7IFJldHVybnMgdGhlIHNlY29uZCBlbGVtZW50IG9mIGEgcGFpciB0dXBsZS4NCmZvcmFsbCBYLCBZIC0+IFkgcGFpcl9zZWNvbmQoW1gsIFldIHApIGFzbSAiU0VDT05EIjsNCg0KOzs7IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYSB0cmlwbGUgdHVwbGUuDQpmb3JhbGwgWCwgWSwgWiAtPiBYIHRyaXBsZV9maXJzdChbWCwgWSwgWl0gcCkgYXNtICJGSVJTVCI7DQoNCjs7OyBSZXR1cm5zIHRoZSBzZWNvbmQgZWxlbWVudCBvZiBhIHRyaXBsZSB0dXBsZS4NCmZvcmFsbCBYLCBZLCBaIC0+IFkgdHJpcGxlX3NlY29uZChbWCwgWSwgWl0gcCkgYXNtICJTRUNPTkQiOw0KDQo7OzsgUmV0dXJucyB0aGUgdGhpcmQgZWxlbWVudCBvZiBhIHRyaXBsZSB0dXBsZS4NCmZvcmFsbCBYLCBZLCBaIC0+IFogdHJpcGxlX3RoaXJkKFtYLCBZLCBaXSBwKSBhc20gIlRISVJEIjsNCg0KDQo7OzsgUHVzaCBudWxsIGVsZW1lbnQgKGNhc3RlZCB0byBnaXZlbiB0eXBlKQ0KOzs7IEJ5IHRoZSBUVk0gdHlwZSBgTnVsbGAgRnVuQyByZXByZXNlbnRzIGFic2VuY2Ugb2YgYSB2YWx1ZSBvZiBzb21lIGF0b21pYyB0eXBlLg0KOzs7IFNvIGBudWxsYCBjYW4gYWN0dWFsbHkgaGF2ZSBhbnkgYXRvbWljIHR5cGUuDQpmb3JhbGwgWCAtPiBYIG51bGwoKSBhc20gIlBVU0hOVUxMIjsNCg0KOzs7IE1vdmVzIGEgdmFyaWFibGUgW3hdIHRvIHRoZSB0b3Agb2YgdGhlIHN0YWNrDQpmb3JhbGwgWCAtPiAoWCwgKCkpIH5pbXB1cmVfdG91Y2goWCB4KSBpbXB1cmUgYXNtICJOT1AiOw0KDQoNCg0KOzs7IFJldHVybnMgdGhlIGN1cnJlbnQgVW5peCB0aW1lIGFzIGFuIEludGVnZXINCmludCBub3coKSBhc20gIk5PVyI7DQoNCjs7OyBSZXR1cm5zIHRoZSBpbnRlcm5hbCBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IHNtYXJ0IGNvbnRyYWN0IGFzIGEgU2xpY2Ugd2l0aCBhIGBNc2dBZGRyZXNzSW50YC4NCjs7OyBJZiBuZWNlc3NhcnksIGl0IGNhbiBiZSBwYXJzZWQgZnVydGhlciB1c2luZyBwcmltaXRpdmVzIHN1Y2ggYXMgW3BhcnNlX3N0ZF9hZGRyXS4NCnNsaWNlIG15X2FkZHJlc3MoKSBhc20gIk1ZQUREUiI7DQoNCjs7OyBSZXR1cm5zIHRoZSBiYWxhbmNlIG9mIHRoZSBzbWFydCBjb250cmFjdCBhcyBhIHR1cGxlIGNvbnNpc3Rpbmcgb2YgYW4gaW50DQo7OzsgKGJhbGFuY2UgaW4gbmFub3RvbmNvaW5zKSBhbmQgYSBgY2VsbGANCjs7OyAoYSBkaWN0aW9uYXJ5IHdpdGggMzItYml0IGtleXMgcmVwcmVzZW50aW5nIHRoZSBiYWxhbmNlIG9mICJleHRyYSBjdXJyZW5jaWVzIikNCjs7OyBhdCB0aGUgc3RhcnQgb2YgQ29tcHV0YXRpb24gUGhhc2UuDQo7OzsgTm90ZSB0aGF0IFJBVyBwcmltaXRpdmVzIHN1Y2ggYXMgW3NlbmRfcmF3X21lc3NhZ2VdIGRvIG5vdCB1cGRhdGUgdGhpcyBmaWVsZC4NCltpbnQsIGNlbGxdIGdldF9iYWxhbmNlKCkgYXNtICJCQUxBTkNFIjsNCg0KOzs7IFJldHVybnMgdGhlIGxvZ2ljYWwgdGltZSBvZiB0aGUgY3VycmVudCB0cmFuc2FjdGlvbi4NCmludCBjdXJfbHQoKSBhc20gIkxUSU1FIjsNCg0KOzs7IFJldHVybnMgdGhlIHN0YXJ0aW5nIGxvZ2ljYWwgdGltZSBvZiB0aGUgY3VycmVudCBibG9jay4NCmludCBibG9ja19sdCgpIGFzbSAiQkxPQ0tMVCI7DQoNCjs7OyBDb21wdXRlcyB0aGUgcmVwcmVzZW50YXRpb24gaGFzaCBvZiBhIGBjZWxsYCBbY10gYW5kIHJldHVybnMgaXQgYXMgYSAyNTYtYml0IHVuc2lnbmVkIGludGVnZXIgYHhgLg0KOzs7IFVzZWZ1bCBmb3Igc2lnbmluZyBhbmQgY2hlY2tpbmcgc2lnbmF0dXJlcyBvZiBhcmJpdHJhcnkgZW50aXRpZXMgcmVwcmVzZW50ZWQgYnkgYSB0cmVlIG9mIGNlbGxzLg0KaW50IGNlbGxfaGFzaChjZWxsIGMpIGFzbSAiSEFTSENVIjsNCg0KOzs7IENvbXB1dGVzIHRoZSBoYXNoIG9mIGEgYHNsaWNlIHNgIGFuZCByZXR1cm5zIGl0IGFzIGEgMjU2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIGB4YC4NCjs7OyBUaGUgcmVzdWx0IGlzIHRoZSBzYW1lIGFzIGlmIGFuIG9yZGluYXJ5IGNlbGwgY29udGFpbmluZyBvbmx5IGRhdGEgYW5kIHJlZmVyZW5jZXMgZnJvbSBgc2AgaGFkIGJlZW4gY3JlYXRlZA0KOzs7IGFuZCBpdHMgaGFzaCBjb21wdXRlZCBieSBbY2VsbF9oYXNoXS4NCmludCBzbGljZV9oYXNoKHNsaWNlIHMpIGFzbSAiSEFTSFNVIjsNCg0KOzs7IENvbXB1dGVzIHNoYTI1NiBvZiB0aGUgZGF0YSBiaXRzIG9mIGBzbGljZWAgW3NdLiBJZiB0aGUgYml0IGxlbmd0aCBvZiBgc2AgaXMgbm90IGRpdmlzaWJsZSBieSBlaWdodCwNCjs7OyB0aHJvd3MgYSBjZWxsIHVuZGVyZmxvdyBleGNlcHRpb24uIFRoZSBoYXNoIHZhbHVlIGlzIHJldHVybmVkIGFzIGEgMjU2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIGB4YC4NCmludCBzdHJpbmdfaGFzaChzbGljZSBzKSBhc20gIlNIQTI1NlUiOw0KDQp7LQ0KICAjIFNpZ25hdHVyZSBjaGVja3MNCi19DQoNCjs7OyBDaGVja3MgdGhlIEVkMjU1MTktYHNpZ25hdHVyZWAgb2YgYSBgaGFzaGAgKGEgMjU2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyLCB1c3VhbGx5IGNvbXB1dGVkIGFzIHRoZSBoYXNoIG9mIHNvbWUgZGF0YSkNCjs7OyB1c2luZyBbcHVibGljX2tleV0gKGFsc28gcmVwcmVzZW50ZWQgYnkgYSAyNTYtYml0IHVuc2lnbmVkIGludGVnZXIpLg0KOzs7IFRoZSBzaWduYXR1cmUgbXVzdCBjb250YWluIGF0IGxlYXN0IDUxMiBkYXRhIGJpdHM7IG9ubHkgdGhlIGZpcnN0IDUxMiBiaXRzIGFyZSB1c2VkLg0KOzs7IFRoZSByZXN1bHQgaXMgYOKIkjFgIGlmIHRoZSBzaWduYXR1cmUgaXMgdmFsaWQsIGAwYCBvdGhlcndpc2UuDQo7OzsgTm90ZSB0aGF0IGBDSEtTSUdOVWAgY3JlYXRlcyBhIDI1Ni1iaXQgc2xpY2Ugd2l0aCB0aGUgaGFzaCBhbmQgY2FsbHMgYENIS1NJR05TYC4NCjs7OyBUaGF0IGlzLCBpZiBbaGFzaF0gaXMgY29tcHV0ZWQgYXMgdGhlIGhhc2ggb2Ygc29tZSBkYXRhLCB0aGVzZSBkYXRhIGFyZSBoYXNoZWQgdHdpY2UsDQo7OzsgdGhlIHNlY29uZCBoYXNoaW5nIG9jY3VycmluZyBpbnNpZGUgYENIS1NJR05TYC4NCmludCBjaGVja19zaWduYXR1cmUoaW50IGhhc2gsIHNsaWNlIHNpZ25hdHVyZSwgaW50IHB1YmxpY19rZXkpIGFzbSAiQ0hLU0lHTlUiOw0KDQo7OzsgQ2hlY2tzIHdoZXRoZXIgW3NpZ25hdHVyZV0gaXMgYSB2YWxpZCBFZDI1NTE5LXNpZ25hdHVyZSBvZiB0aGUgZGF0YSBwb3J0aW9uIG9mIGBzbGljZSBkYXRhYCB1c2luZyBgcHVibGljX2tleWAsDQo7Ozsgc2ltaWxhcmx5IHRvIFtjaGVja19zaWduYXR1cmVdLg0KOzs7IElmIHRoZSBiaXQgbGVuZ3RoIG9mIFtkYXRhXSBpcyBub3QgZGl2aXNpYmxlIGJ5IGVpZ2h0LCB0aHJvd3MgYSBjZWxsIHVuZGVyZmxvdyBleGNlcHRpb24uDQo7OzsgVGhlIHZlcmlmaWNhdGlvbiBvZiBFZDI1NTE5IHNpZ25hdHVyZXMgaXMgdGhlIHN0YW5kYXJkIG9uZSwNCjs7OyB3aXRoIHNoYTI1NiB1c2VkIHRvIHJlZHVjZSBbZGF0YV0gdG8gdGhlIDI1Ni1iaXQgbnVtYmVyIHRoYXQgaXMgYWN0dWFsbHkgc2lnbmVkLg0KaW50IGNoZWNrX2RhdGFfc2lnbmF0dXJlKHNsaWNlIGRhdGEsIHNsaWNlIHNpZ25hdHVyZSwgaW50IHB1YmxpY19rZXkpIGFzbSAiQ0hLU0lHTlMiOw0KDQp7LS0tDQogICMgQ29tcHV0YXRpb24gb2YgYm9jIHNpemUNCiAgVGhlIHByaW1pdGl2ZXMgYmVsb3cgbWF5IGJlIHVzZWZ1bCBmb3IgY29tcHV0aW5nIHN0b3JhZ2UgZmVlcyBvZiB1c2VyLXByb3ZpZGVkIGRhdGEuDQotfQ0KDQo7OzsgUmV0dXJucyBgKHgsIHksIHosIC0xKWAgb3IgYChudWxsLCBudWxsLCBudWxsLCAwKWAuDQo7OzsgUmVjdXJzaXZlbHkgY29tcHV0ZXMgdGhlIGNvdW50IG9mIGRpc3RpbmN0IGNlbGxzIGB4YCwgZGF0YSBiaXRzIGB5YCwgYW5kIGNlbGwgcmVmZXJlbmNlcyBgemANCjs7OyBpbiB0aGUgREFHIHJvb3RlZCBhdCBgY2VsbGAgW2NdLCBlZmZlY3RpdmVseSByZXR1cm5pbmcgdGhlIHRvdGFsIHN0b3JhZ2UgdXNlZCBieSB0aGlzIERBRyB0YWtpbmcgaW50byBhY2NvdW50DQo7OzsgdGhlIGlkZW50aWZpY2F0aW9uIG9mIGVxdWFsIGNlbGxzLg0KOzs7IFRoZSB2YWx1ZXMgb2YgYHhgLCBgeWAsIGFuZCBgemAgYXJlIGNvbXB1dGVkIGJ5IGEgZGVwdGgtZmlyc3QgdHJhdmVyc2FsIG9mIHRoaXMgREFHLA0KOzs7IHdpdGggYSBoYXNoIHRhYmxlIG9mIHZpc2l0ZWQgY2VsbCBoYXNoZXMgdXNlZCB0byBwcmV2ZW50IHZpc2l0cyBvZiBhbHJlYWR5LXZpc2l0ZWQgY2VsbHMuDQo7OzsgVGhlIHRvdGFsIGNvdW50IG9mIHZpc2l0ZWQgY2VsbHMgYHhgIGNhbm5vdCBleGNlZWQgbm9uLW5lZ2F0aXZlIFttYXhfY2VsbHNdOw0KOzs7IG90aGVyd2lzZSB0aGUgY29tcHV0YXRpb24gaXMgYWJvcnRlZCBiZWZvcmUgdmlzaXRpbmcgdGhlIGAobWF4X2NlbGxzICsgMSlgLXN0IGNlbGwgYW5kDQo7OzsgYSB6ZXJvIGZsYWcgaXMgcmV0dXJuZWQgdG8gaW5kaWNhdGUgZmFpbHVyZS4gSWYgW2NdIGlzIGBudWxsYCwgcmV0dXJucyBgeCA9IHkgPSB6ID0gMGAuDQooaW50LCBpbnQsIGludCkgY29tcHV0ZV9kYXRhX3NpemUoY2VsbCBjLCBpbnQgbWF4X2NlbGxzKSBpbXB1cmUgYXNtICJDREFUQVNJWkUiOw0KDQo7OzsgU2ltaWxhciB0byBbY29tcHV0ZV9kYXRhX3NpemU/XSwgYnV0IGFjY2VwdGluZyBhIGBzbGljZWAgW3NdIGluc3RlYWQgb2YgYSBgY2VsbGAuDQo7OzsgVGhlIHJldHVybmVkIHZhbHVlIG9mIGB4YCBkb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCB0aGUgY2VsbCB0aGF0IGNvbnRhaW5zIHRoZSBgc2xpY2VgIFtzXSBpdHNlbGY7DQo7OzsgaG93ZXZlciwgdGhlIGRhdGEgYml0cyBhbmQgdGhlIGNlbGwgcmVmZXJlbmNlcyBvZiBbc10gYXJlIGFjY291bnRlZCBmb3IgaW4gYHlgIGFuZCBgemAuDQooaW50LCBpbnQsIGludCkgc2xpY2VfY29tcHV0ZV9kYXRhX3NpemUoc2xpY2UgcywgaW50IG1heF9jZWxscykgaW1wdXJlIGFzbSAiU0RBVEFTSVpFIjsNCg0KOzs7IEEgbm9uLXF1aWV0IHZlcnNpb24gb2YgW2NvbXB1dGVfZGF0YV9zaXplP10gdGhhdCB0aHJvd3MgYSBjZWxsIG92ZXJmbG93IGV4Y2VwdGlvbiAoYDhgKSBvbiBmYWlsdXJlLg0KKGludCwgaW50LCBpbnQsIGludCkgY29tcHV0ZV9kYXRhX3NpemU/KGNlbGwgYywgaW50IG1heF9jZWxscykgYXNtICJDREFUQVNJWkVRIE5VTExTV0FQSUZOT1QyIE5VTExTV0FQSUZOT1QiOw0KDQo7OzsgQSBub24tcXVpZXQgdmVyc2lvbiBvZiBbc2xpY2VfY29tcHV0ZV9kYXRhX3NpemU/XSB0aGF0IHRocm93cyBhIGNlbGwgb3ZlcmZsb3cgZXhjZXB0aW9uICg4KSBvbiBmYWlsdXJlLg0KKGludCwgaW50LCBpbnQsIGludCkgc2xpY2VfY29tcHV0ZV9kYXRhX3NpemU/KGNlbGwgYywgaW50IG1heF9jZWxscykgYXNtICJTREFUQVNJWkVRIE5VTExTV0FQSUZOT1QyIE5VTExTV0FQSUZOT1QiOw0KDQo7OzsgVGhyb3dzIGFuIGV4Y2VwdGlvbiB3aXRoIGV4aXRfY29kZSBleGNubyBpZiBjb25kIGlzIG5vdCAwIChjb21tZW50ZWQgc2luY2UgaW1wbGVtZW50ZWQgaW4gY29tcGlsYXRvcikNCjs7ICgpIHRocm93X2lmKGludCBleGNubywgaW50IGNvbmQpIGltcHVyZSBhc20gIlRIUk9XQVJHSUYiOw0KDQp7LS0NCiAgIyBEZWJ1ZyBwcmltaXRpdmVzDQogIE9ubHkgd29ya3MgZm9yIGxvY2FsIFRWTSBleGVjdXRpb24gd2l0aCBkZWJ1ZyBsZXZlbCB2ZXJib3NpdHkNCi19DQo7OzsgRHVtcHMgdGhlIHN0YWNrIChhdCBtb3N0IHRoZSB0b3AgMjU1IHZhbHVlcykgYW5kIHNob3dzIHRoZSB0b3RhbCBzdGFjayBkZXB0aC4NCigpIGR1bXBfc3RhY2soKSBpbXB1cmUgYXNtICJEVU1QU1RLIjsNCg0Key0NCiAgIyBQZXJzaXN0ZW50IHN0b3JhZ2Ugc2F2ZSBhbmQgbG9hZA0KLX0NCg0KOzs7IFJldHVybnMgdGhlIHBlcnNpc3RlbnQgY29udHJhY3Qgc3RvcmFnZSBjZWxsLiBJdCBjYW4gYmUgcGFyc2VkIG9yIG1vZGlmaWVkIHdpdGggc2xpY2UgYW5kIGJ1aWxkZXIgcHJpbWl0aXZlcyBsYXRlci4NCmNlbGwgZ2V0X2RhdGEoKSBhc20gImM0IFBVU0giOw0KDQo7OzsgU2V0cyBgY2VsbGAgW2NdIGFzIHBlcnNpc3RlbnQgY29udHJhY3QgZGF0YS4gWW91IGNhbiB1cGRhdGUgcGVyc2lzdGVudCBjb250cmFjdCBzdG9yYWdlIHdpdGggdGhpcyBwcmltaXRpdmUuDQooKSBzZXRfZGF0YShjZWxsIGMpIGltcHVyZSBhc20gImM0IFBPUCI7DQoNCnstDQogICMgQ29udGludWF0aW9uIHByaW1pdGl2ZXMNCi19DQo7OzsgVXN1YWxseSBgYzNgIGhhcyBhIGNvbnRpbnVhdGlvbiBpbml0aWFsaXplZCBieSB0aGUgd2hvbGUgY29kZSBvZiB0aGUgY29udHJhY3QuIEl0IGlzIHVzZWQgZm9yIGZ1bmN0aW9uIGNhbGxzLg0KOzs7IFRoZSBwcmltaXRpdmUgcmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZSBvZiBgYzNgLg0KY29udCBnZXRfYzMoKSBpbXB1cmUgYXNtICJjMyBQVVNIIjsNCg0KOzs7IFVwZGF0ZXMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYGMzYC4gVXN1YWxseSwgaXQgaXMgdXNlZCBmb3IgdXBkYXRpbmcgc21hcnQgY29udHJhY3QgY29kZSBpbiBydW4tdGltZS4NCjs7OyBOb3RlIHRoYXQgYWZ0ZXIgZXhlY3V0aW9uIG9mIHRoaXMgcHJpbWl0aXZlIHRoZSBjdXJyZW50IGNvZGUNCjs7OyAoYW5kIHRoZSBzdGFjayBvZiByZWN1cnNpdmUgZnVuY3Rpb24gY2FsbHMpIHdvbid0IGNoYW5nZSwNCjs7OyBidXQgYW55IG90aGVyIGZ1bmN0aW9uIGNhbGwgd2lsbCB1c2UgYSBmdW5jdGlvbiBmcm9tIHRoZSBuZXcgY29kZS4NCigpIHNldF9jMyhjb250IGMpIGltcHVyZSBhc20gImMzIFBPUCI7DQoNCjs7OyBUcmFuc2Zvcm1zIGEgYHNsaWNlYCBbc10gaW50byBhIHNpbXBsZSBvcmRpbmFyeSBjb250aW51YXRpb24gYGNgLCB3aXRoIGBjLmNvZGUgPSBzYCBhbmQgYW4gZW1wdHkgc3RhY2sgYW5kIHNhdmVsaXN0Lg0KY29udCBibGVzcyhzbGljZSBzKSBpbXB1cmUgYXNtICJCTEVTUyI7DQoNCnstLS0NCiAgIyBHYXMgcmVsYXRlZCBwcmltaXRpdmVzDQotfQ0KDQo7OzsgU2V0cyBjdXJyZW50IGdhcyBsaW1pdCBgZ2xgIHRvIGl0cyBtYXhpbWFsIGFsbG93ZWQgdmFsdWUgYGdtYCwgYW5kIHJlc2V0cyB0aGUgZ2FzIGNyZWRpdCBgZ2NgIHRvIHplcm8sDQo7OzsgZGVjcmVhc2luZyB0aGUgdmFsdWUgb2YgYGdyYCBieSBgZ2NgIGluIHRoZSBwcm9jZXNzLg0KOzs7IEluIG90aGVyIHdvcmRzLCB0aGUgY3VycmVudCBzbWFydCBjb250cmFjdCBhZ3JlZXMgdG8gYnV5IHNvbWUgZ2FzIHRvIGZpbmlzaCB0aGUgY3VycmVudCB0cmFuc2FjdGlvbi4NCjs7OyBUaGlzIGFjdGlvbiBpcyByZXF1aXJlZCB0byBwcm9jZXNzIGV4dGVybmFsIG1lc3NhZ2VzLCB3aGljaCBicmluZyBubyB2YWx1ZSAoaGVuY2Ugbm8gZ2FzKSB3aXRoIHRoZW1zZWx2ZXMuDQo7OzsNCjs7OyBGb3IgbW9yZSBkZXRhaWxzIGNoZWNrIFthY2NlcHRfbWVzc2FnZSBlZmZlY3RzXShodHRwczovL3Rvbi5vcmcvZG9jcy8jL3NtYXJ0LWNvbnRyYWN0cy9hY2NlcHQpLg0KKCkgYWNjZXB0X21lc3NhZ2UoKSBpbXB1cmUgYXNtICJBQ0NFUFQiOw0KDQo7OzsgU2V0cyBjdXJyZW50IGdhcyBsaW1pdCBgZ2xgIHRvIHRoZSBtaW5pbXVtIG9mIGxpbWl0IGFuZCBgZ21gLCBhbmQgcmVzZXRzIHRoZSBnYXMgY3JlZGl0IGBnY2AgdG8gemVyby4NCjs7OyBJZiB0aGUgZ2FzIGNvbnN1bWVkIHNvIGZhciAoaW5jbHVkaW5nIHRoZSBwcmVzZW50IGluc3RydWN0aW9uKSBleGNlZWRzIHRoZSByZXN1bHRpbmcgdmFsdWUgb2YgYGdsYCwNCjs7OyBhbiAodW5oYW5kbGVkKSBvdXQgb2YgZ2FzIGV4Y2VwdGlvbiBpcyB0aHJvd24gYmVmb3JlIHNldHRpbmcgbmV3IGdhcyBsaW1pdHMuDQo7OzsgTm90aWNlIHRoYXQgW3NldF9nYXNfbGltaXRdIHdpdGggYW4gYXJndW1lbnQgYGxpbWl0IOKJpSAyXjYzIOKIkiAxYCBpcyBlcXVpdmFsZW50IHRvIFthY2NlcHRfbWVzc2FnZV0uDQooKSBzZXRfZ2FzX2xpbWl0KGludCBsaW1pdCkgaW1wdXJlIGFzbSAiU0VUR0FTTElNSVQiOw0KDQo7OzsgQ29tbWl0cyB0aGUgY3VycmVudCBzdGF0ZSBvZiByZWdpc3RlcnMgYGM0YCAo4oCccGVyc2lzdGVudCBkYXRh4oCdKSBhbmQgYGM1YCAo4oCcYWN0aW9uc+KAnSkNCjs7OyBzbyB0aGF0IHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBpcyBjb25zaWRlcmVkIOKAnHN1Y2Nlc3NmdWzigJ0gd2l0aCB0aGUgc2F2ZWQgdmFsdWVzIGV2ZW4gaWYgYW4gZXhjZXB0aW9uDQo7OzsgaW4gQ29tcHV0YXRpb24gUGhhc2UgaXMgdGhyb3duIGxhdGVyLg0KKCkgY29tbWl0KCkgaW1wdXJlIGFzbSAiQ09NTUlUIjsNCg0KOzs7IE5vdCBpbXBsZW1lbnRlZA0KOzsoKSBidXlfZ2FzKGludCBncmFtKSBpbXB1cmUgYXNtICJCVVlHQVMiOw0KDQo7OzsgQ29tcHV0ZXMgdGhlIGFtb3VudCBvZiBnYXMgdGhhdCBjYW4gYmUgYm91Z2h0IGZvciBgYW1vdW50YCBuYW5vVE9OcywNCjs7OyBhbmQgc2V0cyBgZ2xgIGFjY29yZGluZ2x5IGluIHRoZSBzYW1lIHdheSBhcyBbc2V0X2dhc19saW1pdF0uDQooKSBidXlfZ2FzKGludCBhbW91bnQpIGltcHVyZSBhc20gIkJVWUdBUyI7DQoNCjs7OyBDb21wdXRlcyB0aGUgbWluaW11bSBvZiB0d28gaW50ZWdlcnMgW3hdIGFuZCBbeV0uDQppbnQgbWluKGludCB4LCBpbnQgeSkgYXNtICJNSU4iOw0KDQo7OzsgQ29tcHV0ZXMgdGhlIG1heGltdW0gb2YgdHdvIGludGVnZXJzIFt4XSBhbmQgW3ldLg0KaW50IG1heChpbnQgeCwgaW50IHkpIGFzbSAiTUFYIjsNCg0KOzs7IFNvcnRzIHR3byBpbnRlZ2Vycy4NCihpbnQsIGludCkgbWlubWF4KGludCB4LCBpbnQgeSkgYXNtICJNSU5NQVgiOw0KDQo7OzsgQ29tcHV0ZXMgdGhlIGFic29sdXRlIHZhbHVlIG9mIGFuIGludGVnZXIgW3hdLg0KaW50IGFicyhpbnQgeCkgYXNtICJBQlMiOw0KDQp7LQ0KICAjIFNsaWNlIHByaW1pdGl2ZXMNCg0KICBJdCBpcyBzYWlkIHRoYXQgYSBwcmltaXRpdmUgX2xvYWRzXyBzb21lIGRhdGEsDQogIGlmIGl0IHJldHVybnMgdGhlIGRhdGEgYW5kIHRoZSByZW1haW5kZXIgb2YgdGhlIHNsaWNlDQogIChzbyBpdCBjYW4gYWxzbyBiZSB1c2VkIGFzIFttb2RpZnlpbmcgbWV0aG9kXShodHRwczovL3Rvbi5vcmcvZG9jcy8jL2Z1bmMvc3RhdGVtZW50cz9pZD1tb2RpZnlpbmctbWV0aG9kcykpLg0KDQogIEl0IGlzIHNhaWQgdGhhdCBhIHByaW1pdGl2ZSBfcHJlbG9hZHNfIHNvbWUgZGF0YSwgaWYgaXQgcmV0dXJucyBvbmx5IHRoZSBkYXRhDQogIChpdCBjYW4gYmUgdXNlZCBhcyBbbm9uLW1vZGlmeWluZyBtZXRob2RdKGh0dHBzOi8vdG9uLm9yZy9kb2NzLyMvZnVuYy9zdGF0ZW1lbnRzP2lkPW5vbi1tb2RpZnlpbmctbWV0aG9kcykpLg0KDQogIFVubGVzcyBvdGhlcndpc2Ugc3RhdGVkLCBsb2FkaW5nIGFuZCBwcmVsb2FkaW5nIHByaW1pdGl2ZXMgcmVhZCB0aGUgZGF0YSBmcm9tIGEgcHJlZml4IG9mIHRoZSBzbGljZS4NCi19DQoNCg0KOzs7IENvbnZlcnRzIGEgYGNlbGxgIFtjXSBpbnRvIGEgYHNsaWNlYC4gTm90aWNlIHRoYXQgW2NdIG11c3QgYmUgZWl0aGVyIGFuIG9yZGluYXJ5IGNlbGwsDQo7Ozsgb3IgYW4gZXhvdGljIGNlbGwgKHNlZSBbVFZNLnBkZl0oaHR0cHM6Ly90b24tYmxvY2tjaGFpbi5naXRodWIuaW8vZG9jcy90dm0ucGRmKSwgMy4xLjIpDQo7Ozsgd2hpY2ggaXMgYXV0b21hdGljYWxseSBsb2FkZWQgdG8geWllbGQgYW4gb3JkaW5hcnkgY2VsbCBgYydgLCBjb252ZXJ0ZWQgaW50byBhIGBzbGljZWAgYWZ0ZXJ3YXJkcy4NCnNsaWNlIGJlZ2luX3BhcnNlKGNlbGwgYykgYXNtICJDVE9TIjsNCg0KOzs7IENoZWNrcyBpZiBbc10gaXMgZW1wdHkuIElmIG5vdCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4NCigpIGVuZF9wYXJzZShzbGljZSBzKSBpbXB1cmUgYXNtICJFTkRTIjsNCg0KOzs7IExvYWRzIHRoZSBmaXJzdCByZWZlcmVuY2UgZnJvbSB0aGUgc2xpY2UuDQooc2xpY2UsIGNlbGwpIGxvYWRfcmVmKHNsaWNlIHMpIGFzbSggLT4gMSAwKSAiTERSRUYiOw0KDQo7OzsgUHJlbG9hZHMgdGhlIGZpcnN0IHJlZmVyZW5jZSBmcm9tIHRoZSBzbGljZS4NCmNlbGwgcHJlbG9hZF9yZWYoc2xpY2UgcykgYXNtICJQTERSRUYiOw0KDQogIHstIEZ1bmN0aW9ucyBiZWxvdyBhcmUgY29tbWVudGVkIGJlY2F1c2UgYXJlIGltcGxlbWVudGVkIG9uIGNvbXBpbGF0b3IgbGV2ZWwgZm9yIG9wdGltaXNhdGlvbiAtfQ0KDQo7OzsgTG9hZHMgYSBzaWduZWQgW2xlbl0tYml0IGludGVnZXIgZnJvbSBhIHNsaWNlIFtzXS4NCjs7IChzbGljZSwgaW50KSB+bG9hZF9pbnQoc2xpY2UgcywgaW50IGxlbikgYXNtKHMgbGVuIC0+IDEgMCkgIkxESVgiOw0KDQo7OzsgTG9hZHMgYW4gdW5zaWduZWQgW2xlbl0tYml0IGludGVnZXIgZnJvbSBhIHNsaWNlIFtzXS4NCjs7IChzbGljZSwgaW50KSB+bG9hZF91aW50KHNsaWNlIHMsIGludCBsZW4pIGFzbSggLT4gMSAwKSAiTERVWCI7DQoNCjs7OyBQcmVsb2FkcyBhIHNpZ25lZCBbbGVuXS1iaXQgaW50ZWdlciBmcm9tIGEgc2xpY2UgW3NdLg0KOzsgaW50IHByZWxvYWRfaW50KHNsaWNlIHMsIGludCBsZW4pIGFzbSAiUExESVgiOw0KDQo7OzsgUHJlbG9hZHMgYW4gdW5zaWduZWQgW2xlbl0tYml0IGludGVnZXIgZnJvbSBhIHNsaWNlIFtzXS4NCjs7IGludCBwcmVsb2FkX3VpbnQoc2xpY2UgcywgaW50IGxlbikgYXNtICJQTERVWCI7DQoNCjs7OyBMb2FkcyB0aGUgZmlyc3QgYDAg4omkIGxlbiDiiaQgMTAyM2AgYml0cyBmcm9tIHNsaWNlIFtzXSBpbnRvIGEgc2VwYXJhdGUgYHNsaWNlIHMnJ2AuDQo7OyAoc2xpY2UsIHNsaWNlKSBsb2FkX2JpdHMoc2xpY2UgcywgaW50IGxlbikgYXNtKHMgbGVuIC0+IDEgMCkgIkxEU0xJQ0VYIjsNCg0KOzs7IFByZWxvYWRzIHRoZSBmaXJzdCBgMCDiiaQgbGVuIOKJpCAxMDIzYCBiaXRzIGZyb20gc2xpY2UgW3NdIGludG8gYSBzZXBhcmF0ZSBgc2xpY2UgcycnYC4NCjs7IHNsaWNlIHByZWxvYWRfYml0cyhzbGljZSBzLCBpbnQgbGVuKSBhc20gIlBMRFNMSUNFWCI7DQoNCjs7OyBMb2FkcyBzZXJpYWxpemVkIGFtb3VudCBvZiBUb25Db2lucyAoYW55IHVuc2lnbmVkIGludGVnZXIgdXAgdG8gYDJeMTI4IC0gMWApLg0KKHNsaWNlLCBpbnQpIGxvYWRfZ3JhbXMoc2xpY2UgcykgYXNtKCAtPiAxIDApICJMREdSQU1TIjsNCihzbGljZSwgaW50KSBsb2FkX2NvaW5zKHNsaWNlIHMpIGFzbSggLT4gMSAwKSAiTERHUkFNUyI7DQoNCjs7OyBSZXR1cm5zIGFsbCBidXQgdGhlIGZpcnN0IGAwIOKJpCBsZW4g4omkIDEwMjNgIGJpdHMgb2YgYHNsaWNlYCBbc10uDQpzbGljZSBza2lwX2JpdHMoc2xpY2UgcywgaW50IGxlbikgYXNtICJTRFNLSVBGSVJTVCI7DQooc2xpY2UsICgpKSB+c2tpcF9iaXRzKHNsaWNlIHMsIGludCBsZW4pIGFzbSAiU0RTS0lQRklSU1QiOw0KDQo7OzsgUmV0dXJucyB0aGUgZmlyc3QgYDAg4omkIGxlbiDiiaQgMTAyM2AgYml0cyBvZiBgc2xpY2VgIFtzXS4NCnNsaWNlIGZpcnN0X2JpdHMoc2xpY2UgcywgaW50IGxlbikgYXNtICJTRENVVEZJUlNUIjsNCg0KOzs7IFJldHVybnMgYWxsIGJ1dCB0aGUgbGFzdCBgMCDiiaQgbGVuIOKJpCAxMDIzYCBiaXRzIG9mIGBzbGljZWAgW3NdLg0Kc2xpY2Ugc2tpcF9sYXN0X2JpdHMoc2xpY2UgcywgaW50IGxlbikgYXNtICJTRFNLSVBMQVNUIjsNCihzbGljZSwgKCkpIH5za2lwX2xhc3RfYml0cyhzbGljZSBzLCBpbnQgbGVuKSBhc20gIlNEU0tJUExBU1QiOw0KDQo7OzsgUmV0dXJucyB0aGUgbGFzdCBgMCDiiaQgbGVuIOKJpCAxMDIzYCBiaXRzIG9mIGBzbGljZWAgW3NdLg0Kc2xpY2Ugc2xpY2VfbGFzdChzbGljZSBzLCBpbnQgbGVuKSBhc20gIlNEQ1VUTEFTVCI7DQoNCjs7OyBMb2FkcyBhIGRpY3Rpb25hcnkgYERgIChIYXNoTWFwRSkgZnJvbSBgc2xpY2VgIFtzXS4NCjs7OyAocmV0dXJucyBgbnVsbGAgaWYgYG5vdGhpbmdgIGNvbnN0cnVjdG9yIGlzIHVzZWQpLg0KKHNsaWNlLCBjZWxsKSBsb2FkX2RpY3Qoc2xpY2UgcykgYXNtKCAtPiAxIDApICJMRERJQ1QiOw0KDQo7OzsgUHJlbG9hZHMgYSBkaWN0aW9uYXJ5IGBEYCBmcm9tIGBzbGljZWAgW3NdLg0KY2VsbCBwcmVsb2FkX2RpY3Qoc2xpY2UgcykgYXNtICJQTERESUNUIjsNCg0KOzs7IExvYWRzIGEgZGljdGlvbmFyeSBhcyBbbG9hZF9kaWN0XSwgYnV0IHJldHVybnMgb25seSB0aGUgcmVtYWluZGVyIG9mIHRoZSBzbGljZS4NCnNsaWNlIHNraXBfZGljdChzbGljZSBzKSBhc20gIlNLSVBESUNUIjsNCg0KOzs7IExvYWRzIChNYXliZSBeQ2VsbCkgZnJvbSBgc2xpY2VgIFtzXS4NCjs7OyBJbiBvdGhlciB3b3JkcyBsb2FkcyAxIGJpdCBhbmQgaWYgaXQgaXMgdHJ1ZQ0KOzs7IGxvYWRzIGZpcnN0IHJlZiBhbmQgcmV0dXJuIGl0IHdpdGggc2xpY2UgcmVtYWluZGVyDQo7Ozsgb3RoZXJ3aXNlIHJldHVybnMgYG51bGxgIGFuZCBzbGljZSByZW1haW5kZXINCihzbGljZSwgY2VsbCkgbG9hZF9tYXliZV9yZWYoc2xpY2UgcykgYXNtKCAtPiAxIDApICJMRE9QVFJFRiI7DQoNCjs7OyBQcmVsb2FkcyAoTWF5YmUgXkNlbGwpIGZyb20gYHNsaWNlYCBbc10uDQpjZWxsIHByZWxvYWRfbWF5YmVfcmVmKHNsaWNlIHMpIGFzbSAiUExET1BUUkVGIjsNCg0KDQo7OzsgUmV0dXJucyB0aGUgZGVwdGggb2YgYGNlbGxgIFtjXS4NCjs7OyBJZiBbY10gaGFzIG5vIHJlZmVyZW5jZXMsIHRoZW4gcmV0dXJuIGAwYDsNCjs7OyBvdGhlcndpc2UgdGhlIHJldHVybmVkIHZhbHVlIGlzIG9uZSBwbHVzIHRoZSBtYXhpbXVtIG9mIGRlcHRocyBvZiBjZWxscyByZWZlcnJlZCB0byBmcm9tIFtjXS4NCjs7OyBJZiBbY10gaXMgYSBgbnVsbGAgaW5zdGVhZCBvZiBhIGNlbGwsIHJldHVybnMgemVyby4NCmludCBjZWxsX2RlcHRoKGNlbGwgYykgYXNtICJDREVQVEgiOw0KDQoNCnstDQogICMgU2xpY2Ugc2l6ZSBwcmltaXRpdmVzDQotfQ0KDQo7OzsgUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJlZmVyZW5jZXMgaW4gYHNsaWNlYCBbc10uDQppbnQgc2xpY2VfcmVmcyhzbGljZSBzKSBhc20gIlNSRUZTIjsNCg0KOzs7IFJldHVybnMgdGhlIG51bWJlciBvZiBkYXRhIGJpdHMgaW4gYHNsaWNlYCBbc10uDQppbnQgc2xpY2VfYml0cyhzbGljZSBzKSBhc20gIlNCSVRTIjsNCg0KOzs7IFJldHVybnMgYm90aCB0aGUgbnVtYmVyIG9mIGRhdGEgYml0cyBhbmQgdGhlIG51bWJlciBvZiByZWZlcmVuY2VzIGluIGBzbGljZWAgW3NdLg0KKGludCwgaW50KSBzbGljZV9iaXRzX3JlZnMoc2xpY2UgcykgYXNtICJTQklUUkVGUyI7DQoNCjs7OyBDaGVja3Mgd2hldGhlciBhIGBzbGljZWAgW3NdIGlzIGVtcHR5IChpLmUuLCBjb250YWlucyBubyBiaXRzIG9mIGRhdGEgYW5kIG5vIGNlbGwgcmVmZXJlbmNlcykuDQppbnQgc2xpY2VfZW1wdHk/KHNsaWNlIHMpIGFzbSAiU0VNUFRZIjsNCg0KOzs7IENoZWNrcyB3aGV0aGVyIGBzbGljZWAgW3NdIGhhcyBubyBiaXRzIG9mIGRhdGEuDQppbnQgc2xpY2VfZGF0YV9lbXB0eT8oc2xpY2UgcykgYXNtICJTREVNUFRZIjsNCg0KOzs7IENoZWNrcyB3aGV0aGVyIGBzbGljZWAgW3NdIGhhcyBubyByZWZlcmVuY2VzLg0KaW50IHNsaWNlX3JlZnNfZW1wdHk/KHNsaWNlIHMpIGFzbSAiU1JFTVBUWSI7DQoNCjs7OyBSZXR1cm5zIHRoZSBkZXB0aCBvZiBgc2xpY2VgIFtzXS4NCjs7OyBJZiBbc10gaGFzIG5vIHJlZmVyZW5jZXMsIHRoZW4gcmV0dXJucyBgMGA7DQo7Ozsgb3RoZXJ3aXNlIHRoZSByZXR1cm5lZCB2YWx1ZSBpcyBvbmUgcGx1cyB0aGUgbWF4aW11bSBvZiBkZXB0aHMgb2YgY2VsbHMgcmVmZXJyZWQgdG8gZnJvbSBbc10uDQppbnQgc2xpY2VfZGVwdGgoc2xpY2UgcykgYXNtICJTREVQVEgiOw0KDQp7LQ0KICAjIEJ1aWxkZXIgc2l6ZSBwcmltaXRpdmVzDQotfQ0KDQo7OzsgUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNlbGwgcmVmZXJlbmNlcyBhbHJlYWR5IHN0b3JlZCBpbiBgYnVpbGRlcmAgW2JdDQppbnQgYnVpbGRlcl9yZWZzKGJ1aWxkZXIgYikgYXNtICJCUkVGUyI7DQoNCjs7OyBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF0YSBiaXRzIGFscmVhZHkgc3RvcmVkIGluIGBidWlsZGVyYCBbYl0uDQppbnQgYnVpbGRlcl9iaXRzKGJ1aWxkZXIgYikgYXNtICJCQklUUyI7DQoNCjs7OyBSZXR1cm5zIHRoZSBkZXB0aCBvZiBgYnVpbGRlcmAgW2JdLg0KOzs7IElmIG5vIGNlbGwgcmVmZXJlbmNlcyBhcmUgc3RvcmVkIGluIFtiXSwgdGhlbiByZXR1cm5zIDA7DQo7Ozsgb3RoZXJ3aXNlIHRoZSByZXR1cm5lZCB2YWx1ZSBpcyBvbmUgcGx1cyB0aGUgbWF4aW11bSBvZiBkZXB0aHMgb2YgY2VsbHMgcmVmZXJyZWQgdG8gZnJvbSBbYl0uDQppbnQgYnVpbGRlcl9kZXB0aChidWlsZGVyIGIpIGFzbSAiQkRFUFRIIjsNCg0Key0NCiAgIyBCdWlsZGVyIHByaW1pdGl2ZXMNCiAgSXQgaXMgc2FpZCB0aGF0IGEgcHJpbWl0aXZlIF9zdG9yZXNfIGEgdmFsdWUgYHhgIGludG8gYSBidWlsZGVyIGBiYA0KICBpZiBpdCByZXR1cm5zIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgYnVpbGRlciBgYidgIHdpdGggdGhlIHZhbHVlIGB4YCBzdG9yZWQgYXQgdGhlIGVuZCBvZiBpdC4NCiAgSXQgY2FuIGJlIHVzZWQgYXMgW25vbi1tb2RpZnlpbmcgbWV0aG9kXShodHRwczovL3Rvbi5vcmcvZG9jcy8jL2Z1bmMvc3RhdGVtZW50cz9pZD1ub24tbW9kaWZ5aW5nLW1ldGhvZHMpLg0KDQogIEFsbCB0aGUgcHJpbWl0aXZlcyBiZWxvdyBmaXJzdCBjaGVjayB3aGV0aGVyIHRoZXJlIGlzIGVub3VnaCBzcGFjZSBpbiB0aGUgYGJ1aWxkZXJgLA0KICBhbmQgb25seSB0aGVuIGNoZWNrIHRoZSByYW5nZSBvZiB0aGUgdmFsdWUgYmVpbmcgc2VyaWFsaXplZC4NCi19DQoNCjs7OyBDcmVhdGVzIGEgbmV3IGVtcHR5IGBidWlsZGVyYC4NCmJ1aWxkZXIgYmVnaW5fY2VsbCgpIGFzbSAiTkVXQyI7DQoNCjs7OyBDb252ZXJ0cyBhIGBidWlsZGVyYCBpbnRvIGFuIG9yZGluYXJ5IGBjZWxsYC4NCmNlbGwgZW5kX2NlbGwoYnVpbGRlciBiKSBhc20gIkVOREMiOw0KDQo7OzsgU3RvcmVzIGEgcmVmZXJlbmNlIHRvIGBjZWxsYCBbY10gaW50byBgYnVpbGRlcmAgW2JdLg0KYnVpbGRlciBzdG9yZV9yZWYoYnVpbGRlciBiLCBjZWxsIGMpIGFzbShjIGIpICJTVFJFRiI7DQoNCjs7OyBTdG9yZXMgYW4gdW5zaWduZWQgW2xlbl0tYml0IGludGVnZXIgYHhgIGludG8gYGJgIGZvciBgMCDiiaQgbGVuIOKJpCAyNTZgLg0KOzsgYnVpbGRlciBzdG9yZV91aW50KGJ1aWxkZXIgYiwgaW50IHgsIGludCBsZW4pIGFzbSh4IGIgbGVuKSAiU1RVWCI7DQoNCjs7OyBTdG9yZXMgYSBzaWduZWQgW2xlbl0tYml0IGludGVnZXIgYHhgIGludG8gYGJgIGZvcmAgMCDiiaQgbGVuIOKJpCAyNTdgLg0KOzsgYnVpbGRlciBzdG9yZV9pbnQoYnVpbGRlciBiLCBpbnQgeCwgaW50IGxlbikgYXNtKHggYiBsZW4pICJTVElYIjsNCg0KDQo7OzsgU3RvcmVzIGBzbGljZWAgW3NdIGludG8gYGJ1aWxkZXJgIFtiXQ0KYnVpbGRlciBzdG9yZV9zbGljZShidWlsZGVyIGIsIHNsaWNlIHMpIGFzbSAiU1RTTElDRVIiOw0KDQo7OzsgU3RvcmVzIChzZXJpYWxpemVzKSBhbiBpbnRlZ2VyIFt4XSBpbiB0aGUgcmFuZ2UgYDAuLjJeMTI4IOKIkiAxYCBpbnRvIGBidWlsZGVyYCBbYl0uDQo7OzsgVGhlIHNlcmlhbGl6YXRpb24gb2YgW3hdIGNvbnNpc3RzIG9mIGEgNC1iaXQgdW5zaWduZWQgYmlnLWVuZGlhbiBpbnRlZ2VyIGBsYCwNCjs7OyB3aGljaCBpcyB0aGUgc21hbGxlc3QgaW50ZWdlciBgbCDiiaUgMGAsIHN1Y2ggdGhhdCBgeCA8IDJeOGxgLA0KOzs7IGZvbGxvd2VkIGJ5IGFuIGA4bGAtYml0IHVuc2lnbmVkIGJpZy1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgW3hdLg0KOzs7IElmIFt4XSBkb2VzIG5vdCBiZWxvbmcgdG8gdGhlIHN1cHBvcnRlZCByYW5nZSwgYSByYW5nZSBjaGVjayBleGNlcHRpb24gaXMgdGhyb3duLg0KOzs7DQo7OzsgU3RvcmUgYW1vdW50cyBvZiBUb25Db2lucyB0byB0aGUgYnVpbGRlciBhcyBWYXJVSW50ZWdlciAxNg0KYnVpbGRlciBzdG9yZV9ncmFtcyhidWlsZGVyIGIsIGludCB4KSBhc20gIlNUR1JBTVMiOw0KYnVpbGRlciBzdG9yZV9jb2lucyhidWlsZGVyIGIsIGludCB4KSBhc20gIlNUR1JBTVMiOw0KDQo7OzsgU3RvcmVzIGRpY3Rpb25hcnkgYERgIHJlcHJlc2VudGVkIGJ5IGBjZWxsYCBbY10gb3IgYG51bGxgIGludG8gYGJ1aWxkZXJgIFtiXS4NCjs7OyBJbiBvdGhlciB3b3Jkcywgc3RvcmVzIGEgYDFgLWJpdCBhbmQgYSByZWZlcmVuY2UgdG8gW2NdIGlmIFtjXSBpcyBub3QgYG51bGxgIGFuZCBgMGAtYml0IG90aGVyd2lzZS4NCmJ1aWxkZXIgc3RvcmVfZGljdChidWlsZGVyIGIsIGNlbGwgYykgYXNtKGMgYikgIlNURElDVCI7DQoNCjs7OyBTdG9yZXMgKE1heWJlIF5DZWxsKSB0byBidWlsZGVyOg0KOzs7IGlmIGNlbGwgaXMgbnVsbCBzdG9yZSAxIHplcm8gYml0DQo7Ozsgb3RoZXJ3aXNlIHN0b3JlIDEgdHJ1ZSBiaXQgYW5kIHJlZiB0byBjZWxsDQpidWlsZGVyIHN0b3JlX21heWJlX3JlZihidWlsZGVyIGIsIGNlbGwgYykgYXNtKGMgYikgIlNUT1BUUkVGIjsNCg0KDQp7LQ0KICAjIEFkZHJlc3MgbWFuaXB1bGF0aW9uIHByaW1pdGl2ZXMNCiAgVGhlIGFkZHJlc3MgbWFuaXB1bGF0aW9uIHByaW1pdGl2ZXMgbGlzdGVkIGJlbG93IHNlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgdmFsdWVzIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIFRMLUIgc2NoZW1lOg0KICBgYGBUTC1CDQogIGFkZHJfbm9uZSQwMCA9IE1zZ0FkZHJlc3NFeHQ7DQogIGFkZHJfZXh0ZXJuJDAxIGxlbjooIyMgOCkgZXh0ZXJuYWxfYWRkcmVzczooYml0cyBsZW4pDQogICAgICAgICAgICAgICA9IE1zZ0FkZHJlc3NFeHQ7DQogIGFueWNhc3RfaW5mbyRfIGRlcHRoOigjPD0gMzApIHsgZGVwdGggPj0gMSB9DQogICAgcmV3cml0ZV9wZng6KGJpdHMgZGVwdGgpID0gQW55Y2FzdDsNCiAgYWRkcl9zdGQkMTAgYW55Y2FzdDooTWF5YmUgQW55Y2FzdCkNCiAgICB3b3JrY2hhaW5faWQ6aW50OCBhZGRyZXNzOmJpdHMyNTYgPSBNc2dBZGRyZXNzSW50Ow0KICBhZGRyX3ZhciQxMSBhbnljYXN0OihNYXliZSBBbnljYXN0KSBhZGRyX2xlbjooIyMgOSkNCiAgICB3b3JrY2hhaW5faWQ6aW50MzIgYWRkcmVzczooYml0cyBhZGRyX2xlbikgPSBNc2dBZGRyZXNzSW50Ow0KICBfIF86TXNnQWRkcmVzc0ludCA9IE1zZ0FkZHJlc3M7DQogIF8gXzpNc2dBZGRyZXNzRXh0ID0gTXNnQWRkcmVzczsNCg0KICBpbnRfbXNnX2luZm8kMCBpaHJfZGlzYWJsZWQ6Qm9vbCBib3VuY2U6Qm9vbCBib3VuY2VkOkJvb2wNCiAgICBzcmM6TXNnQWRkcmVzcyBkZXN0Ok1zZ0FkZHJlc3NJbnQNCiAgICB2YWx1ZTpDdXJyZW5jeUNvbGxlY3Rpb24gaWhyX2ZlZTpHcmFtcyBmd2RfZmVlOkdyYW1zDQogICAgY3JlYXRlZF9sdDp1aW50NjQgY3JlYXRlZF9hdDp1aW50MzIgPSBDb21tb25Nc2dJbmZvUmVsYXhlZDsNCiAgZXh0X291dF9tc2dfaW5mbyQxMSBzcmM6TXNnQWRkcmVzcyBkZXN0Ok1zZ0FkZHJlc3NFeHQNCiAgICBjcmVhdGVkX2x0OnVpbnQ2NCBjcmVhdGVkX2F0OnVpbnQzMiA9IENvbW1vbk1zZ0luZm9SZWxheGVkOw0KICBgYGANCiAgQSBkZXNlcmlhbGl6ZWQgYE1zZ0FkZHJlc3NgIGlzIHJlcHJlc2VudGVkIGJ5IGEgdHVwbGUgYHRgIGFzIGZvbGxvd3M6DQoNCiAgLSBgYWRkcl9ub25lYCBpcyByZXByZXNlbnRlZCBieSBgdCA9ICgwKWAsDQogICAgaS5lLiwgYSB0dXBsZSBjb250YWluaW5nIGV4YWN0bHkgb25lIGludGVnZXIgZXF1YWwgdG8gemVyby4NCiAgLSBgYWRkcl9leHRlcm5gIGlzIHJlcHJlc2VudGVkIGJ5IGB0ID0gKDEsIHMpYCwNCiAgICB3aGVyZSBzbGljZSBgc2AgY29udGFpbnMgdGhlIGZpZWxkIGBleHRlcm5hbF9hZGRyZXNzYC4gSW4gb3RoZXIgd29yZHMsIGANCiAgICB0YCBpcyBhIHBhaXIgKGEgdHVwbGUgY29uc2lzdGluZyBvZiB0d28gZW50cmllcyksIGNvbnRhaW5pbmcgYW4gaW50ZWdlciBlcXVhbCB0byBvbmUgYW5kIHNsaWNlIGBzYC4NCiAgLSBgYWRkcl9zdGRgIGlzIHJlcHJlc2VudGVkIGJ5IGB0ID0gKDIsIHUsIHgsIHMpYCwNCiAgICB3aGVyZSBgdWAgaXMgZWl0aGVyIGEgYG51bGxgIChpZiBgYW55Y2FzdGAgaXMgYWJzZW50KSBvciBhIHNsaWNlIGBzJ2AgY29udGFpbmluZyBgcmV3cml0ZV9wZnhgIChpZiBhbnljYXN0IGlzIHByZXNlbnQpLg0KICAgIE5leHQsIGludGVnZXIgYHhgIGlzIHRoZSBgd29ya2NoYWluX2lkYCwgYW5kIHNsaWNlIGBzYCBjb250YWlucyB0aGUgYWRkcmVzcy4NCiAgLSBgYWRkcl92YXJgIGlzIHJlcHJlc2VudGVkIGJ5IGB0ID0gKDMsIHUsIHgsIHMpYCwNCiAgICB3aGVyZSBgdWAsIGB4YCwgYW5kIGBzYCBoYXZlIHRoZSBzYW1lIG1lYW5pbmcgYXMgZm9yIGBhZGRyX3N0ZGAuDQotfQ0KDQo7OzsgTG9hZHMgZnJvbSBzbGljZSBbc10gdGhlIG9ubHkgcHJlZml4IHRoYXQgaXMgYSB2YWxpZCBgTXNnQWRkcmVzc2AsDQo7OzsgYW5kIHJldHVybnMgYm90aCB0aGlzIHByZWZpeCBgcydgIGFuZCB0aGUgcmVtYWluZGVyIGBzJydgIG9mIFtzXSBhcyBzbGljZXMuDQooc2xpY2UsIHNsaWNlKSBsb2FkX21zZ19hZGRyKHNsaWNlIHMpIGFzbSggLT4gMSAwKSAiTERNU0dBRERSIjsNCg0KOzs7IERlY29tcG9zZXMgc2xpY2UgW3NdIGNvbnRhaW5pbmcgYSB2YWxpZCBgTXNnQWRkcmVzc2AgaW50byBhIGB0dXBsZSB0YCB3aXRoIHNlcGFyYXRlIGZpZWxkcyBvZiB0aGlzIGBNc2dBZGRyZXNzYC4NCjs7OyBJZiBbc10gaXMgbm90IGEgdmFsaWQgYE1zZ0FkZHJlc3NgLCBhIGNlbGwgZGVzZXJpYWxpemF0aW9uIGV4Y2VwdGlvbiBpcyB0aHJvd24uDQp0dXBsZSBwYXJzZV9hZGRyKHNsaWNlIHMpIGFzbSAiUEFSU0VNU0dBRERSIjsNCg0KOzs7IFBhcnNlcyBzbGljZSBbc10gY29udGFpbmluZyBhIHZhbGlkIGBNc2dBZGRyZXNzSW50YCAodXN1YWxseSBhIGBtc2dfYWRkcl9zdGRgKSwNCjs7OyBhcHBsaWVzIHJld3JpdGluZyBmcm9tIHRoZSBhbnljYXN0IChpZiBwcmVzZW50KSB0byB0aGUgc2FtZS1sZW5ndGggcHJlZml4IG9mIHRoZSBhZGRyZXNzLA0KOzs7IGFuZCByZXR1cm5zIGJvdGggdGhlIHdvcmtjaGFpbiBhbmQgdGhlIDI1Ni1iaXQgYWRkcmVzcyBhcyBpbnRlZ2Vycy4NCjs7OyBJZiB0aGUgYWRkcmVzcyBpcyBub3QgMjU2LWJpdCwgb3IgaWYgW3NdIGlzIG5vdCBhIHZhbGlkIHNlcmlhbGl6YXRpb24gb2YgYE1zZ0FkZHJlc3NJbnRgLA0KOzs7IHRocm93cyBhIGNlbGwgZGVzZXJpYWxpemF0aW9uIGV4Y2VwdGlvbi4NCihpbnQsIGludCkgcGFyc2Vfc3RkX2FkZHIoc2xpY2UgcykgYXNtICJSRVdSSVRFU1REQUREUiI7DQoNCjs7OyBBIHZhcmlhbnQgb2YgW3BhcnNlX3N0ZF9hZGRyXSB0aGF0IHJldHVybnMgdGhlIChyZXdyaXR0ZW4pIGFkZHJlc3MgYXMgYSBzbGljZSBbc10sDQo7OzsgZXZlbiBpZiBpdCBpcyBub3QgZXhhY3RseSAyNTYgYml0IGxvbmcgKHJlcHJlc2VudGVkIGJ5IGEgYG1zZ19hZGRyX3ZhcmApLg0KKGludCwgc2xpY2UpIHBhcnNlX3Zhcl9hZGRyKHNsaWNlIHMpIGFzbSAiUkVXUklURVZBUkFERFIiOw0KDQp7LQ0KICAjIERpY3Rpb25hcnkgcHJpbWl0aXZlcw0KLX0NCg0KDQo7OzsgU2V0cyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIFtrZXlfbGVuXS1iaXQga2V5IHNpZ25lZCBpbmRleCBpbiBkaWN0aW9uYXJ5IFtkaWN0XSB0byBbdmFsdWVdIChjZWxsKSwNCjs7OyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIGRpY3Rpb25hcnkuDQpjZWxsIGlkaWN0X3NldF9yZWYoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBjZWxsIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElTRVRSRUYiOw0KKGNlbGwsICgpKSB+aWRpY3Rfc2V0X3JlZihjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIGNlbGwgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSVNFVFJFRiI7DQoNCjs7OyBTZXRzIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggW2tleV9sZW5dLWJpdCBrZXkgdW5zaWduZWQgaW5kZXggaW4gZGljdGlvbmFyeSBbZGljdF0gdG8gW3ZhbHVlXSAoY2VsbCksDQo7OzsgYW5kIHJldHVybnMgdGhlIHJlc3VsdGluZyBkaWN0aW9uYXJ5Lg0KY2VsbCB1ZGljdF9zZXRfcmVmKGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCwgY2VsbCB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVU0VUUkVGIjsNCihjZWxsLCAoKSkgfnVkaWN0X3NldF9yZWYoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBjZWxsIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVFVTRVRSRUYiOw0KDQpjZWxsIGlkaWN0X2dldF9yZWYoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4KSBhc20oaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElHRVRPUFRSRUYiOw0KKGNlbGwsIGludCkgaWRpY3RfZ2V0X3JlZj8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4KSBhc20oaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElHRVRSRUYiICJOVUxMU1dBUElGTk9UIjsNCihjZWxsLCBpbnQpIHVkaWN0X2dldF9yZWY/KGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCkgYXNtKGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVR0VUUkVGIiAiTlVMTFNXQVBJRk5PVCI7DQooY2VsbCwgY2VsbCkgaWRpY3Rfc2V0X2dldF9yZWYoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBjZWxsIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElTRVRHRVRPUFRSRUYiOw0KKGNlbGwsIGNlbGwpIHVkaWN0X3NldF9nZXRfcmVmKGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCwgY2VsbCB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVU0VUR0VUT1BUUkVGIjsNCihjZWxsLCBpbnQpIGlkaWN0X2RlbGV0ZT8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4KSBhc20oaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElERUwiOw0KKGNlbGwsIGludCkgdWRpY3RfZGVsZXRlPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgpIGFzbShpbmRleCBkaWN0IGtleV9sZW4pICJESUNUVURFTCI7DQooc2xpY2UsIGludCkgaWRpY3RfZ2V0PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgpIGFzbShpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSUdFVCIgIk5VTExTV0FQSUZOT1QiOw0KKHNsaWNlLCBpbnQpIHVkaWN0X2dldD8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4KSBhc20oaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVFVHRVQiICJOVUxMU1dBUElGTk9UIjsNCihjZWxsLCBzbGljZSwgaW50KSBpZGljdF9kZWxldGVfZ2V0PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgpIGFzbShpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSURFTEdFVCIgIk5VTExTV0FQSUZOT1QiOw0KKGNlbGwsIHNsaWNlLCBpbnQpIHVkaWN0X2RlbGV0ZV9nZXQ/KGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCkgYXNtKGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVREVMR0VUIiAiTlVMTFNXQVBJRk5PVCI7DQooY2VsbCwgKHNsaWNlLCBpbnQpKSB+aWRpY3RfZGVsZXRlX2dldD8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4KSBhc20oaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElERUxHRVQiICJOVUxMU1dBUElGTk9UIjsNCihjZWxsLCAoc2xpY2UsIGludCkpIH51ZGljdF9kZWxldGVfZ2V0PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgpIGFzbShpbmRleCBkaWN0IGtleV9sZW4pICJESUNUVURFTEdFVCIgIk5VTExTV0FQSUZOT1QiOw0KY2VsbCB1ZGljdF9zZXQoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBzbGljZSB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVU0VUIjsNCihjZWxsLCAoKSkgfnVkaWN0X3NldChjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIHNsaWNlIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVFVTRVQiOw0KY2VsbCBpZGljdF9zZXQoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBzbGljZSB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RJU0VUIjsNCihjZWxsLCAoKSkgfmlkaWN0X3NldChjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIHNsaWNlIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElTRVQiOw0KY2VsbCBkaWN0X3NldChjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBzbGljZSBpbmRleCwgc2xpY2UgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUU0VUIjsNCihjZWxsLCAoKSkgfmRpY3Rfc2V0KGNlbGwgZGljdCwgaW50IGtleV9sZW4sIHNsaWNlIGluZGV4LCBzbGljZSB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RTRVQiOw0KKGNlbGwsIGludCkgdWRpY3RfYWRkPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIHNsaWNlIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVFVBREQiOw0KKGNlbGwsIGludCkgdWRpY3RfcmVwbGFjZT8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBzbGljZSB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVUkVQTEFDRSI7DQooY2VsbCwgaW50KSBpZGljdF9hZGQ/KGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCwgc2xpY2UgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSUFERCI7DQooY2VsbCwgaW50KSBpZGljdF9yZXBsYWNlPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIHNsaWNlIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVElSRVBMQUNFIjsNCmNlbGwgdWRpY3Rfc2V0X2J1aWxkZXIoY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgaW50IGluZGV4LCBidWlsZGVyIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVFVTRVRCIjsNCihjZWxsLCAoKSkgfnVkaWN0X3NldF9idWlsZGVyKGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCwgYnVpbGRlciB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RVU0VUQiI7DQpjZWxsIGlkaWN0X3NldF9idWlsZGVyKGNlbGwgZGljdCwgaW50IGtleV9sZW4sIGludCBpbmRleCwgYnVpbGRlciB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RJU0VUQiI7DQooY2VsbCwgKCkpIH5pZGljdF9zZXRfYnVpbGRlcihjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIGJ1aWxkZXIgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSVNFVEIiOw0KY2VsbCBkaWN0X3NldF9idWlsZGVyKGNlbGwgZGljdCwgaW50IGtleV9sZW4sIHNsaWNlIGluZGV4LCBidWlsZGVyIHZhbHVlKSBhc20odmFsdWUgaW5kZXggZGljdCBrZXlfbGVuKSAiRElDVFNFVEIiOw0KKGNlbGwsICgpKSB+ZGljdF9zZXRfYnVpbGRlcihjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBzbGljZSBpbmRleCwgYnVpbGRlciB2YWx1ZSkgYXNtKHZhbHVlIGluZGV4IGRpY3Qga2V5X2xlbikgIkRJQ1RTRVRCIjsNCihjZWxsLCBpbnQpIHVkaWN0X2FkZF9idWlsZGVyPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIGJ1aWxkZXIgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUVUFEREIiOw0KKGNlbGwsIGludCkgdWRpY3RfcmVwbGFjZV9idWlsZGVyPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIGJ1aWxkZXIgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUVVJFUExBQ0VCIjsNCihjZWxsLCBpbnQpIGlkaWN0X2FkZF9idWlsZGVyPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIGJ1aWxkZXIgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSUFEREIiOw0KKGNlbGwsIGludCkgaWRpY3RfcmVwbGFjZV9idWlsZGVyPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgaW5kZXgsIGJ1aWxkZXIgdmFsdWUpIGFzbSh2YWx1ZSBpbmRleCBkaWN0IGtleV9sZW4pICJESUNUSVJFUExBQ0VCIjsNCihjZWxsLCBpbnQsIHNsaWNlLCBpbnQpIHVkaWN0X2RlbGV0ZV9nZXRfbWluKGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSgtPiAwIDIgMSAzKSAiRElDVFVSRU1NSU4iICJOVUxMU1dBUElGTk9UMiI7DQooY2VsbCwgKGludCwgc2xpY2UsIGludCkpIH51ZGljdDo6ZGVsZXRlX2dldF9taW4oY2VsbCBkaWN0LCBpbnQga2V5X2xlbikgYXNtKC0+IDAgMiAxIDMpICJESUNUVVJFTU1JTiIgIk5VTExTV0FQSUZOT1QyIjsNCihjZWxsLCBpbnQsIHNsaWNlLCBpbnQpIGlkaWN0X2RlbGV0ZV9nZXRfbWluKGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSgtPiAwIDIgMSAzKSAiRElDVElSRU1NSU4iICJOVUxMU1dBUElGTk9UMiI7DQooY2VsbCwgKGludCwgc2xpY2UsIGludCkpIH5pZGljdDo6ZGVsZXRlX2dldF9taW4oY2VsbCBkaWN0LCBpbnQga2V5X2xlbikgYXNtKC0+IDAgMiAxIDMpICJESUNUSVJFTU1JTiIgIk5VTExTV0FQSUZOT1QyIjsNCihjZWxsLCBzbGljZSwgc2xpY2UsIGludCkgZGljdF9kZWxldGVfZ2V0X21pbihjZWxsIGRpY3QsIGludCBrZXlfbGVuKSBhc20oLT4gMCAyIDEgMykgIkRJQ1RSRU1NSU4iICJOVUxMU1dBUElGTk9UMiI7DQooY2VsbCwgKHNsaWNlLCBzbGljZSwgaW50KSkgfmRpY3Q6OmRlbGV0ZV9nZXRfbWluKGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSgtPiAwIDIgMSAzKSAiRElDVFJFTU1JTiIgIk5VTExTV0FQSUZOT1QyIjsNCihjZWxsLCBpbnQsIHNsaWNlLCBpbnQpIHVkaWN0X2RlbGV0ZV9nZXRfbWF4KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSgtPiAwIDIgMSAzKSAiRElDVFVSRU1NQVgiICJOVUxMU1dBUElGTk9UMiI7DQooY2VsbCwgKGludCwgc2xpY2UsIGludCkpIH51ZGljdDo6ZGVsZXRlX2dldF9tYXgoY2VsbCBkaWN0LCBpbnQga2V5X2xlbikgYXNtKC0+IDAgMiAxIDMpICJESUNUVVJFTU1BWCIgIk5VTExTV0FQSUZOT1QyIjsNCihjZWxsLCBpbnQsIHNsaWNlLCBpbnQpIGlkaWN0X2RlbGV0ZV9nZXRfbWF4KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSgtPiAwIDIgMSAzKSAiRElDVElSRU1NQVgiICJOVUxMU1dBUElGTk9UMiI7DQooY2VsbCwgKGludCwgc2xpY2UsIGludCkpIH5pZGljdDo6ZGVsZXRlX2dldF9tYXgoY2VsbCBkaWN0LCBpbnQga2V5X2xlbikgYXNtKC0+IDAgMiAxIDMpICJESUNUSVJFTU1BWCIgIk5VTExTV0FQSUZOT1QyIjsNCihjZWxsLCBzbGljZSwgc2xpY2UsIGludCkgZGljdF9kZWxldGVfZ2V0X21heChjZWxsIGRpY3QsIGludCBrZXlfbGVuKSBhc20oLT4gMCAyIDEgMykgIkRJQ1RSRU1NQVgiICJOVUxMU1dBUElGTk9UMiI7DQooY2VsbCwgKHNsaWNlLCBzbGljZSwgaW50KSkgfmRpY3Q6OmRlbGV0ZV9nZXRfbWF4KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSgtPiAwIDIgMSAzKSAiRElDVFJFTU1BWCIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIHVkaWN0X2dldF9taW4/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUVU1JTiIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIHVkaWN0X2dldF9tYXg/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUVU1BWCIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIGNlbGwsIGludCkgdWRpY3RfZ2V0X21pbl9yZWY/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUVU1JTlJFRiIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIGNlbGwsIGludCkgdWRpY3RfZ2V0X21heF9yZWY/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUVU1BWFJFRiIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIGlkaWN0X2dldF9taW4/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUSU1JTiIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIGlkaWN0X2dldF9tYXg/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUSU1BWCIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIGNlbGwsIGludCkgaWRpY3RfZ2V0X21pbl9yZWY/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUSU1JTlJFRiIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIGNlbGwsIGludCkgaWRpY3RfZ2V0X21heF9yZWY/KGNlbGwgZGljdCwgaW50IGtleV9sZW4pIGFzbSAoLT4gMSAwIDIpICJESUNUSU1BWFJFRiIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIHVkaWN0X2dldF9uZXh0PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUVUdFVE5FWFQiICJOVUxMU1dBUElGTk9UMiI7DQooaW50LCBzbGljZSwgaW50KSB1ZGljdF9nZXRfbmV4dGVxPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUVUdFVE5FWFRFUSIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIHVkaWN0X2dldF9wcmV2PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUVUdFVFBSRVYiICJOVUxMU1dBUElGTk9UMiI7DQooaW50LCBzbGljZSwgaW50KSB1ZGljdF9nZXRfcHJldmVxPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUVUdFVFBSRVZFUSIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIGlkaWN0X2dldF9uZXh0PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUSUdFVE5FWFQiICJOVUxMU1dBUElGTk9UMiI7DQooaW50LCBzbGljZSwgaW50KSBpZGljdF9nZXRfbmV4dGVxPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUSUdFVE5FWFRFUSIgIk5VTExTV0FQSUZOT1QyIjsNCihpbnQsIHNsaWNlLCBpbnQpIGlkaWN0X2dldF9wcmV2PyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUSUdFVFBSRVYiICJOVUxMU1dBUElGTk9UMiI7DQooaW50LCBzbGljZSwgaW50KSBpZGljdF9nZXRfcHJldmVxPyhjZWxsIGRpY3QsIGludCBrZXlfbGVuLCBpbnQgcGl2b3QpIGFzbShwaXZvdCBkaWN0IGtleV9sZW4gLT4gMSAwIDIpICJESUNUSUdFVFBSRVZFUSIgIk5VTExTV0FQSUZOT1QyIjsNCg0KOzs7IENyZWF0ZXMgYW4gZW1wdHkgZGljdGlvbmFyeSwgd2hpY2ggaXMgYWN0dWFsbHkgYSBudWxsIHZhbHVlLiBFcXVpdmFsZW50IHRvIFBVU0hOVUxMDQpjZWxsIG5ld19kaWN0KCkgYXNtICJORVdESUNUIjsNCjs7OyBDaGVja3Mgd2hldGhlciBhIGRpY3Rpb25hcnkgaXMgZW1wdHkuIEVxdWl2YWxlbnQgdG8gY2VsbF9udWxsPy4NCmludCBkaWN0X2VtcHR5PyhjZWxsIGMpIGFzbSAiRElDVEVNUFRZIjsNCg0KDQp7LSBQcmVmaXggZGljdGlvbmFyeSBwcmltaXRpdmVzIC19DQooc2xpY2UsIHNsaWNlLCBzbGljZSwgaW50KSBwZnhkaWN0X2dldD8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgc2xpY2Uga2V5KSBhc20oa2V5IGRpY3Qga2V5X2xlbikgIlBGWERJQ1RHRVRRIiAiTlVMTFNXQVBJRk5PVDIiOw0KKGNlbGwsIGludCkgcGZ4ZGljdF9zZXQ/KGNlbGwgZGljdCwgaW50IGtleV9sZW4sIHNsaWNlIGtleSwgc2xpY2UgdmFsdWUpIGFzbSh2YWx1ZSBrZXkgZGljdCBrZXlfbGVuKSAiUEZYRElDVFNFVCI7DQooY2VsbCwgaW50KSBwZnhkaWN0X2RlbGV0ZT8oY2VsbCBkaWN0LCBpbnQga2V5X2xlbiwgc2xpY2Uga2V5KSBhc20oa2V5IGRpY3Qga2V5X2xlbikgIlBGWERJQ1RERUwiOw0KDQo7OzsgUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIHBhcmFtZXRlciB3aXRoIGludGVnZXIgaW5kZXggYGlgIGFzIGEgYGNlbGxgIG9yIGBudWxsYCB2YWx1ZS4NCmNlbGwgY29uZmlnX3BhcmFtKGludCB4KSBhc20gIkNPTkZJR09QVFBBUkFNIjsNCjs7OyBDaGVja3Mgd2hldGhlciBjIGlzIGEgbnVsbC4gTm90ZSwgdGhhdCBGdW5DIGFsc28gaGFzIHBvbHltb3JwaGljIG51bGw/IGJ1aWx0LWluLg0KaW50IGNlbGxfbnVsbD8oY2VsbCBjKSBhc20gIklTTlVMTCI7DQoNCjs7OyBDcmVhdGVzIGFuIG91dHB1dCBhY3Rpb24gd2hpY2ggd291bGQgcmVzZXJ2ZSBleGFjdGx5IGFtb3VudCBuYW5vdG9uY29pbnMgKGlmIG1vZGUgPSAwKSwgYXQgbW9zdCBhbW91bnQgbmFub3RvbmNvaW5zIChpZiBtb2RlID0gMiksIG9yIGFsbCBidXQgYW1vdW50IG5hbm90b25jb2lucyAoaWYgbW9kZSA9IDEgb3IgbW9kZSA9IDMpLCBmcm9tIHRoZSByZW1haW5pbmcgYmFsYW5jZSBvZiB0aGUgYWNjb3VudC4gSXQgaXMgcm91Z2hseSBlcXVpdmFsZW50IHRvIGNyZWF0aW5nIGFuIG91dGJvdW5kIG1lc3NhZ2UgY2FycnlpbmcgYW1vdW50IG5hbm90b25jb2lucyAob3IgYiDiiJIgYW1vdW50IG5hbm90b25jb2lucywgd2hlcmUgYiBpcyB0aGUgcmVtYWluaW5nIGJhbGFuY2UpIHRvIG9uZXNlbGYsIHNvIHRoYXQgdGhlIHN1YnNlcXVlbnQgb3V0cHV0IGFjdGlvbnMgd291bGQgbm90IGJlIGFibGUgdG8gc3BlbmQgbW9yZSBtb25leSB0aGFuIHRoZSByZW1haW5kZXIuIEJpdCArMiBpbiBtb2RlIG1lYW5zIHRoYXQgdGhlIGV4dGVybmFsIGFjdGlvbiBkb2VzIG5vdCBmYWlsIGlmIHRoZSBzcGVjaWZpZWQgYW1vdW50IGNhbm5vdCBiZSByZXNlcnZlZDsgaW5zdGVhZCwgYWxsIHJlbWFpbmluZyBiYWxhbmNlIGlzIHJlc2VydmVkLiBCaXQgKzggaW4gbW9kZSBtZWFucyBgYW1vdW50IDwtIC1hbW91bnRgIGJlZm9yZSBwZXJmb3JtaW5nIGFueSBmdXJ0aGVyIGFjdGlvbnMuIEJpdCArNCBpbiBtb2RlIG1lYW5zIHRoYXQgYW1vdW50IGlzIGluY3JlYXNlZCBieSB0aGUgb3JpZ2luYWwgYmFsYW5jZSBvZiB0aGUgY3VycmVudCBhY2NvdW50IChiZWZvcmUgdGhlIGNvbXB1dGUgcGhhc2UpLCBpbmNsdWRpbmcgYWxsIGV4dHJhIGN1cnJlbmNpZXMsIGJlZm9yZSBwZXJmb3JtaW5nIGFueSBvdGhlciBjaGVja3MgYW5kIGFjdGlvbnMuIEN1cnJlbnRseSwgYW1vdW50IG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlciwgYW5kIG1vZGUgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgMC4uMTUuDQooKSByYXdfcmVzZXJ2ZShpbnQgYW1vdW50LCBpbnQgbW9kZSkgaW1wdXJlIGFzbSAiUkFXUkVTRVJWRSI7DQo7OzsgU2ltaWxhciB0byByYXdfcmVzZXJ2ZSwgYnV0IGFsc28gYWNjZXB0cyBhIGRpY3Rpb25hcnkgZXh0cmFfYW1vdW50IChyZXByZXNlbnRlZCBieSBhIGNlbGwgb3IgbnVsbCkgd2l0aCBleHRyYSBjdXJyZW5jaWVzLiBJbiB0aGlzIHdheSBjdXJyZW5jaWVzIG90aGVyIHRoYW4gVG9uQ29pbiBjYW4gYmUgcmVzZXJ2ZWQuDQooKSByYXdfcmVzZXJ2ZV9leHRyYShpbnQgYW1vdW50LCBjZWxsIGV4dHJhX2Ftb3VudCwgaW50IG1vZGUpIGltcHVyZSBhc20gIlJBV1JFU0VSVkVYIjsNCjs7OyBTZW5kcyBhIHJhdyBtZXNzYWdlIGNvbnRhaW5lZCBpbiBtc2csIHdoaWNoIHNob3VsZCBjb250YWluIGEgY29ycmVjdGx5IHNlcmlhbGl6ZWQgb2JqZWN0IE1lc3NhZ2UgWCwgd2l0aCB0aGUgb25seSBleGNlcHRpb24gdGhhdCB0aGUgc291cmNlIGFkZHJlc3MgaXMgYWxsb3dlZCB0byBoYXZlIGR1bW15IHZhbHVlIGFkZHJfbm9uZSAodG8gYmUgYXV0b21hdGljYWxseSByZXBsYWNlZCB3aXRoIHRoZSBjdXJyZW50IHNtYXJ0IGNvbnRyYWN0IGFkZHJlc3MpLCBhbmQgaWhyX2ZlZSwgZndkX2ZlZSwgY3JlYXRlZF9sdCBhbmQgY3JlYXRlZF9hdCBmaWVsZHMgY2FuIGhhdmUgYXJiaXRyYXJ5IHZhbHVlcyAodG8gYmUgcmV3cml0dGVuIHdpdGggY29ycmVjdCB2YWx1ZXMgZHVyaW5nIHRoZSBhY3Rpb24gcGhhc2Ugb2YgdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24pLiBJbnRlZ2VyIHBhcmFtZXRlciBtb2RlIGNvbnRhaW5zIHRoZSBmbGFncy4gQ3VycmVudGx5IG1vZGUgPSAwIGlzIHVzZWQgZm9yIG9yZGluYXJ5IG1lc3NhZ2VzOyBtb2RlID0gMTI4IGlzIHVzZWQgZm9yIG1lc3NhZ2VzIHRoYXQgYXJlIHRvIGNhcnJ5IGFsbCB0aGUgcmVtYWluaW5nIGJhbGFuY2Ugb2YgdGhlIGN1cnJlbnQgc21hcnQgY29udHJhY3QgKGluc3RlYWQgb2YgdGhlIHZhbHVlIG9yaWdpbmFsbHkgaW5kaWNhdGVkIGluIHRoZSBtZXNzYWdlKTsgbW9kZSA9IDY0IGlzIHVzZWQgZm9yIG1lc3NhZ2VzIHRoYXQgY2FycnkgYWxsIHRoZSByZW1haW5pbmcgdmFsdWUgb2YgdGhlIGluYm91bmQgbWVzc2FnZSBpbiBhZGRpdGlvbiB0byB0aGUgdmFsdWUgaW5pdGlhbGx5IGluZGljYXRlZCBpbiB0aGUgbmV3IG1lc3NhZ2UgKGlmIGJpdCAwIGlzIG5vdCBzZXQsIHRoZSBnYXMgZmVlcyBhcmUgZGVkdWN0ZWQgZnJvbSB0aGlzIGFtb3VudCk7IG1vZGUnID0gbW9kZSArIDEgbWVhbnMgdGhhdCB0aGUgc2VuZGVyIHdhbnRzIHRvIHBheSB0cmFuc2ZlciBmZWVzIHNlcGFyYXRlbHk7IG1vZGUnID0gbW9kZSArIDIgbWVhbnMgdGhhdCBhbnkgZXJyb3JzIGFyaXNpbmcgd2hpbGUgcHJvY2Vzc2luZyB0aGlzIG1lc3NhZ2UgZHVyaW5nIHRoZSBhY3Rpb24gcGhhc2Ugc2hvdWxkIGJlIGlnbm9yZWQuIEZpbmFsbHksIG1vZGUnID0gbW9kZSArIDMyIG1lYW5zIHRoYXQgdGhlIGN1cnJlbnQgYWNjb3VudCBtdXN0IGJlIGRlc3Ryb3llZCBpZiBpdHMgcmVzdWx0aW5nIGJhbGFuY2UgaXMgemVyby4gVGhpcyBmbGFnIGlzIHVzdWFsbHkgZW1wbG95ZWQgdG9nZXRoZXIgd2l0aCArMTI4Lg0KKCkgc2VuZF9yYXdfbWVzc2FnZShjZWxsIG1zZywgaW50IG1vZGUpIGltcHVyZSBhc20gIlNFTkRSQVdNU0ciOw0KOzs7IENyZWF0ZXMgYW4gb3V0cHV0IGFjdGlvbiB0aGF0IHdvdWxkIGNoYW5nZSB0aGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgdG8gdGhhdCBnaXZlbiBieSBjZWxsIG5ld19jb2RlLiBOb3RpY2UgdGhhdCB0aGlzIGNoYW5nZSB3aWxsIHRha2UgZWZmZWN0IG9ubHkgYWZ0ZXIgdGhlIHN1Y2Nlc3NmdWwgdGVybWluYXRpb24gb2YgdGhlIGN1cnJlbnQgcnVuIG9mIHRoZSBzbWFydCBjb250cmFjdA0KKCkgc2V0X2NvZGUoY2VsbCBuZXdfY29kZSkgaW1wdXJlIGFzbSAiU0VUQ09ERSI7DQoNCjs7OyBHZW5lcmF0ZXMgYSBuZXcgcHNldWRvLXJhbmRvbSB1bnNpZ25lZCAyNTYtYml0IGludGVnZXIgeC4gVGhlIGFsZ29yaXRobSBpcyBhcyBmb2xsb3dzOiBpZiByIGlzIHRoZSBvbGQgdmFsdWUgb2YgdGhlIHJhbmRvbSBzZWVkLCBjb25zaWRlcmVkIGFzIGEgMzItYnl0ZSBhcnJheSAoYnkgY29uc3RydWN0aW5nIHRoZSBiaWctZW5kaWFuIHJlcHJlc2VudGF0aW9uIG9mIGFuIHVuc2lnbmVkIDI1Ni1iaXQgaW50ZWdlciksIHRoZW4gaXRzIHNoYTUxMihyKSBpcyBjb21wdXRlZDsgdGhlIGZpcnN0IDMyIGJ5dGVzIG9mIHRoaXMgaGFzaCBhcmUgc3RvcmVkIGFzIHRoZSBuZXcgdmFsdWUgcicgb2YgdGhlIHJhbmRvbSBzZWVkLCBhbmQgdGhlIHJlbWFpbmluZyAzMiBieXRlcyBhcmUgcmV0dXJuZWQgYXMgdGhlIG5leHQgcmFuZG9tIHZhbHVlIHguDQppbnQgcmFuZG9tKCkgaW1wdXJlIGFzbSAiUkFORFUyNTYiOw0KOzs7IEdlbmVyYXRlcyBhIG5ldyBwc2V1ZG8tcmFuZG9tIGludGVnZXIgeiBpbiB0aGUgcmFuZ2UgMC4ucmFuZ2XiiJIxIChvciByYW5nZS4u4oiSMSwgaWYgcmFuZ2UgPCAwKS4gTW9yZSBwcmVjaXNlbHksIGFuIHVuc2lnbmVkIHJhbmRvbSB2YWx1ZSB4IGlzIGdlbmVyYXRlZCBhcyBpbiByYW5kb207IHRoZW4geiA6PSB4ICogcmFuZ2UgLyAyXjI1NiBpcyBjb21wdXRlZC4NCmludCByYW5kKGludCByYW5nZSkgaW1wdXJlIGFzbSAiUkFORCI7DQo7OzsgUmV0dXJucyB0aGUgY3VycmVudCByYW5kb20gc2VlZCBhcyBhbiB1bnNpZ25lZCAyNTYtYml0IEludGVnZXIuDQppbnQgZ2V0X3NlZWQoKSBpbXB1cmUgYXNtICJSQU5EU0VFRCI7DQo7OzsgU2V0cyB0aGUgcmFuZG9tIHNlZWQgdG8gdW5zaWduZWQgMjU2LWJpdCBzZWVkLg0KKCkgc2V0X3NlZWQoaW50KSBpbXB1cmUgYXNtICJTRVRSQU5EIjsNCjs7OyBNaXhlcyB1bnNpZ25lZCAyNTYtYml0IGludGVnZXIgeCBpbnRvIHRoZSByYW5kb20gc2VlZCByIGJ5IHNldHRpbmcgdGhlIHJhbmRvbSBzZWVkIHRvIHNoYTI1NiBvZiB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0d28gMzItYnl0ZSBzdHJpbmdzOiB0aGUgZmlyc3Qgd2l0aCB0aGUgYmlnLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2xkIHNlZWQgciwgYW5kIHRoZSBzZWNvbmQgd2l0aCB0aGUgYmlnLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiB4Lg0KKCkgcmFuZG9taXplKGludCB4KSBpbXB1cmUgYXNtICJBRERSQU5EIjsNCjs7OyBFcXVpdmFsZW50IHRvIHJhbmRvbWl6ZShjdXJfbHQoKSk7Lg0KKCkgcmFuZG9taXplX2x0KCkgaW1wdXJlIGFzbSAiTFRJTUUiICJBRERSQU5EIjsNCg0KOzs7IENoZWNrcyB3aGV0aGVyIHRoZSBkYXRhIHBhcnRzIG9mIHR3byBzbGljZXMgY29pbnNpZGUNCmludCBlcXVhbF9zbGljZXMoc2xpY2UgYSwgc2xpY2UgYikgYXNtICJTREVRIjsNCg0KOzs7IENvbmNhdGVuYXRlcyB0d28gYnVpbGRlcnMNCmJ1aWxkZXIgc3RvcmVfYnVpbGRlcihidWlsZGVyIHRvLCBidWlsZGVyIGZyb20pIGFzbSAiU1RCUiI7DQo=","sources/contract.tact":"aW1wb3J0ICIuL2ltcG9ydHMvc3RkbGliLmZjIjsKY29uc3QgbWluVG9uc0ZvclN0b3JhZ2U6IEludCA9IHRvbigiMC4wNCIpOwpjb25zdCBnYXNDb25zdW1wdGlvbjogSW50ID0gdG9uKCIwLjA0Iik7CgptZXNzYWdlIE1pbnRFdmVudCB7CiAgc2VuZGVyOiBBZGRyZXNzOwogIHZhbHVlOiBJbnQgYXMgdWludDI1NjsKICByYXRlOiBJbnQgYXMgdWludDI1NjsKICBwb2ludHM6IEludCBhcyB1aW50MjU2Owp9CgptZXNzYWdlIE1pbnRKZXR0b24gewogIHJhdGU6IEludCBhcyB1aW50MjU2Owp9CgpzdHJ1Y3QgQWNjb3VudFN0YXRlIHsKICBwb2ludHM6IEludCBhcyB1aW50MjU2OwogIGZlZXM6ICBJbnQgYXMgdWludDI1NjsKICB0b3RhbFBvaW50czogSW50IGFzIHVpbnQyNTY7CiAgdG90YWxGZWVzOiBJbnQgYXMgdWludDI1NjsKfQoKY29udHJhY3QgTWludFdhciB7CiAgYWRtaW46IEFkZHJlc3M7CiAgbWludFN0YXJ0QXQ6IEludDsKICBtaW50RW5kQXQ6IEludDsKICB0b3RhbFBvaW50czogSW50IGFzIHVpbnQyNTY7CiAgdG90YWxGZWVzOiAgSW50IGFzIHVpbnQyNTY7CiAgcG9pbnRzT2Y6IG1hcDxBZGRyZXNzLCBJbnQgYXMgdWludDI1Nj47CiAgZmVlc09mOiBtYXA8QWRkcmVzcywgSW50IGFzIHVpbnQyNTY+OwoKICBpbml0KGFkbWluOiBBZGRyZXNzLCBtaW50U3RhcnRBdDogSW50LCBtaW50RW5kQXQ6IEludCkgewogICAgc2VsZi5hZG1pbiA9IGFkbWluOwogICAgc2VsZi50b3RhbFBvaW50cyA9IDA7CiAgICBzZWxmLnRvdGFsRmVlcyA9IDA7CiAgICBzZWxmLm1pbnRTdGFydEF0ID0gbWludFN0YXJ0QXQ7CiAgICBzZWxmLm1pbnRFbmRBdCA9IG1pbnRFbmRBdDsKICB9CgogIGZ1biBtc2dfdmFsdWUodmFsdWU6IEludCk6IEludCB7CiAgICBsZXQgdG9uX2JhbGFuY2VfYmVmb3JlX21zZzogSW50ID0gbXlCYWxhbmNlKCkgLSB2YWx1ZTsKICAgIGxldCBzdG9yYWdlX2ZlZTogSW50ID0gbWluVG9uc0ZvclN0b3JhZ2UgLSBtaW4odG9uX2JhbGFuY2VfYmVmb3JlX21zZywgbWluVG9uc0ZvclN0b3JhZ2UpOwogICAgcmV0dXJuIHZhbHVlIC0gKHN0b3JhZ2VfZmVlICsgZ2FzQ29uc3VtcHRpb24pOwogIH0KCiAgcmVjZWl2ZSgpe30KICByZWNlaXZlKG1zZzogU2xpY2UpIHt9CiAgCiAgcmVjZWl2ZShtc2c6IE1pbnRKZXR0b24pIHsKICAgIHJlcXVpcmUobXNnLnJhdGU+MCAmJiBtc2cucmF0ZTw9MTAwMDAwLCAiSW52YWxpZCByYXRlIik7CiAgICByZXF1aXJlKGNvbnRleHQoKS52YWx1ZSA+PSB0b24oIjAuMiIpLCAiSW5zdWZmaWNpZW50IGZlZSIpOwogICAgcmVxdWlyZShub3coKT49c2VsZi5taW50U3RhcnRBdCwgIk1pbnQgbm90IHN0YXJ0Iik7CiAgICByZXF1aXJlKG5vdygpPHNlbGYubWludEVuZEF0LCAiTWludCBlbmRlZCIpOwoKICAgIGxldCBteWZlZTogSW50PyA9IHNlbGYuZmVlc09mLmdldChzZW5kZXIoKSk7CiAgICBpZiAobXlmZWUgPT0gbnVsbCkgewogICAgICBzZWxmLmZlZXNPZi5zZXQoc2VuZGVyKCksIGNvbnRleHQoKS52YWx1ZSk7CiAgICB9ZWxzZXsKICAgICAgc2VsZi5mZWVzT2Yuc2V0KHNlbmRlcigpLCBjb250ZXh0KCkudmFsdWUrbXlmZWUhISk7CiAgICB9CiAgICBzZWxmLnRvdGFsRmVlcyA9IHNlbGYudG90YWxGZWVzICsgY29udGV4dCgpLnZhbHVlOwogICAgbGV0IG51bTogSW50ID0gcmFuZG9tKDAsMTAwMDAwKTsKICAgIGlmIChudW0gPCBtc2cucmF0ZSkgewogICAgICAvLyBzdWNjZXNzCiAgICAgIGxldCBwb2ludDogSW50ID0gY29udGV4dCgpLnZhbHVlKjEwMDAwMC9tc2cucmF0ZTsKICAgICAgc2VsZi50b3RhbFBvaW50cyA9IHNlbGYudG90YWxQb2ludHMgKyBwb2ludDsKICAgICAgbGV0IHVzZXJQb2ludHM6IEludD8gPSBzZWxmLnBvaW50c09mLmdldChzZW5kZXIoKSk7CiAgICAgIGlmICh1c2VyUG9pbnRzID09IG51bGwpIHsKICAgICAgICBzZWxmLnBvaW50c09mLnNldChzZW5kZXIoKSwgcG9pbnQpOwogICAgICB9ZWxzZXsKICAgICAgICBzZWxmLnBvaW50c09mLnNldChzZW5kZXIoKSwgKHVzZXJQb2ludHMhISkrcG9pbnQpOwogICAgICB9CgogICAgICBlbWl0KAogICAgICAgIE1pbnRFdmVudHsKICAgICAgICAgIHNlbmRlcjogc2VuZGVyKCksCiAgICAgICAgICB2YWx1ZTogY29udGV4dCgpLnZhbHVlLAogICAgICAgICAgcmF0ZTogbXNnLnJhdGUsCiAgICAgICAgICBwb2ludHM6IHBvaW50CiAgICAgICAgfS50b0NlbGwoKQogICAgICApOwogICAgfWVsc2V7CiAgICAgIGVtaXQoCiAgICAgICAgTWludEV2ZW50ewogICAgICAgICAgc2VuZGVyOiBzZW5kZXIoKSwKICAgICAgICAgIHZhbHVlOiBjb250ZXh0KCkudmFsdWUsCiAgICAgICAgICByYXRlOiBtc2cucmF0ZSwKICAgICAgICAgIHBvaW50czogMAogICAgICAgIH0udG9DZWxsKCkKICAgICAgKTsKICAgIH0KICB9CgogIHJlY2VpdmUoIkNsYWltRmVlIikgewogICAgcmVxdWlyZShzZW5kZXIoKSA9PSBzZWxmLmFkbWluLCAiT25seSBvd25lciBjYW4gY2xhaW0gZmVlIik7CiAgICBzZW5kKFNlbmRQYXJhbWV0ZXJzewogICAgICAgIHRvOiBzZWxmLmFkbWluLAogICAgICAgIHZhbHVlOiBteUJhbGFuY2UoKSAtIHRvbigiMC4xIiksCiAgICAgICAgYm91bmNlOiBmYWxzZSwKICAgICAgICBtb2RlOiBTZW5kUGF5R2FzU2VwYXJhdGVseQogICAgfSk7CiAgfQoKICAvLyAtLS0tLS0tLS0tLS0tLSBHZXQgTWV0aG9kIC0tLS0tLS0tLS0tLS0tIC8vIAogIGdldCBmdW4gZ2V0X3BvaW50c19ieV9hZGRyZXNzKGFkZHJlc3M6IEFkZHJlc3MpOiBJbnQgewogICAgbGV0IHVzZXJQb2ludHM6IEludD8gPSBzZWxmLnBvaW50c09mLmdldChhZGRyZXNzKTsKICAgIGlmICh1c2VyUG9pbnRzID09IG51bGwpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9ZWxzZXsKICAgICAgcmV0dXJuIHVzZXJQb2ludHMhITsKICAgIH0KICB9CiAgZ2V0IGZ1biBnZXRfc2hhcmVzX2J5X2FkZHJlc3MoYWRkcmVzczogQWRkcmVzcyk6IEludCB7CiAgICBsZXQgdXNlclBvaW50czogSW50PyA9IHNlbGYucG9pbnRzT2YuZ2V0KGFkZHJlc3MpOwogICAgaWYgKHVzZXJQb2ludHMgPT0gbnVsbCkgewogICAgICByZXR1cm4gMDsKICAgIH1lbHNlewogICAgICByZXR1cm4gdXNlclBvaW50cyEhKjEwMDAwMC9zZWxmLnRvdGFsUG9pbnRzOwogICAgfQogIH0KICBnZXQgZnVuIGdldF90b3RhbFBvaW50cygpOiBJbnQgewogICAgcmV0dXJuIHNlbGYudG90YWxQb2ludHM7CiAgfQogIGdldCBmdW4gZ2V0X2FsbF9hY2NvdW50cygpOiBtYXA8QWRkcmVzcywgSW50IGFzIHVpbnQyNTY+ewogICAgcmV0dXJuIHNlbGYucG9pbnRzT2Y7CiAgfQogIGdldCBmdW4gZ2V0X2FjY291bnRfc3RhdGUoYWRkcmVzczogQWRkcmVzcyk6IEFjY291bnRTdGF0ZXsKICAgIGxldCB1c2VyUG9pbnRzOiBJbnQ/ID0gc2VsZi5wb2ludHNPZi5nZXQoYWRkcmVzcyk7CiAgICBpZiAodXNlclBvaW50cyA9PSBudWxsKSB7CiAgICAgIHVzZXJQb2ludHMgPSAwOwogICAgfQoKICAgIGxldCBmZWVzOiBJbnQ/ID0gc2VsZi5mZWVzT2YuZ2V0KGFkZHJlc3MpOwogICAgaWYgKGZlZXMgPT0gbnVsbCkgewogICAgICBmZWVzID0gMDsKICAgIH0KCiAgICByZXR1cm4gQWNjb3VudFN0YXRlIHsgCiAgICAgIHBvaW50czogdXNlclBvaW50cyEhLAogICAgICBmZWVzOiBmZWVzISEsCiAgICAgIHRvdGFsUG9pbnRzOiBzZWxmLnRvdGFsUG9pbnRzLAogICAgICB0b3RhbEZlZXM6IHNlbGYudG90YWxGZWVzCiAgICB9OwogIH0KfQ=="},"compiler":{"name":"tact","version":"1.1.3","parameters":"{\"entrypoint\":\"./sources/contract.tact\",\"options\":{}}"}}