{"name":"MintWar","code":"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","abi":"{\"name\":\"MintWar\",\"types\":[{\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},{\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"MintEvent\",\"header\":1428761267,\"fields\":[{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"rate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"points\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"MintJetton\",\"header\":710663172,\"fields\":[{\"name\":\"rate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"AccountState\",\"header\":null,\"fields\":[{\"name\":\"points\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"fees\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"totalPoints\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"totalFees\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]}],\"receivers\":[{\"receiver\":\"internal\",\"message\":{\"kind\":\"empty\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"any\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"MintJetton\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"text\",\"text\":\"ClaimFee\"}}],\"getters\":[{\"name\":\"get_points_by_address\",\"arguments\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"get_shares_by_address\",\"arguments\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"get_totalPoints\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"get_all_accounts\",\"arguments\":[],\"returnType\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"uint\",\"valueFormat\":256}},{\"name\":\"get_account_state\",\"arguments\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"AccountState\",\"optional\":false}}],\"errors\":{\"2\":{\"message\":\"Stack undeflow\"},\"3\":{\"message\":\"Stack overflow\"},\"4\":{\"message\":\"Integer overflow\"},\"5\":{\"message\":\"Integer out of expected range\"},\"6\":{\"message\":\"Invalid opcode\"},\"7\":{\"message\":\"Type check error\"},\"8\":{\"message\":\"Cell overflow\"},\"9\":{\"message\":\"Cell underflow\"},\"10\":{\"message\":\"Dictionary error\"},\"13\":{\"message\":\"Out of gas error\"},\"32\":{\"message\":\"Method ID not found\"},\"34\":{\"message\":\"Action is invalid or not supported\"},\"37\":{\"message\":\"Not enough TON\"},\"38\":{\"message\":\"Not enough extra-currencies\"},\"128\":{\"message\":\"Null reference exception\"},\"129\":{\"message\":\"Invalid serialization prefix\"},\"130\":{\"message\":\"Invalid incoming message\"},\"131\":{\"message\":\"Constraints error\"},\"132\":{\"message\":\"Access denied\"},\"133\":{\"message\":\"Contract stopped\"},\"134\":{\"message\":\"Invalid argument\"},\"135\":{\"message\":\"Code of a contract was not found\"},\"136\":{\"message\":\"Invalid address\"},\"137\":{\"message\":\"Masterchain support is not enabled for this contract\"},\"6852\":{\"message\":\"Mint not start\"},\"29082\":{\"message\":\"Mint ended\"},\"40176\":{\"message\":\"Invalid rate\"},\"55259\":{\"message\":\"Insufficient fee\"},\"59445\":{\"message\":\"Only owner can claim fee\"}},\"interfaces\":[\"org.ton.introspection.v0\",\"org.ton.abi.ipfs.v0\",\"org.ton.deploy.lazy.v0\",\"org.ton.chain.workchain.v0\"]}","init":{"kind":"direct","args":[{"name":"admin","type":{"kind":"simple","type":"address","optional":false}},{"name":"mintStartAt","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"mintEndAt","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"prefix":{"bits":1,"value":0},"deployment":{"kind":"system-cell","system":"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"}},"sources":{"contracts/imports/stdlib.fc":"","contracts/mintWar.tact":"aW1wb3J0ICIuL2ltcG9ydHMvc3RkbGliLmZjIjsKY29uc3QgbWluVG9uc0ZvclN0b3JhZ2U6IEludCA9IHRvbigiMC4wNCIpOwpjb25zdCBnYXNDb25zdW1wdGlvbjogSW50ID0gdG9uKCIwLjA0Iik7CgptZXNzYWdlIE1pbnRFdmVudCB7CiAgc2VuZGVyOiBBZGRyZXNzOwogIHZhbHVlOiBJbnQgYXMgdWludDI1NjsKICByYXRlOiBJbnQgYXMgdWludDI1NjsKICBwb2ludHM6IEludCBhcyB1aW50MjU2Owp9CgptZXNzYWdlIE1pbnRKZXR0b24gewogIHJhdGU6IEludCBhcyB1aW50MjU2Owp9CgpzdHJ1Y3QgQWNjb3VudFN0YXRlIHsKICBwb2ludHM6IEludCBhcyB1aW50MjU2OwogIGZlZXM6ICBJbnQgYXMgdWludDI1NjsKICB0b3RhbFBvaW50czogSW50IGFzIHVpbnQyNTY7CiAgdG90YWxGZWVzOiBJbnQgYXMgdWludDI1NjsKfQoKY29udHJhY3QgTWludFdhciB7CiAgYWRtaW46IEFkZHJlc3M7CiAgbWludFN0YXJ0QXQ6IEludDsKICBtaW50RW5kQXQ6IEludDsKICB0b3RhbFBvaW50czogSW50IGFzIHVpbnQyNTY7CiAgdG90YWxGZWVzOiAgSW50IGFzIHVpbnQyNTY7CiAgcG9pbnRzT2Y6IG1hcDxBZGRyZXNzLCBJbnQgYXMgdWludDI1Nj47CiAgZmVlc09mOiBtYXA8QWRkcmVzcywgSW50IGFzIHVpbnQyNTY+OwoKICBpbml0KGFkbWluOiBBZGRyZXNzLCBtaW50U3RhcnRBdDogSW50LCBtaW50RW5kQXQ6IEludCkgewogICAgc2VsZi5hZG1pbiA9IGFkbWluOwogICAgc2VsZi50b3RhbFBvaW50cyA9IDA7CiAgICBzZWxmLnRvdGFsRmVlcyA9IDA7CiAgICBzZWxmLm1pbnRTdGFydEF0ID0gbWludFN0YXJ0QXQ7CiAgICBzZWxmLm1pbnRFbmRBdCA9IG1pbnRFbmRBdDsKICB9CgogIGZ1biBtc2dfdmFsdWUodmFsdWU6IEludCk6IEludCB7CiAgICBsZXQgdG9uX2JhbGFuY2VfYmVmb3JlX21zZzogSW50ID0gbXlCYWxhbmNlKCkgLSB2YWx1ZTsKICAgIGxldCBzdG9yYWdlX2ZlZTogSW50ID0gbWluVG9uc0ZvclN0b3JhZ2UgLSBtaW4odG9uX2JhbGFuY2VfYmVmb3JlX21zZywgbWluVG9uc0ZvclN0b3JhZ2UpOwogICAgcmV0dXJuIHZhbHVlIC0gKHN0b3JhZ2VfZmVlICsgZ2FzQ29uc3VtcHRpb24pOwogIH0KCiAgcmVjZWl2ZSgpe30KICByZWNlaXZlKG1zZzogU2xpY2UpIHt9CiAgCiAgcmVjZWl2ZShtc2c6IE1pbnRKZXR0b24pIHsKICAgIHJlcXVpcmUobXNnLnJhdGU+MCAmJiBtc2cucmF0ZTw9MTAwMDAwLCAiSW52YWxpZCByYXRlIik7CiAgICByZXF1aXJlKGNvbnRleHQoKS52YWx1ZSA+PSB0b24oIjAuMiIpLCAiSW5zdWZmaWNpZW50IGZlZSIpOwogICAgcmVxdWlyZShub3coKT49c2VsZi5taW50U3RhcnRBdCwgIk1pbnQgbm90IHN0YXJ0Iik7CiAgICByZXF1aXJlKG5vdygpPHNlbGYubWludEVuZEF0LCAiTWludCBlbmRlZCIpOwoKICAgIGxldCBteWZlZTogSW50PyA9IHNlbGYuZmVlc09mLmdldChzZW5kZXIoKSk7CiAgICBpZiAobXlmZWUgPT0gbnVsbCkgewogICAgICBzZWxmLmZlZXNPZi5zZXQoc2VuZGVyKCksIGNvbnRleHQoKS52YWx1ZSk7CiAgICB9ZWxzZXsKICAgICAgc2VsZi5mZWVzT2Yuc2V0KHNlbmRlcigpLCBjb250ZXh0KCkudmFsdWUrbXlmZWUhISk7CiAgICB9CiAgICBzZWxmLnRvdGFsRmVlcyA9IHNlbGYudG90YWxGZWVzICsgY29udGV4dCgpLnZhbHVlOwogICAgbGV0IG51bTogSW50ID0gcmFuZG9tKDAsMTAwMDAwKTsKICAgIGlmIChudW0gPCBtc2cucmF0ZSkgewogICAgICAvLyBzdWNjZXNzCiAgICAgIGxldCBwb2ludDogSW50ID0gY29udGV4dCgpLnZhbHVlKjEwMDAwMC9tc2cucmF0ZTsKICAgICAgc2VsZi50b3RhbFBvaW50cyA9IHNlbGYudG90YWxQb2ludHMgKyBwb2ludDsKICAgICAgbGV0IHVzZXJQb2ludHM6IEludD8gPSBzZWxmLnBvaW50c09mLmdldChzZW5kZXIoKSk7CiAgICAgIGlmICh1c2VyUG9pbnRzID09IG51bGwpIHsKICAgICAgICBzZWxmLnBvaW50c09mLnNldChzZW5kZXIoKSwgcG9pbnQpOwogICAgICB9ZWxzZXsKICAgICAgICBzZWxmLnBvaW50c09mLnNldChzZW5kZXIoKSwgKHVzZXJQb2ludHMhISkrcG9pbnQpOwogICAgICB9CgogICAgICBlbWl0KAogICAgICAgIE1pbnRFdmVudHsKICAgICAgICAgIHNlbmRlcjogc2VuZGVyKCksCiAgICAgICAgICB2YWx1ZTogY29udGV4dCgpLnZhbHVlLAogICAgICAgICAgcmF0ZTogbXNnLnJhdGUsCiAgICAgICAgICBwb2ludHM6IHBvaW50CiAgICAgICAgfS50b0NlbGwoKQogICAgICApOwogICAgfWVsc2V7CiAgICAgIGVtaXQoCiAgICAgICAgTWludEV2ZW50ewogICAgICAgICAgc2VuZGVyOiBzZW5kZXIoKSwKICAgICAgICAgIHZhbHVlOiBjb250ZXh0KCkudmFsdWUsCiAgICAgICAgICByYXRlOiBtc2cucmF0ZSwKICAgICAgICAgIHBvaW50czogMAogICAgICAgIH0udG9DZWxsKCkKICAgICAgKTsKICAgIH0KICB9CgogIHJlY2VpdmUoIkNsYWltRmVlIikgewogICAgcmVxdWlyZShzZW5kZXIoKSA9PSBzZWxmLmFkbWluLCAiT25seSBvd25lciBjYW4gY2xhaW0gZmVlIik7CiAgICBzZW5kKFNlbmRQYXJhbWV0ZXJzewogICAgICAgIHRvOiBzZWxmLmFkbWluLAogICAgICAgIHZhbHVlOiBteUJhbGFuY2UoKSAtIHRvbigiMC4xIiksCiAgICAgICAgYm91bmNlOiBmYWxzZSwKICAgICAgICBtb2RlOiBTZW5kUGF5R2FzU2VwYXJhdGVseQogICAgfSk7CiAgfQoKICAvLyAtLS0tLS0tLS0tLS0tLSBHZXQgTWV0aG9kIC0tLS0tLS0tLS0tLS0tIC8vIAogIGdldCBmdW4gZ2V0X3BvaW50c19ieV9hZGRyZXNzKGFkZHJlc3M6IEFkZHJlc3MpOiBJbnQgewogICAgbGV0IHVzZXJQb2ludHM6IEludD8gPSBzZWxmLnBvaW50c09mLmdldChhZGRyZXNzKTsKICAgIGlmICh1c2VyUG9pbnRzID09IG51bGwpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9ZWxzZXsKICAgICAgcmV0dXJuIHVzZXJQb2ludHMhITsKICAgIH0KICB9CiAgZ2V0IGZ1biBnZXRfc2hhcmVzX2J5X2FkZHJlc3MoYWRkcmVzczogQWRkcmVzcyk6IEludCB7CiAgICBsZXQgdXNlclBvaW50czogSW50PyA9IHNlbGYucG9pbnRzT2YuZ2V0KGFkZHJlc3MpOwogICAgaWYgKHVzZXJQb2ludHMgPT0gbnVsbCkgewogICAgICByZXR1cm4gMDsKICAgIH1lbHNlewogICAgICByZXR1cm4gdXNlclBvaW50cyEhKjEwMDAwMC9zZWxmLnRvdGFsUG9pbnRzOwogICAgfQogIH0KICBnZXQgZnVuIGdldF90b3RhbFBvaW50cygpOiBJbnQgewogICAgcmV0dXJuIHNlbGYudG90YWxQb2ludHM7CiAgfQogIGdldCBmdW4gZ2V0X2FsbF9hY2NvdW50cygpOiBtYXA8QWRkcmVzcywgSW50IGFzIHVpbnQyNTY+ewogICAgcmV0dXJuIHNlbGYucG9pbnRzT2Y7CiAgfQogIGdldCBmdW4gZ2V0X2FjY291bnRfc3RhdGUoYWRkcmVzczogQWRkcmVzcyk6IEFjY291bnRTdGF0ZXsKICAgIGxldCB1c2VyUG9pbnRzOiBJbnQ/ID0gc2VsZi5wb2ludHNPZi5nZXQoYWRkcmVzcyk7CiAgICBpZiAodXNlclBvaW50cyA9PSBudWxsKSB7CiAgICAgIHVzZXJQb2ludHMgPSAwOwogICAgfQoKICAgIGxldCBmZWVzOiBJbnQ/ID0gc2VsZi5mZWVzT2YuZ2V0KGFkZHJlc3MpOwogICAgaWYgKGZlZXMgPT0gbnVsbCkgewogICAgICBmZWVzID0gMDsKICAgIH0KCiAgICByZXR1cm4gQWNjb3VudFN0YXRlIHsgCiAgICAgIHBvaW50czogdXNlclBvaW50cyEhLAogICAgICBmZWVzOiBmZWVzISEsCiAgICAgIHRvdGFsUG9pbnRzOiBzZWxmLnRvdGFsUG9pbnRzLAogICAgICB0b3RhbEZlZXM6IHNlbGYudG90YWxGZWVzCiAgICB9OwogIH0KfQ=="},"compiler":{"name":"tact","version":"1.1.5","parameters":"{\"entrypoint\":\"contracts/mintWar.tact\",\"options\":{}}"}}