;;
;; Header files for Main
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Data$_store
builder $Data$_store(builder build_0, (slice) v) inline;

;; $Data$_store_cell
cell $Data$_store_cell((slice) v) inline;

;; $DataInput$_load
(slice, ((slice, slice))) $DataInput$_load(slice sc_0) inline;

;; $Saver$init$_store
builder $Saver$init$_store(builder build_0, (slice, slice, slice) v) inline;

;; $Main$_contract_init
tuple $Main$_contract_init() impure inline_ref;

;; $Main$_contract_load
tuple $Main$_contract_load() impure inline_ref;

;; $Main$_contract_store
() $Main$_contract_store(tuple v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Saver$_init_child
(cell, cell) $Saver$_init_child(cell sys', slice $master, slice $owner, slice $key) inline_ref;

;; $Main$_fun_getInitAddress
(tuple, slice) $Main$_fun_getInitAddress(tuple $self, slice $owner, slice $key) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $Data$_constructor_data
((slice)) $Data$_constructor_data(slice data) inline;
