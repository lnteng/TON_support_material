#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/exceptions.fc";

int is_null?(slice s) asm "ISNULL";

const int gas_for_jetton_transfer = 80000000;  ;; 0.08 TON
const int gas_for_nft_transfer = 50000000;  ;; 0.05 TON
const int gas_for_burn = 10000000;  ;; 0.01 TON
const int gas_for_provide_addr = 20000000;  ;; 0.02 TON
const int gas_for_simple_tx = 7000000;  ;; 0.007 TON
const int computing_gas = 15000000;  ;; 0.015 TON
const int min_tons_for_storage = 50000000;  ;; 0.05 TON

const int one_day = 60 * 60 * 24;
const int commission_devider = 100000;
const int staking_devider = 1000000000;


global int storage::init?;
global int storage::wallet_lock_changed;
global int storage::wallet_rewards_changed;

global int storage::next_item_index;
global cell storage::nft_item_code;
global cell storage::collection_content;

global slice storage::lock_wallet_address;
global slice storage::rewards_wallet_address;

global cell storage::staking_params;
global int storage::minimum_deposit;
global int storage::commission_factor;

global int storage::reward_jettons;
global int storage::withdrawable_jettons;

global cell storage::last_cell;
global slice storage::admin_address;
global slice storage::creator_address;
global int storage::tvl;


() load_data() impure inline {
    var ds = get_data().begin_parse();

    storage::init?                  = ds~load_uint(1);
    storage::next_item_index        = ds~load_uint(32);  
    storage::nft_item_code          = ds~load_ref();  
    storage::collection_content     = ds~load_ref();

    storage::lock_wallet_address    = ds~load_msg_addr();
    storage::rewards_wallet_address = ds~load_msg_addr();

    storage::staking_params         = ds~load_dict();
    storage::minimum_deposit        = ds~load_coins();
    storage::commission_factor      = ds~load_uint(16);
    storage::reward_jettons         = ds~load_coins();
    storage::withdrawable_jettons   = ds~load_coins();
    storage::tvl                    = ds~load_coins();

    storage::wallet_lock_changed    = ds~load_uint(1);
    storage::wallet_rewards_changed = ds~load_uint(1);

    storage::last_cell              = ds~load_ref();
}

() load_last_cell() impure inline {
    slice ds = storage::last_cell.begin_parse();
    storage::admin_address = ds~load_msg_addr();
    storage::creator_address = ds~load_msg_addr();
}


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(storage::init?, 1)
            .store_uint(storage::next_item_index, 32)
            .store_ref(storage::nft_item_code)
            .store_ref(storage::collection_content)
            .store_slice(storage::lock_wallet_address)
            .store_slice(storage::rewards_wallet_address)
            .store_dict(storage::staking_params)
            .store_coins(storage::minimum_deposit)
            .store_uint(storage::commission_factor, 16)
            .store_coins(storage::reward_jettons)
            .store_coins(storage::withdrawable_jettons)
            .store_coins(storage::tvl)  ;; theoretically there can be an error
            .store_uint(storage::wallet_lock_changed, 1)
            .store_uint(storage::wallet_rewards_changed, 1)
            .store_ref(storage::last_cell)
        .end_cell()
    );
}


cell calculate_nft_item_state_init(int item_index) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(storage::nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell()
                .store_uint(4, 3)
                .store_int(wc, 8)
                .store_uint(cell_hash(state_init), 256)
                .end_cell()
            .begin_parse();
}


() deploy_nft_item(int item_index, cell nft_content) impure inline {
    cell state_init = calculate_nft_item_state_init(item_index);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    builder msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(nft_address)
                    .store_coins(0)
                    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                    .store_ref(state_init)
                    .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 64); 
}


() send_jettons(int query_id, int jetton_amount, slice to_address, slice jetton_wallet_address, 
                int msg_value, int sending_mode) impure inline {

    builder msg = begin_cell()
                .store_uint(0x10, 6) 
                .store_slice(jetton_wallet_address)
                .store_coins(msg_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(
                    begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address)
                        .store_slice(to_address)
                        .store_uint(0, 1)
                        .store_coins(1)
                        .store_uint(0, 1)
                    .end_cell()
                );
            
    send_raw_message(msg.end_cell(), sending_mode);  
}


() send_nft(int query_id, slice nft_address, slice to_address, 
            int rewards_claimed, int msg_value, int sending_mode) impure inline {

    builder msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(nft_address)
                    .store_coins(msg_value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_uint(1, 1)
                    .store_ref(
                        begin_cell()
                            .store_uint(op::transfer, 32)
                            .store_uint(query_id, 64)
                            .store_slice(to_address)
                            .store_slice(to_address)
                            .store_uint(0, 1)
                            .store_coins(1)
                            .store_coins(rewards_claimed)
                        .end_cell()
                    );

    send_raw_message(msg.end_cell(), sending_mode); 
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();
    if (storage::init? == 0) {
        storage::init? = 1;
        load_last_cell();

        builder tmp = begin_cell()
                        .store_coins(gas_for_provide_addr)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op::provide_wallet_address, 32)
                        .store_uint(now(), 64)
                        .store_slice(my_address())
                        .store_uint(0, 1);
        builder msg_rewards = begin_cell().store_uint(0x18, 6).store_slice(storage::rewards_wallet_address).store_builder(tmp);
        send_raw_message(msg_rewards.end_cell(), 1);

        if (~ equal_slices(storage::rewards_wallet_address, storage::lock_wallet_address)) {
            builder msg_lock = begin_cell().store_uint(0x18, 6).store_slice(storage::lock_wallet_address).store_builder(tmp);
            send_raw_message(msg_lock.end_cell(), 1);
        }
        save_data();
        return ();
    }
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; custom op-codes
    ;; someone transferred nft to somebody (not to this smc)
    if (op == op::nft_transferred) {
        return ();
    }
    
    ;; jetton transfer notification
    if (op == op::transfer_notification) {
        throw_unless(exc::not_enough_ton_for_gas, msg_value >= gas_for_jetton_transfer); 
        
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        int lock_period = 0;
        ifnot (in_msg_body.slice_empty?()) {
            lock_period = in_msg_body~load_uint(32);
        }

        if (lock_period == 0xffffffff) {  ;; increase reward jettons
            if (storage::wallet_rewards_changed == 0) {   ;; for non-discoverable jettons
                storage::rewards_wallet_address = sender_address;
                storage::wallet_rewards_changed = 1;
            } 
            ifnot (equal_slices(sender_address, storage::rewards_wallet_address)) {
                send_jettons(query_id, jetton_amount, from_address, sender_address, 0, 64);
                return ();
            }
            int commissions = muldiv(jetton_amount, storage::commission_factor, commission_devider);
            storage::withdrawable_jettons += commissions; 
            storage::reward_jettons += jetton_amount - commissions;
            save_data();

            builder msg = begin_cell()
                            .store_uint(0x10, 6)
                            .store_slice(from_address)
                            .store_coins(0)
                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                            .store_uint(op::excesses, 32);
            send_raw_message(msg.end_cell(), 64);   

            return ();
        }
        else {
            ;; throw_unless(exc::incorrect_jetton, equal_slices(sender_address, storage::lock_wallet_address));
            ;; throw_unless(exc::less_then_min_deposit, jetton_amount >= storage::minimum_deposit);
            if (storage::wallet_lock_changed == 0) {  ;; for non-discoverable jettons
                storage::lock_wallet_address = sender_address;
                storage::wallet_lock_changed = 1;
            } 
            ifnot (equal_slices(sender_address, storage::lock_wallet_address) & (jetton_amount >= storage::minimum_deposit)) {
                send_jettons(query_id, jetton_amount, from_address, sender_address, 0, 64);
                return ();
            }
            (slice staking_factor_slice, _) = storage::staking_params.udict_get?(32, lock_period);
            int staking_factor = 0xffffffffffffffffffffffffffffffff;  ;; uint128_max
            if (~ staking_factor_slice.is_null?()) {
                staking_factor = staking_factor_slice~load_uint(128);
            }
            
            int staking_rewards = muldiv(jetton_amount, staking_factor, staking_devider);
            throw_unless(exc::no_rewards_left, storage::reward_jettons >= staking_rewards); 

            int now_time = now();
            cell nft_content = begin_cell()
                                .store_uint(storage::next_item_index, 64)
                                .store_coins(0)  ;; rewards claimed
                                .store_uint(now_time, 32)  ;; start time
                                .store_uint(lock_period, 32)  ;; lock period
                                .store_coins(jetton_amount)  ;; amount of jettons to lock
                                .store_coins(staking_factor)  ;; staking rate factor
                            .end_cell();
            cell nft_message = begin_cell()
                                .store_slice(from_address)  
                                .store_ref(nft_content)
                            .end_cell();
            
            deploy_nft_item(storage::next_item_index, nft_message);  ;; deploy NFT that proves ownership of locked jettons

            storage::reward_jettons -= staking_rewards;  ;; decrease reward jettons
            storage::tvl += jetton_amount;  ;; increase tvl
            storage::next_item_index += 1;  ;; increase next_item_index

            save_data();
            return ();
        }
    }

    ;; NFT transfer notification
    if (op == op::ownership_assigned) {
        msg_value -= computing_gas;
        throw_unless(exc::not_enough_ton_for_gas, msg_value >= gas_for_jetton_transfer + gas_for_nft_transfer);

        slice from_address = in_msg_body~load_msg_addr();

        ;; check that nft is from this collection
        int item_index = in_msg_body~load_uint(64);  
        cell state_init = calculate_nft_item_state_init(item_index);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);
        ifnot(equal_slices(sender_address, nft_address)) {
            send_nft(query_id, nft_address, from_address, 0, 0, 64);
            return ();
        }
        
        slice nft_content = in_msg_body~load_ref().begin_parse();
        int sending_mode = in_msg_body~load_uint(1);

        int rewards_claimed = nft_content~load_coins();
        int start_time = nft_content~load_uint(32);
        int lock_period = nft_content~load_uint(32);
        int staked_amount = nft_content~load_coins();
        int staking_factor = nft_content~load_coins();
        
        int end_time = start_time + lock_period;
        int now_time = min(now(), end_time);

        int max_rewards = muldiv(staked_amount, staking_factor, staking_devider);
        int rewards_gained =  muldiv(max_rewards, (now_time - start_time), lock_period);

        if ((sending_mode == 0) | (now_time == end_time)) {  ;; safe withdrawing or claim (don't close your position if lock period isn't over)
            send_jettons(query_id, rewards_gained - rewards_claimed, from_address, storage::rewards_wallet_address, gas_for_jetton_transfer, 0);
            ;; check that lockup period is over
            if (now_time < end_time) {   ;; if not -> return nft back to user and send rewards
                send_nft(query_id, nft_address, from_address,
                        rewards_gained, msg_value - gas_for_jetton_transfer, 0);
            }
            else {  ;; else -> unstake
                ;; burn nft after unstaking
                cell burn_msg = begin_cell()
                                    .store_uint(0x18, 6)
                                    .store_slice(sender_address)
                                    .store_coins(gas_for_burn)
                                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                                    .store_uint(op::burn, 32)
                                    .store_uint(query_id, 64)
                                    .store_slice(from_address)
                                .end_cell();
                send_raw_message(burn_msg, 0); 
                ;; and send jettons back
                storage::tvl -= staked_amount;
                send_jettons(query_id, staked_amount, from_address, storage::lock_wallet_address, msg_value - gas_for_burn - gas_for_jetton_transfer, 0);
            }
        }
        else {  ;; force close position 
            ;; not implemented yet
        }

        save_data();
        return ();
    }

    if (op == op::get_info) {
        cell info_msg = begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(sender_address)
                        .store_coins(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                        .store_uint(1, 1)
                        .store_ref(get_data())
                    .end_cell();
        send_raw_message(info_msg, 64); 
        return ();
    }

    if (op == op::take_wallet_address) {  ;; change wallet address (used only once)
        if (equal_slices(sender_address, storage::lock_wallet_address)) {
            storage::wallet_lock_changed = 1;
            if (equal_slices(storage::lock_wallet_address, storage::rewards_wallet_address)) {
                storage::rewards_wallet_address = in_msg_body~load_msg_addr();
                storage::lock_wallet_address = storage::rewards_wallet_address;
                storage::wallet_rewards_changed = 1;
            }
            else {
                storage::lock_wallet_address = in_msg_body~load_msg_addr();
            }
        }
        elseif (equal_slices(sender_address, storage::rewards_wallet_address)) {
            storage::rewards_wallet_address = in_msg_body~load_msg_addr();
            storage::wallet_rewards_changed = 1;
        }
        
        save_data();
        return ();
    }

    load_last_cell();

    ;; admin op-codes
    if (op == op::withdraw_fees) {  ;; withdraw fees
        throw_unless(exc::incorrect_sender_address, equal_slices(sender_address, storage::admin_address));
        throw_unless(exc::not_enough_ton_for_gas, msg_value > gas_for_jetton_transfer);

        if (storage::withdrawable_jettons != 0) {
            send_jettons(query_id, storage::withdrawable_jettons, sender_address, storage::rewards_wallet_address, 0, 64);
            storage::withdrawable_jettons = 0;
        }
        
        if (my_balance > min_tons_for_storage + msg_value + computing_gas + gas_for_simple_tx) {  ;; check that there is sufficient balance for tx
            builder msg = begin_cell()
                            .store_uint(0x10, 6)
                            .store_slice(sender_address)
                            .store_coins(my_balance - min_tons_for_storage - msg_value - computing_gas)
                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
                        
            send_raw_message(msg.end_cell(), 0); 
        }

        save_data();
        return ();
    }

    if (op == op::withdraw_rewards) {
        throw_unless(exc::incorrect_sender_address, equal_slices(sender_address, storage::creator_address));
        throw_unless(exc::not_enough_ton_for_gas, msg_value > gas_for_jetton_transfer + computing_gas);

        int jettons_to_withdraw = in_msg_body~load_coins();
        throw_unless(exc::no_rewards_left, jettons_to_withdraw <= storage::reward_jettons);
        send_jettons(query_id, jettons_to_withdraw, sender_address, storage::rewards_wallet_address, 0, 64);
        storage::reward_jettons -= jettons_to_withdraw;

        save_data();
        return ();
    }

    if (op == op::change_min_deposit) {
        throw_unless(exc::incorrect_sender_address, equal_slices(sender_address, storage::creator_address));
        storage::minimum_deposit = in_msg_body~load_coins();
        save_data();
        return ();
    }

    if (op == op::withdraw_accident_jettons) {
        throw_unless(exc::incorrect_sender_address, equal_slices(sender_address, storage::admin_address) | equal_slices(sender_address, storage::creator_address));
        throw_unless(exc::not_enough_ton_for_fees, msg_value > gas_for_jetton_transfer + computing_gas);

        slice jetton_to_withdraw = in_msg_body~load_msg_addr();
        throw_if(exc::incorrect_jetton,
                equal_slices(jetton_to_withdraw, storage::rewards_wallet_address) | equal_slices(jetton_to_withdraw, storage::lock_wallet_address));  ;; cant't withdraw main jetton

        int jetton_amount = in_msg_body~load_coins();
        send_jettons(query_id, jetton_amount, sender_address, jetton_to_withdraw, 0, 64);

        return ();
    }

    throw(exc::unsupported_op);
}


;; Get methods

(int, cell, slice) get_collection_data() method_id {
load_data();
slice cs = storage::collection_content.begin_parse();
return (storage::next_item_index, cs~load_ref(), "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index);
    return calculate_nft_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_content) method_id {
    load_data();
    slice cs = storage::collection_content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();

    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = index~divmod(10);
        chars = cons(r + 48, chars);
    } until (index == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));
    
    return (begin_cell()
                .store_uint(1, 8)  ;; offchain tag
                .store_slice(common_content)
                .store_ref(string.end_cell())
            .end_cell());
}

(int, int, slice) royalty_params() method_id {  ;; for marketplaces and explorers
    return (0, 100, my_address());
}

(int, cell, cell, slice, slice, cell, int, int, int, int, slice, slice, int) get_staking_data() method_id {
    load_data();
    load_last_cell();
    return (storage::next_item_index, storage::nft_item_code, storage::collection_content, storage::lock_wallet_address,
            storage::rewards_wallet_address, storage::staking_params, storage::minimum_deposit, storage::commission_factor,
            storage::reward_jettons, storage::withdrawable_jettons, storage::admin_address, storage::creator_address, storage::tvl);
}

(cell) raw_get_data() method_id {
    return get_data();
}

(int) get_version() method_id {
    return 2;
}
