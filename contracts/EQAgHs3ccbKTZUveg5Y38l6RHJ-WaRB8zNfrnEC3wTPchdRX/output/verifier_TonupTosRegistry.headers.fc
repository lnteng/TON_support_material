;;
;; Header files for TonupTosRegistry
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ReadConsent$_load
(slice, ((slice))) $ReadConsent$_load(slice sc_0) inline;

;; $ConsentReply$_store
builder $ConsentReply$_store(builder build_0, (slice, int) v) inline;

;; $ConsentReply$_store_cell
cell $ConsentReply$_store_cell((slice, int) v) inline;

;; $ConsentEvent$_store
builder $ConsentEvent$_store(builder build_0, (slice, int) v) inline;

;; $ConsentEvent$_store_cell
cell $ConsentEvent$_store_cell((slice, int) v) inline;

;; $TonupTosRegistry$_store
builder $TonupTosRegistry$_store(builder build_0, (slice, cell, int) v) inline;

;; $TonupTosRegistry$_load
(slice, ((slice, cell, int))) $TonupTosRegistry$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $TonupTosRegistry$init$_load
(slice, ((slice))) $TonupTosRegistry$init$_load(slice sc_0) inline;

;; $TonupTosRegistry$_contract_init
(slice, cell, int) $TonupTosRegistry$_contract_init(slice $owner) impure inline_ref;

;; $TonupTosRegistry$_contract_load
(slice, cell, int) $TonupTosRegistry$_contract_load() impure inline_ref;

;; $TonupTosRegistry$_contract_store
() $TonupTosRegistry$_contract_store((slice, cell, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_bounce
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline;

;; $global_refund_gas
() $global_refund_gas() impure inline;

;; $SendParameters$_constructor_value_to_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_bounce_mode_body(int value, slice to, int bounce, int mode, cell body) inline;

;; $global_send_ton_with_ramaining
() $global_send_ton_with_ramaining(slice $to, int $value, int $bounce, cell $body) impure inline;

;; $TonupTosRegistry$_fun_hasAccepted
((slice, cell, int), int) $TonupTosRegistry$_fun_hasAccepted((slice, cell, int) $self, slice $addr) impure inline_ref;

;; $TonupTosRegistry$_fun_consentMessage
((slice, cell, int), slice) $TonupTosRegistry$_fun_consentMessage((slice, cell, int) $self) impure inline_ref;

;; $TonupTosRegistry$_fun_currentVersion
((slice, cell, int), int) $TonupTosRegistry$_fun_currentVersion((slice, cell, int) $self) impure inline_ref;

;; $TonupTosRegistry$_fun_numberUsers
((slice, cell, int), int) $TonupTosRegistry$_fun_numberUsers((slice, cell, int) $self) impure inline_ref;

;; $TonupTosRegistry$_fun_balance
((slice, cell, int), int) $TonupTosRegistry$_fun_balance((slice, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TonupTosRegistry$_fun_forward
((slice, cell, int), ()) $TonupTosRegistry$_fun_forward((slice, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TonupTosRegistry$_fun_reply
((slice, cell, int), ()) $TonupTosRegistry$_fun_reply((slice, cell, int) $self, cell $body) impure inline;

;; $TonupTosRegistry$_fun_notify
((slice, cell, int), ()) $TonupTosRegistry$_fun_notify((slice, cell, int) $self, cell $body) impure inline;

;; $TonupTosRegistry$_fun_requireOwner
((slice, cell, int), ()) $TonupTosRegistry$_fun_requireOwner((slice, cell, int) $self) impure inline_ref;

;; $TonupTosRegistry$_fun_owner
((slice, cell, int), slice) $TonupTosRegistry$_fun_owner((slice, cell, int) $self) impure inline_ref;

;; $ConsentEvent$_constructor_addr_timestamp
((slice, int)) $ConsentEvent$_constructor_addr_timestamp(slice addr, int timestamp) inline;

;; $ConsentReply$_constructor_addr_accepted
((slice, int)) $ConsentReply$_constructor_addr_accepted(slice addr, int accepted) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
