;;
;;  Source item smart contract
;;

#pragma version >=0.2.0;
#include "imports/stdlib.fc";

const int error::access_denied = 401;
const int error::unknown_op = 0xffff;

;;  Storage
;;
;;  uint256 verifier_id
;;  uint256 verified_code_cell_hash
;;  MsgAddressInt source_item_registry
;;  cell content
;;
(int, int, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (verifier_id, verified_code_cell_hash, source_item_registry) = (ds~load_uint(256), ds~load_uint(256), ds~load_msg_addr());
    return (verifier_id, verified_code_cell_hash, source_item_registry, ds.slice_refs_empty?() ? null() : ds~load_ref());
}

() store_data(int verifier_id, int verified_code_cell_hash, slice source_item_registry, cell content) impure {
    set_data(
        begin_cell()
            .store_uint(verifier_id, 256)
            .store_uint(verified_code_cell_hash, 256)
            .store_slice(source_item_registry)
            .store_ref(content)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    (int verifier_id, int verified_code_cell_hash, slice source_item_registry, cell content) = load_data();
    throw_unless(error::access_denied, equal_slices(source_item_registry, sender_address));
    store_data(verifier_id, verified_code_cell_hash, source_item_registry, begin_cell().store_slice(in_msg_body).end_cell());
}

;;
;;  GET Methods
;;
(int, int, slice, cell) get_source_item_data() method_id {
  (int verifier_id, int verified_code_cell_hash, slice source_item_registry, cell content) = load_data();
  return (verifier_id, verified_code_cell_hash, source_item_registry, content);
}