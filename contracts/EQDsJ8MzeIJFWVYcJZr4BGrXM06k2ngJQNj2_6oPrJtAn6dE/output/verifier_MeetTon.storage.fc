;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: Withdraw
;; Header: 0x0ba69751
;; TLB: withdraw#0ba69751 amount:coins = Withdraw
;;

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 195467089);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: Income
;; Header: 0x2324ff54
;; TLB: income#2324ff54 goal:^string id:uint32 for:Maybe uint32 = Income
;;

(slice, ((slice, int, int))) $Income$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 589627220);
    var v'goal = sc_0~load_ref().begin_parse();
    var v'id = sc_0~load_uint(32);
    var v'for = sc_0~load_int(1) ? sc_0~load_uint(32) : null();
    return (sc_0, (v'goal, v'id, v'for));
}

;;
;; Type: Payment
;; TLB: _ sender:address goal:^string value:coins date:uint32 id:uint32 for:Maybe uint32 = Payment
;;

builder $Payment$_store(builder build_0, (slice, slice, int, int, int, int) v) inline_ref {
    var (v'sender, v'goal, v'value, v'date, v'id, v'for) = v;
    build_0 = __tact_store_address(build_0, v'sender);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'goal).end_cell());
    build_0 = build_0.store_coins(v'value);
    build_0 = build_0.store_uint(v'date, 32);
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = ~ null?(v'for) ? build_0.store_int(true, 1).store_uint(v'for, 32) : build_0.store_int(false, 1);
    return build_0;
}

cell $Payment$_store_cell((slice, slice, int, int, int, int) v) inline {
    return $Payment$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, slice, int, int, int, int))) $Payment$_load(slice sc_0) inline_ref {
    var v'sender = sc_0~__tact_load_address();
    var v'goal = sc_0~load_ref().begin_parse();
    var v'value = sc_0~load_coins();
    var v'date = sc_0~load_uint(32);
    var v'id = sc_0~load_uint(32);
    var v'for = sc_0~load_int(1) ? sc_0~load_uint(32) : null();
    return (sc_0, (v'sender, v'goal, v'value, v'date, v'id, v'for));
}

tuple $Payment$_as_optional((slice, slice, int, int, int, int) v) inline {
    var (v'sender, v'goal, v'value, v'date, v'id, v'for) = v;
    return __tact_tuple_create_6(v'sender, v'goal, v'value, v'date, v'id, v'for);
}

tuple $Payment$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Payment$_as_optional(sc~$Payment$_load());
}

((slice, slice, int, int, int, int)) $Payment$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'sender, slice vvv'goal, int vvv'value, int vvv'date, int vvv'id, int vvv'for) = __tact_tuple_destroy_6(v);
    return (vvv'sender, vvv'goal, vvv'value, vvv'date, vvv'id, vvv'for);
}

tuple $Payment$_to_tuple(((slice, slice, int, int, int, int)) v) inline {
    var (v'sender, v'goal, v'value, v'date, v'id, v'for) = v;
    return __tact_tuple_create_6(v'sender, v'goal, v'value, v'date, v'id, v'for);
}

tuple $Payment$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Payment$_to_tuple($Payment$_not_null(v)); 
}

tuple $Payment$_to_opt_external(tuple v) inline {
    var loaded = $Payment$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((slice, slice, int, int, int, int)) $Payment$_constructor_for_id_goal_value_sender_date(int for, int id, slice goal, int value, slice sender, int date) inline {
    return (sender, goal, value, date, id, for);
}

;;
;; Type: Clear
;; Header: 0x6a472534
;; TLB: clear#6a472534 itemNumb:int257 = Clear
;;

(slice, ((int))) $Clear$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1783047476);
    var v'itemNumb = sc_0~load_int(257);
    return (sc_0, (v'itemNumb));
}

;;
;; Type: MeetTon
;;

builder $MeetTon$_store(builder build_0, (slice, int, cell, int) v) inline {
    var (v'owner, v'stopped, v'payments, v'arrLength) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'stopped, 1);
    build_0 = build_0.store_dict(v'payments);
    build_0 = build_0.store_int(v'arrLength, 257);
    return build_0;
}

(slice, ((slice, int, cell, int))) $MeetTon$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'stopped = sc_0~load_int(1);
    var v'payments = sc_0~load_dict();
    var v'arrLength = sc_0~load_int(257);
    return (sc_0, (v'owner, v'stopped, v'payments, v'arrLength));
}

(slice, int, cell, int) $MeetTon$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MeetTon$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $MeetTon$_contract_init();
    }
}

() $MeetTon$_contract_store((slice, int, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MeetTon$_store(b, v);
    set_data(b.end_cell());
}