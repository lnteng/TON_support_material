;; Jettons discoverable smart contract

#include "opcodes.fc";
#include "errors.fc";
#include "../common/stdlib.fc";
#include "../common/opcodes.fc";
#include "../common/utils.fc";

;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
int provide_address_gas_consumption() asm "10000000 PUSHINT";

;; keys to get params from custom payload on burn.

const int payload_key::destination_addr = 0x4fe560c1;
const int payload_key::jetton_coin_id = 0x53c2ce98;

;; discovery params

int op::provide_wallet_address() asm "0x2c76b973 PUSHINT";
int op::take_wallet_address() asm "0xd1735400 PUSHINT";

int is_resolvable?(slice addr) inline {
    (int wc, _) = parse_std_addr(addr);

    return wc == workchain();
}

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(),    ;; total_supply
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(),      ;; content
        ds~load_ref()       ;; jetton_wallet_code    ;; DEFECT: LackEndParse
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_address_by_state_init(state_init);

    cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(to_wallet_address)
                .store_coins(amount)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(master_msg)
            .end_cell();

    send_raw_message(msg, 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins();    ;; skip value
    cs~skip_bits(1);    ;; skip extracurrency collection
    cs~load_coins();    ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs    ;; DEFECT: LackEndParse

    slice in_msg_body_copy = in_msg_body;
    (int op, int query_id) = in_msg_body~load_body_header();

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    (_, int admin_address_hash) = parse_std_addr(admin_address);
    (int sender_wc, int sender_address_hash) = parse_std_addr(sender_address);

    if (op == op::mint()) {
        throw_unless(73, (sender_wc == -1) & (sender_address_hash == admin_address_hash));

        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();    ;; DEFECT: LackEndParse

        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id

        int jetton_amount = master_msg_cs~load_coins();    ;; DEFECT: LackEndParse

        mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);

        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        slice response_address = in_msg_body~load_msg_addr();
        cell custom_payload = in_msg_body~load_dict();    ;; DEFECT: LackEndParse

        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );

        (cell cda, int address_set) = custom_payload.udict_get_ref?(32, payload_key::destination_addr);
        (cell cci, int coin_id_set) = custom_payload.udict_get_ref?(32, payload_key::jetton_coin_id);

        throw_unless(error::invalid_payload, address_set & coin_id_set);

        slice scda = cda.begin_parse();
        slice scci = cci.begin_parse();

        int destination_address = scda~load_uint(160);    ;; DEFECT: LackEndParse
        int jetton_coin_id = scci~load_uint(32);    ;; DEFECT: LackEndParse

        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);

        cell new_body = begin_cell()
                            .store_body_header(op::burn_notification(), query_id)
                            .store_coins(jetton_amount)
                            .store_uint(destination_address, 160)
                            .store_uint(jetton_coin_id, 32)
                        .end_cell();

        cell msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_masterchain_address(admin_address_hash) ;; admin_address represents bridge address.
                    .store_coins(0)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(new_body)
                .end_cell();

        send_raw_message(msg, 64);

        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                    .store_slice(response_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::excesses(), 32)
                    .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);    ;; DEFECT: LackEndParse

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::take_wallet_address(), 32)
                .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);    ;; DEFECT: UnHandleBouncedMessage
        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();    ;; DEFECT: LackEndParse
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);    ;; DEFECT: LackEndParse
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}