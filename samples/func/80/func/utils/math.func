;; math logic 


;; babylonian sqrt (~3500 gas)
int sqrt(int x) {
  if (x == 0) { return 0; }

  int xx = x;
  int r = 1;
  if (xx >= 0x100000000000000000000000000000000) {
    xx >>= 128;
    r <<= 64;
  }
  if (xx >= 0x10000000000000000) {
    xx >>= 64;
    r <<= 32;
  }
  if (xx >= 0x100000000) {
    xx >>= 32;
    r <<= 16;
  }
  if (xx >= 0x10000) {
    xx >>= 16;
    r <<= 8;
  }
  if (xx >= 0x100) {
    xx >>= 8;
    r <<= 4;
  }
  if (xx >= 0x10) {
    xx >>= 4;
    r <<= 2;
  }
  if (xx >= 0x8) {
    r <<= 1;
  }
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;

  int r1 = x / r;

  return (r < r1 ? r : r1);
}

int division(int a, int b) { ;; division with factor
    return muldiv(a, 1000000000, b);
}

int multiply(int a, int b) { ;; multiply with factor
    return muldiv(a, b, 1000000000);
}


int get_percent(int a, int percent, int factor) {
    return division(multiply(a, percent), factor);
}

int minus_percent(int a, int percent, int factor) { ;; subtract the percentage from the number
    return a - get_percent(a, percent, factor);
}

int plus_percent(int a, int percent, int factor) {
    return a + get_percent(a, percent, factor);
}



{-
LP formulas I'm dead inside 1000 - 🐈⛓
-}


int math::get_lp_value(int a, int b) {
    return sqrt(a * b);
}



(
int, ;; return lp tokens
int ;; return b 
)
math::add_lp(int a, int b) method_id {
    int c = get_linear_price();
    int b_need = division(a, c);
    int b_out = b - b_need;
    if ( b_out < 0 ) { return (-1, -1);}
    int lp_out = math::get_lp_value(a, b_need);
    return (lp_out, b_out); 
}


(
    int,  ;; a out
    int   ;; b out
) math::del_lp(int a) method_id {
    init_data();
    int user_percent = division(a, lp_total_supply);
    int a_out = get_percent(get_balance().pair_first() - service_collect_fee - lp_collect_fee, user_percent, 1000000000);
    int b_out = get_percent(biton_balance, user_percent, 1000000000);
    a_out = minus_percent(a_out, 100000000, 1000000000);
    b_out = minus_percent(b_out, 100000000, 1000000000);
    return (a_out, b_out);
}





;; ton -> biton
(
    int, ;; amount out
    int, ;; market price
    int, ;; service fee
    int  ;; lp fee
) get_price_biton(int amount_traded) method_id { ;; this function returns the amount to be sent and the market price
    init_data();
    int reserve_a_initial = pair_first(get_balance()) - service_collect_fee - lp_collect_fee; ;; liq ton
    int reserve_b_initial = biton_balance; ;; liq biton
    int s_fee = get_percent(amount_traded, a_service_fee, 1000000000);
    int lp_fee = get_percent(amount_traded, lp_fee_percentage, 1000000000);
    int amount_input = amount_traded - s_fee - lp_fee; ;; equivalent to amount_traded - service_fee(percentage)
    int k = multiply(reserve_a_initial, reserve_b_initial); ;; coefficient, needed for formulas
    int reserve_b_after_execution = division(k, reserve_a_initial + amount_input);
    int amount_out = reserve_b_initial - reserve_b_after_execution;
    int market_price = division(amount_input, amount_out);
    return (amount_out, market_price, s_fee, lp_fee);
}

;; biton -> ton
(
    int, ;; amount out
    int, ;; market price
    int, ;; service fee
    int  ;; lp fee
) get_price_ton(int amount_traded) method_id { ;; this function returns the amount to be sent and the market price
    init_data();
    int reserve_a_initial = pair_first(get_balance()) - service_collect_fee - lp_collect_fee; ;; liq ton
    int reserve_b_initial = biton_balance; ;; liq biton
    int amount_input = amount_traded; ;; equivalent to amount_traded - service_fee(percentage)
    int k = multiply(reserve_a_initial, reserve_b_initial); ;; coefficient, needed for formulas
    int reserve_a_after_execution = division(k, reserve_b_initial + amount_input);
    int amount_out = reserve_a_initial - reserve_a_after_execution;
    int s_fee = get_percent(amount_out, b_service_fee, 1000000000);
    int lp_fee = get_percent(amount_out, lp_fee_percentage, 1000000000);
    amount_out = amount_out - s_fee - lp_fee;
    int market_price = division(amount_input, amount_out);
    return (amount_out, market_price, s_fee, lp_fee);
}
