#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "user_default_callback_UserDefaultCallback.headers.fc";
#include "user_default_callback_UserDefaultCallback.stdlib.fc";
#include "user_default_callback_UserDefaultCallback.storage.fc";

;;
;; Contract UserDefaultCallback functions
;;

(slice, slice, cell, int) $UserDefaultCallback$_contract_init(slice $master, slice $owner, cell $parameter) impure inline_ref {
    var (($self'master, $self'owner, $self'parameter, $self'eventCount)) = (null(), null(), null(), null());
    $self'master = $master;
    $self'owner = $owner;
    $self'parameter = $parameter;
    $self'eventCount = 0;
    return ($self'master, $self'owner, $self'parameter, $self'eventCount);
}

((slice, slice, cell, int), int) $UserDefaultCallback$_fun_eventCount((slice, slice, cell, int) $self) impure inline_ref {
    var (($self'master, $self'owner, $self'parameter, $self'eventCount)) = $self;
    return (($self'master, $self'owner, $self'parameter, $self'eventCount), $self'eventCount);
}

((slice, slice, cell, int), slice) $UserDefaultCallback$_fun_owner((slice, slice, cell, int) $self) impure inline_ref {
    var (($self'master, $self'owner, $self'parameter, $self'eventCount)) = $self;
    return (($self'master, $self'owner, $self'parameter, $self'eventCount), $self'owner);
}

;;
;; Receivers of a Contract UserDefaultCallback
;;

(((slice, slice, cell, int)), ()) %$UserDefaultCallback$_internal_empty((slice, slice, cell, int) $self) impure inline {
    var ($self'master, $self'owner, $self'parameter, $self'eventCount) = $self;
    return (($self'master, $self'owner, $self'parameter, $self'eventCount), ());
}

(((slice, slice, cell, int)), ()) $UserDefaultCallback$_internal_binary_BuildUDC((slice, slice, cell, int) $self, (slice) $msg) impure inline {
    var ($self'master, $self'owner, $self'parameter, $self'eventCount) = $self;
    var ($msg'owner) = $msg;
    return (($self'master, $self'owner, $self'parameter, $self'eventCount), ());
}

(((slice, slice, cell, int)), ()) $UserDefaultCallback$_internal_binary_EventSignal((slice, slice, cell, int) $self, (int, cell) $msg) impure inline {
    var ($self'master, $self'owner, $self'parameter, $self'eventCount) = $self;
    var ($msg'eventId, $msg'payload) = $msg;
    $self'eventCount = ($self'eventCount + 1);
    return (($self'master, $self'owner, $self'parameter, $self'eventCount), ());
}

(((slice, slice, cell, int)), ()) $UserDefaultCallback$_internal_binary_Deploy((slice, slice, cell, int) $self, (int) $deploy) impure inline {
    var ($self'master, $self'owner, $self'parameter, $self'eventCount) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'master, $self'owner, $self'parameter, $self'eventCount)~$UserDefaultCallback$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'master, $self'owner, $self'parameter, $self'eventCount), ());
}

;;
;; Get methods of a Contract UserDefaultCallback
;;

_ %eventCount() method_id(75989) {
    var self = $UserDefaultCallback$_contract_load();
    var res = self~$UserDefaultCallback$_fun_eventCount();
    return res;
}

_ %owner() method_id(83229) {
    var self = $UserDefaultCallback$_contract_load();
    var res = self~$UserDefaultCallback$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQXDdm51ocx8qXiDLTdUVPFUVr2TD6VYkQ1axnzqEgu1S";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);    ;; DEFECT: InconsistentData
}

;;
;; Routing of a Contract UserDefaultCallback
;;

((slice, slice, cell, int), int) $UserDefaultCallback$_contract_router_internal((slice, slice, cell, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$UserDefaultCallback$_internal_empty();
        return (self, true);
    }
    
    ;; Receive BuildUDC message
    if (op == 2104203658) {
        var msg = in_msg~$BuildUDC$_load();
        self~$UserDefaultCallback$_internal_binary_BuildUDC(msg);
        return (self, true);
    }
    
    ;; Receive EventSignal message
    if (op == 306637748) {
        var msg = in_msg~$EventSignal$_load();
        self~$UserDefaultCallback$_internal_binary_EventSignal(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$UserDefaultCallback$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $UserDefaultCallback$_contract_load();
    
    ;; Handle operation
    int handled = self~$UserDefaultCallback$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $UserDefaultCallback$_contract_store(self);
}
