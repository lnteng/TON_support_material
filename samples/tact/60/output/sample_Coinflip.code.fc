#pragma version >=0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Coinflip.headers.fc";
#include "sample_Coinflip.stdlib.fc";
#include "sample_Coinflip.constants.fc";
#include "sample_Coinflip.storage.fc";

;;
;; Contract Coinflip functions
;;

(slice, int) $Coinflip$_contract_init() impure inline_ref {
    var (($self'owner, $self'test)) = (null(), null());
    $self'owner = __tact_context_get_sender();
    $self'test = 10;
    return ($self'owner, $self'test);
}

((slice, int), int) $Coinflip$_fun_rand((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'test)) = $self;
    int $randomNumber = $global_randomInt();
    return (($self'owner, $self'test), $randomNumber);
}

;;
;; Receivers of a Contract Coinflip
;;

((slice, int), ()) $Coinflip$_internal_text_f3e40838d000ed9f74039fc5586024485f2abb6513b587532d3fecbf6bd9852f((slice, int) $self) impure inline {
    var ($self'owner, $self'test) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $amount = $ctx'value;
    int $randomNumber = $global_randomInt();
    tuple $sb = __tact_string_builder_start_string();
    $sb~__tact_string_builder_append(__gen_slice_string_593d85b5d5c1af88487ea569ff40003a61b803202071b0f9bc798c90a74469db());
    $sb~__tact_string_builder_append(__tact_int_to_string($randomNumber));
    $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, (64 + 2), $String$_fun_asComment(__tact_string_builder_end_slice($sb))));
    return (($self'owner, $self'test), ());
}

(((slice, int)), ()) $Coinflip$_internal_binary_Deploy((slice, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'test) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'test)~$Coinflip$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'test), ());
}

;;
;; Get methods of a Contract Coinflip
;;

_ %rand() method_id(67393) {
    var self = $Coinflip$_contract_load();
    var res = self~$Coinflip$_fun_rand();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmXBT5hqY6eAADhGrMTS2BNdM8nm4R2tuLqfbLFFLMwD7s";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);    ;; DEFECT: InconsistentData
}

;;
;; Routing of a Contract Coinflip
;;

((slice, int), int) $Coinflip$_contract_router_internal((slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Coinflip$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "click" message
        if (text_op == 0xf3e40838d000ed9f74039fc5586024485f2abb6513b587532d3fecbf6bd9852f) {
            self~$Coinflip$_internal_text_f3e40838d000ed9f74039fc5586024485f2abb6513b587532d3fecbf6bd9852f();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Coinflip$_contract_load();
    
    ;; Handle operation
    int handled = self~$Coinflip$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Coinflip$_contract_store(self);
}
