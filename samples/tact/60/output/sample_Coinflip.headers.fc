;;
;; Header files for Coinflip
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Coinflip$_store
builder $Coinflip$_store(builder build_0, (slice, int) v) inline;

;; $Coinflip$_load
(slice, ((slice, int))) $Coinflip$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Coinflip$_contract_init
(slice, int) $Coinflip$_contract_init() impure inline_ref;

;; $Coinflip$_contract_load
(slice, int) $Coinflip$_contract_load() impure inline_ref;

;; $Coinflip$_contract_store
() $Coinflip$_contract_store((slice, int) v) impure inline;

;; $global_randomInt
int $global_randomInt() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $Coinflip$_fun_rand
((slice, int), int) $Coinflip$_fun_rand((slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Coinflip$_fun_forward
((slice, int), ()) $Coinflip$_fun_forward((slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Coinflip$_fun_notify
((slice, int), ()) $Coinflip$_fun_notify((slice, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
