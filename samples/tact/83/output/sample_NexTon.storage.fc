;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

((cell, cell)) $StateInit$_constructor_data_code(cell data, cell code) inline {
    return (code, data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: UserDeposit
;; Header: 0xd3e40b97
;; TLB: user_deposit#d3e40b97 queryId:uint64 lockPeriod:uint256 leverage:uint32 = UserDeposit
;;

(slice, ((int, int, int))) $UserDeposit$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3554937751);
    var v'queryId = sc_0~load_uint(64);
    var v'lockPeriod = sc_0~load_uint(256);
    var v'leverage = sc_0~load_uint(32);
    return (sc_0, (v'queryId, v'lockPeriod, v'leverage));
}

;;
;; Type: MintNFT
;; Header: 0x00000001
;; TLB: mint_nft#00000001 queryId:uint64 itemIndex:uint64 amount:coins NFTMessage:^cell = MintNFT
;;

builder $MintNFT$_store(builder build_0, (int, int, int, cell) v) inline {
    var (v'queryId, v'itemIndex, v'amount, v'NFTMessage) = v;
    build_0 = store_uint(build_0, 1, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_uint(v'itemIndex, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_ref(v'NFTMessage);
    return build_0;
}

cell $MintNFT$_store_cell((int, int, int, cell) v) inline {
    return $MintNFT$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $MintNFT$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1);
    var v'queryId = sc_0~load_uint(64);
    var v'itemIndex = sc_0~load_uint(64);
    return (sc_0, (v'queryId, v'itemIndex));
}

((int, int, int, cell)) $MintNFT$_tensor_cast((int, int, int, cell) v) asm "NOP";

((int, int, int, cell)) $MintNFT$_constructor_queryId_itemIndex_amount_NFTMessage(int queryId, int itemIndex, int amount, cell NFTMessage) inline {
    return (queryId, itemIndex, amount, NFTMessage);
}

;;
;; Type: Attribute
;; TLB: _ trait_type:^string value:int257 = Attribute
;;

((slice, int)) $Attribute$_constructor_trait_type_value(slice trait_type, int value) inline {
    return (trait_type, value);
}

;;
;; Type: ClaimInfo
;; TLB: _ itemIndex:uint64 owner:address content:^cell = ClaimInfo
;;

(slice, ((int, slice, cell))) $ClaimInfo$_load(slice sc_0) inline {
    var v'itemIndex = sc_0~load_uint(64);
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    return (sc_0, (v'itemIndex, v'owner, v'content));
}

;;
;; Type: UserClaim
;; Header: 0x0636c616
;; TLB: user_claim#0636c616 queryId:uint64 info:ClaimInfo{itemIndex:uint64,owner:address,content:^cell} = UserClaim
;;

(slice, ((int, (int, slice, cell)))) $UserClaim$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 104252950);
    var v'queryId = sc_0~load_uint(64);
    var v'info = sc_0~$ClaimInfo$_load();
    return (sc_0, (v'queryId, v'info));
}

;;
;; Type: NexTon
;;

builder $NexTon$_store(builder build_0, (slice, int, cell, slice, int, int, int, cell, cell, cell) v) inline {
    var (v'owner, v'stopped, v'nftItemCode, v'nFTContractAddress, v'counter, v'latestStakeBlock, v'itemCounter, v'userItemClaimed, v'claimers, v'itemContent) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'stopped, 1);
    build_0 = build_0.store_ref(v'nftItemCode);
    build_0 = __tact_store_address(build_0, v'nFTContractAddress);
    build_0 = build_0.store_uint(v'counter, 32);
    build_0 = build_0.store_uint(v'latestStakeBlock, 256);
    build_0 = build_0.store_uint(v'itemCounter, 64);
    build_0 = build_0.store_dict(v'userItemClaimed);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'claimers);
    build_1 = build_1.store_dict(v'itemContent);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, cell, slice, int, int, int, cell, cell, cell))) $NexTon$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'stopped = sc_0~load_int(1);
    var v'nftItemCode = sc_0~load_ref();
    var v'nFTContractAddress = sc_0~__tact_load_address();
    var v'counter = sc_0~load_uint(32);
    var v'latestStakeBlock = sc_0~load_uint(256);
    var v'itemCounter = sc_0~load_uint(64);
    var v'userItemClaimed = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'claimers = sc_1~load_dict();
    var v'itemContent = sc_1~load_dict();    ;; DEFECT: LackEndParse
    return (sc_0, (v'owner, v'stopped, v'nftItemCode, v'nFTContractAddress, v'counter, v'latestStakeBlock, v'itemCounter, v'userItemClaimed, v'claimers, v'itemContent));
}

(slice, ((cell, slice))) $NexTon$init$_load(slice sc_0) inline {
    var v'nftItemCode = sc_0~load_ref();
    var v'_nft = sc_0~__tact_load_address();
    return (sc_0, (v'nftItemCode, v'_nft));
}

(slice, int, cell, slice, int, int, int, cell, cell, cell) $NexTon$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NexTon$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (cell nftItemCode, slice _nft) = $sc~$NexTon$init$_load();
        $sc.end_parse();
        return $NexTon$_contract_init(nftItemCode, _nft);
    }
}

() $NexTon$_contract_store((slice, int, cell, slice, int, int, int, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NexTon$_store(b, v);
    set_data(b.end_cell());
}