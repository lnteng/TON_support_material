;;
;; Header files for NexTon
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_set_uint_slice
(cell, ()) __tact_dict_set_uint_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_uint_slice
slice __tact_dict_get_uint_slice(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $UserDeposit$_load
(slice, ((int, int, int))) $UserDeposit$_load(slice sc_0) inline;

;; $MintNFT$_store
builder $MintNFT$_store(builder build_0, (int, int, int, cell) v) inline;

;; $MintNFT$_store_cell
cell $MintNFT$_store_cell((int, int, int, cell) v) inline;

;; $MintNFT$_load_bounced
(slice, ((int, int))) $MintNFT$_load_bounced(slice sc_0) inline;

;; $ClaimInfo$_load
(slice, ((int, slice, cell))) $ClaimInfo$_load(slice sc_0) inline;

;; $UserClaim$_load
(slice, ((int, (int, slice, cell)))) $UserClaim$_load(slice sc_0) inline;

;; $NexTon$_store
builder $NexTon$_store(builder build_0, (slice, int, cell, slice, int, int, int, cell, cell, cell) v) inline;

;; $NexTon$_load
(slice, ((slice, int, cell, slice, int, int, int, cell, cell, cell))) $NexTon$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $NexTon$init$_load
(slice, ((cell, slice))) $NexTon$init$_load(slice sc_0) inline;

;; $NexTon$_contract_init
(slice, int, cell, slice, int, int, int, cell, cell, cell) $NexTon$_contract_init(cell $nftItemCode, slice $_nft) impure inline_ref;

;; $NexTon$_contract_load
(slice, int, cell, slice, int, int, int, cell, cell, cell) $NexTon$_contract_load() impure inline_ref;

;; $NexTon$_contract_store
() $NexTon$_contract_store((slice, int, cell, slice, int, int, int, cell, cell, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $NexTon$_fun_mintNFT
((slice, int, cell, slice, int, int, int, cell, cell, cell), ()) $NexTon$_fun_mintNFT((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, (int, int, int, cell) $body) impure inline_ref;

;; $StateInit$_constructor_data_code
((cell, cell)) $StateInit$_constructor_data_code(cell data, cell code) inline;

;; $NexTon$_fun_getNftItemInit
((slice, int, cell, slice, int, int, int, cell, cell, cell), (cell, cell)) $NexTon$_fun_getNftItemInit((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, int $itemIndex) impure inline_ref;

;; $NexTon$_fun_getNftAddressByIndex
((slice, int, cell, slice, int, int, int, cell, cell, cell), slice) $NexTon$_fun_getNftAddressByIndex((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, int $itemIndex) impure inline_ref;

;; $NexTon$_fun_CollectionAddress
((slice, int, cell, slice, int, int, int, cell, cell, cell), slice) $NexTon$_fun_CollectionAddress((slice, int, cell, slice, int, int, int, cell, cell, cell) $self) impure inline_ref;

;; $NexTon$_fun_balance
((slice, int, cell, slice, int, int, int, cell, cell, cell), int) $NexTon$_fun_balance((slice, int, cell, slice, int, int, int, cell, cell, cell) $self) impure inline_ref;

;; $NexTon$_fun_nftCounter
((slice, int, cell, slice, int, int, int, cell, cell, cell), int) $NexTon$_fun_nftCounter((slice, int, cell, slice, int, int, int, cell, cell, cell) $self) impure inline_ref;

;; $NexTon$_fun_userNFTItemClaimed
((slice, int, cell, slice, int, int, int, cell, cell, cell), int) $NexTon$_fun_userNFTItemClaimed((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, int $index) impure inline_ref;

;; $NexTon$_fun_claimer
((slice, int, cell, slice, int, int, int, cell, cell, cell), slice) $NexTon$_fun_claimer((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, int $index) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $NexTon$_fun_forward
((slice, int, cell, slice, int, int, int, cell, cell, cell), ()) $NexTon$_fun_forward((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $NexTon$_fun_reply
((slice, int, cell, slice, int, int, int, cell, cell, cell), ()) $NexTon$_fun_reply((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, cell $body) impure inline;

;; $NexTon$_fun_notify
((slice, int, cell, slice, int, int, int, cell, cell, cell), ()) $NexTon$_fun_notify((slice, int, cell, slice, int, int, int, cell, cell, cell) $self, cell $body) impure inline;

;; $NexTon$_fun_requireOwner
((slice, int, cell, slice, int, int, int, cell, cell, cell), ()) $NexTon$_fun_requireOwner((slice, int, cell, slice, int, int, int, cell, cell, cell) $self) impure inline_ref;

;; $NexTon$_fun_owner
((slice, int, cell, slice, int, int, int, cell, cell, cell), slice) $NexTon$_fun_owner((slice, int, cell, slice, int, int, int, cell, cell, cell) $self) impure inline_ref;

;; $Attribute$_constructor_trait_type_value
((slice, int)) $Attribute$_constructor_trait_type_value(slice trait_type, int value) inline;

;; $MintNFT$_constructor_queryId_itemIndex_amount_NFTMessage
((int, int, int, cell)) $MintNFT$_constructor_queryId_itemIndex_amount_NFTMessage(int queryId, int itemIndex, int amount, cell NFTMessage) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;
