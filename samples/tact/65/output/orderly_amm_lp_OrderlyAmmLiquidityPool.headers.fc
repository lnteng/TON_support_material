;;
;; Header files for OrderlyAmmLiquidityPool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Mint$_store
builder $Mint$_store(builder build_0, (int, slice, slice) v) inline;

;; $Mint$_store_cell
cell $Mint$_store_cell((int, slice, slice) v) inline;

;; $SwapInternal$_load
(slice, ((int, slice, int, int))) $SwapInternal$_load(slice sc_0) inline;

;; $CreateLpInternal$_load
(slice, ((slice))) $CreateLpInternal$_load(slice sc_0) inline;

;; $CreateLpSuccessInternal$_store
builder $CreateLpSuccessInternal$_store(builder build_0, (slice, slice, slice) v) inline;

;; $CreateLpSuccessInternal$_store_cell
cell $CreateLpSuccessInternal$_store_cell((slice, slice, slice) v) inline;

;; $SendLiquidityToLpInternal$_load
(slice, ((int, int, slice, slice, int, slice))) $SendLiquidityToLpInternal$_load(slice sc_0) inline_ref;

;; $PendingQuery$_store
builder $PendingQuery$_store(builder build_0, (int, int) v) inline;

;; $PendingQuery$_store_cell
cell $PendingQuery$_store_cell((int, int) v) inline;

;; $PendingQuery$_not_null
((int, int)) $PendingQuery$_not_null(tuple v) inline;

;; $PendingQuery$_store_opt
cell $PendingQuery$_store_opt(tuple v) inline;

;; $PendingQuery$_load
(slice, ((int, int))) $PendingQuery$_load(slice sc_0) inline;

;; $PendingQuery$_as_optional
tuple $PendingQuery$_as_optional((int, int) v) inline;

;; $PendingQuery$_load_opt
tuple $PendingQuery$_load_opt(cell cl) inline;

;; $OrderlyAmmLiquidityPool$_store
builder $OrderlyAmmLiquidityPool$_store(builder build_0, (slice, slice, int, slice, int, int, cell, int) v) inline;

;; $OrderlyAmmLiquidityPool$_load
(slice, ((slice, slice, int, slice, int, int, cell, int))) $OrderlyAmmLiquidityPool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $JettonMaster$init$_store
builder $JettonMaster$init$_store(builder build_0, (slice, cell) v) inline;

;; $OrderlyAmmDeposit$init$_store
builder $OrderlyAmmDeposit$init$_store(builder build_0, (slice, slice, slice) v) inline;

;; $OrderlyAmmLiquidityPool$init$_load
(slice, ((slice, slice, slice))) $OrderlyAmmLiquidityPool$init$_load(slice sc_0) inline;

;; $OrderlyAmmLiquidityPool$_contract_init
(slice, slice, int, slice, int, int, cell, int) $OrderlyAmmLiquidityPool$_contract_init(slice $master, slice $base, slice $quote) impure inline_ref;

;; $OrderlyAmmLiquidityPool$_contract_load
(slice, slice, int, slice, int, int, cell, int) $OrderlyAmmLiquidityPool$_contract_load() impure inline_ref;

;; $OrderlyAmmLiquidityPool$_contract_store
() $OrderlyAmmLiquidityPool$_contract_store((slice, slice, int, slice, int, int, cell, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $JettonMaster$_init_child
(cell, cell) $JettonMaster$_init_child(cell sys', slice $owner, cell $content) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $OrderlyAmmDeposit$_init_child
(cell, cell) $OrderlyAmmDeposit$_init_child(cell sys', slice $master, slice $owner, slice $jetton_wallet) inline_ref;

;; $OrderlyAmmLiquidityPool$_fun_get_shares_address
((slice, slice, int, slice, int, int, cell, int), slice) $OrderlyAmmLiquidityPool$_fun_get_shares_address((slice, slice, int, slice, int, int, cell, int) $self) impure inline_ref;

;; $OrderlyAmmLiquidityPool$_fun_forward
((slice, slice, int, slice, int, int, cell, int), ()) $OrderlyAmmLiquidityPool$_fun_forward((slice, slice, int, slice, int, int, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $OrderlyAmmLiquidityPool$_fun_notify
((slice, slice, int, slice, int, int, cell, int), ()) $OrderlyAmmLiquidityPool$_fun_notify((slice, slice, int, slice, int, int, cell, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $CreateLpSuccessInternal$_constructor_base_quote_responseDestination
((slice, slice, slice)) $CreateLpSuccessInternal$_constructor_base_quote_responseDestination(slice base, slice quote, slice responseDestination) inline;

;; $PendingQuery$_constructor_amount_isBase
((int, int)) $PendingQuery$_constructor_amount_isBase(int amount, int isBase) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $Mint$_constructor_amount_receiver_responseDestination
((int, slice, slice)) $Mint$_constructor_amount_receiver_responseDestination(int amount, slice receiver, slice responseDestination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
